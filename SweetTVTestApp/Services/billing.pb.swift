// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: billing.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct TvService_Subscription {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int32 {
    get {return _id ?? 0}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {self._id = nil}

  var name: String {
    get {return _name ?? String()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {self._name = nil}

  var discountPrice: Int32 {
    get {return _discountPrice ?? 0}
    set {_discountPrice = newValue}
  }
  /// Returns true if `discountPrice` has been explicitly set.
  var hasDiscountPrice: Bool {return self._discountPrice != nil}
  /// Clears the value of `discountPrice`. Subsequent reads from it will return its default value.
  mutating func clearDiscountPrice() {self._discountPrice = nil}

  var price: Int32 {
    get {return _price ?? 0}
    set {_price = newValue}
  }
  /// Returns true if `price` has been explicitly set.
  var hasPrice: Bool {return self._price != nil}
  /// Clears the value of `price`. Subsequent reads from it will return its default value.
  mutating func clearPrice() {self._price = nil}

  var duration: Int32 {
    get {return _duration ?? 0}
    set {_duration = newValue}
  }
  /// Returns true if `duration` has been explicitly set.
  var hasDuration: Bool {return self._duration != nil}
  /// Clears the value of `duration`. Subsequent reads from it will return its default value.
  mutating func clearDuration() {self._duration = nil}

  var productID: String {
    get {return _productID ?? String()}
    set {_productID = newValue}
  }
  /// Returns true if `productID` has been explicitly set.
  var hasProductID: Bool {return self._productID != nil}
  /// Clears the value of `productID`. Subsequent reads from it will return its default value.
  mutating func clearProductID() {self._productID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _id: Int32? = nil
  fileprivate var _name: String? = nil
  fileprivate var _discountPrice: Int32? = nil
  fileprivate var _price: Int32? = nil
  fileprivate var _duration: Int32? = nil
  fileprivate var _productID: String? = nil
}

struct TvService_PromoTag {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int32 {
    get {return _id ?? 0}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {self._id = nil}

  var title: String {
    get {return _title ?? String()}
    set {_title = newValue}
  }
  /// Returns true if `title` has been explicitly set.
  var hasTitle: Bool {return self._title != nil}
  /// Clears the value of `title`. Subsequent reads from it will return its default value.
  mutating func clearTitle() {self._title = nil}

  var iconURL: String {
    get {return _iconURL ?? String()}
    set {_iconURL = newValue}
  }
  /// Returns true if `iconURL` has been explicitly set.
  var hasIconURL: Bool {return self._iconURL != nil}
  /// Clears the value of `iconURL`. Subsequent reads from it will return its default value.
  mutating func clearIconURL() {self._iconURL = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _id: Int32? = nil
  fileprivate var _title: String? = nil
  fileprivate var _iconURL: String? = nil
}

struct TvService_Tariff {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int32 {
    get {return _storage._id ?? 0}
    set {_uniqueStorage()._id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {_uniqueStorage()._id = nil}

  var name: String {
    get {return _storage._name ?? String()}
    set {_uniqueStorage()._name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {_uniqueStorage()._name = nil}

  var price: Int32 {
    get {return _storage._price ?? 0}
    set {_uniqueStorage()._price = newValue}
  }
  /// Returns true if `price` has been explicitly set.
  var hasPrice: Bool {return _storage._price != nil}
  /// Clears the value of `price`. Subsequent reads from it will return its default value.
  mutating func clearPrice() {_uniqueStorage()._price = nil}

  var hidden: Bool {
    get {return _storage._hidden ?? false}
    set {_uniqueStorage()._hidden = newValue}
  }
  /// Returns true if `hidden` has been explicitly set.
  var hasHidden: Bool {return _storage._hidden != nil}
  /// Clears the value of `hidden`. Subsequent reads from it will return its default value.
  mutating func clearHidden() {_uniqueStorage()._hidden = nil}

  var packageID: [Int32] {
    get {return _storage._packageID}
    set {_uniqueStorage()._packageID = newValue}
  }

  var ownerID: [Int32] {
    get {return _storage._ownerID}
    set {_uniqueStorage()._ownerID = newValue}
  }

  var strictChannelList: Bool {
    get {return _storage._strictChannelList ?? false}
    set {_uniqueStorage()._strictChannelList = newValue}
  }
  /// Returns true if `strictChannelList` has been explicitly set.
  var hasStrictChannelList: Bool {return _storage._strictChannelList != nil}
  /// Clears the value of `strictChannelList`. Subsequent reads from it will return its default value.
  mutating func clearStrictChannelList() {_uniqueStorage()._strictChannelList = nil}

  var iptvChannelsCount: Int32 {
    get {return _storage._iptvChannelsCount ?? 0}
    set {_uniqueStorage()._iptvChannelsCount = newValue}
  }
  /// Returns true if `iptvChannelsCount` has been explicitly set.
  var hasIptvChannelsCount: Bool {return _storage._iptvChannelsCount != nil}
  /// Clears the value of `iptvChannelsCount`. Subsequent reads from it will return its default value.
  mutating func clearIptvChannelsCount() {_uniqueStorage()._iptvChannelsCount = nil}

  var moviesCount: Int32 {
    get {return _storage._moviesCount ?? 0}
    set {_uniqueStorage()._moviesCount = newValue}
  }
  /// Returns true if `moviesCount` has been explicitly set.
  var hasMoviesCount: Bool {return _storage._moviesCount != nil}
  /// Clears the value of `moviesCount`. Subsequent reads from it will return its default value.
  mutating func clearMoviesCount() {_uniqueStorage()._moviesCount = nil}

  var dvbcChannelsCount: Int32 {
    get {return _storage._dvbcChannelsCount ?? 0}
    set {_uniqueStorage()._dvbcChannelsCount = newValue}
  }
  /// Returns true if `dvbcChannelsCount` has been explicitly set.
  var hasDvbcChannelsCount: Bool {return _storage._dvbcChannelsCount != nil}
  /// Clears the value of `dvbcChannelsCount`. Subsequent reads from it will return its default value.
  mutating func clearDvbcChannelsCount() {_uniqueStorage()._dvbcChannelsCount = nil}

  var catvChannelsCount: Int32 {
    get {return _storage._catvChannelsCount ?? 0}
    set {_uniqueStorage()._catvChannelsCount = newValue}
  }
  /// Returns true if `catvChannelsCount` has been explicitly set.
  var hasCatvChannelsCount: Bool {return _storage._catvChannelsCount != nil}
  /// Clears the value of `catvChannelsCount`. Subsequent reads from it will return its default value.
  mutating func clearCatvChannelsCount() {_uniqueStorage()._catvChannelsCount = nil}

  var nextTariffID: Int32 {
    get {return _storage._nextTariffID ?? 0}
    set {_uniqueStorage()._nextTariffID = newValue}
  }
  /// Returns true if `nextTariffID` has been explicitly set.
  var hasNextTariffID: Bool {return _storage._nextTariffID != nil}
  /// Clears the value of `nextTariffID`. Subsequent reads from it will return its default value.
  mutating func clearNextTariffID() {_uniqueStorage()._nextTariffID = nil}

  var iconURL: String {
    get {return _storage._iconURL ?? String()}
    set {_uniqueStorage()._iconURL = newValue}
  }
  /// Returns true if `iconURL` has been explicitly set.
  var hasIconURL: Bool {return _storage._iconURL != nil}
  /// Clears the value of `iconURL`. Subsequent reads from it will return its default value.
  mutating func clearIconURL() {_uniqueStorage()._iconURL = nil}

  var bannerURL: String {
    get {return _storage._bannerURL ?? String()}
    set {_uniqueStorage()._bannerURL = newValue}
  }
  /// Returns true if `bannerURL` has been explicitly set.
  var hasBannerURL: Bool {return _storage._bannerURL != nil}
  /// Clears the value of `bannerURL`. Subsequent reads from it will return its default value.
  mutating func clearBannerURL() {_uniqueStorage()._bannerURL = nil}

  var subscriptionID: [Int32] {
    get {return _storage._subscriptionID}
    set {_uniqueStorage()._subscriptionID = newValue}
  }

  var duration: Int32 {
    get {return _storage._duration ?? 0}
    set {_uniqueStorage()._duration = newValue}
  }
  /// Returns true if `duration` has been explicitly set.
  var hasDuration: Bool {return _storage._duration != nil}
  /// Clears the value of `duration`. Subsequent reads from it will return its default value.
  mutating func clearDuration() {_uniqueStorage()._duration = nil}

  var priceForeign: Int32 {
    get {return _storage._priceForeign ?? 0}
    set {_uniqueStorage()._priceForeign = newValue}
  }
  /// Returns true if `priceForeign` has been explicitly set.
  var hasPriceForeign: Bool {return _storage._priceForeign != nil}
  /// Clears the value of `priceForeign`. Subsequent reads from it will return its default value.
  mutating func clearPriceForeign() {_uniqueStorage()._priceForeign = nil}

  var productID: String {
    get {return _storage._productID ?? String()}
    set {_uniqueStorage()._productID = newValue}
  }
  /// Returns true if `productID` has been explicitly set.
  var hasProductID: Bool {return _storage._productID != nil}
  /// Clears the value of `productID`. Subsequent reads from it will return its default value.
  mutating func clearProductID() {_uniqueStorage()._productID = nil}

  var sortOrder: Int32 {
    get {return _storage._sortOrder ?? 0}
    set {_uniqueStorage()._sortOrder = newValue}
  }
  /// Returns true if `sortOrder` has been explicitly set.
  var hasSortOrder: Bool {return _storage._sortOrder != nil}
  /// Clears the value of `sortOrder`. Subsequent reads from it will return its default value.
  mutating func clearSortOrder() {_uniqueStorage()._sortOrder = nil}

  var imageURL: String {
    get {return _storage._imageURL ?? String()}
    set {_uniqueStorage()._imageURL = newValue}
  }
  /// Returns true if `imageURL` has been explicitly set.
  var hasImageURL: Bool {return _storage._imageURL != nil}
  /// Clears the value of `imageURL`. Subsequent reads from it will return its default value.
  mutating func clearImageURL() {_uniqueStorage()._imageURL = nil}

  var promoImageURL: String {
    get {return _storage._promoImageURL ?? String()}
    set {_uniqueStorage()._promoImageURL = newValue}
  }
  /// Returns true if `promoImageURL` has been explicitly set.
  var hasPromoImageURL: Bool {return _storage._promoImageURL != nil}
  /// Clears the value of `promoImageURL`. Subsequent reads from it will return its default value.
  mutating func clearPromoImageURL() {_uniqueStorage()._promoImageURL = nil}

  var promoTags: [TvService_PromoTag] {
    get {return _storage._promoTags}
    set {_uniqueStorage()._promoTags = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct TvService_Service {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int32 {
    get {return _id ?? 0}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {self._id = nil}

  var name: String {
    get {return _name ?? String()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {self._name = nil}

  var price: Int32 {
    get {return _price ?? 0}
    set {_price = newValue}
  }
  /// Returns true if `price` has been explicitly set.
  var hasPrice: Bool {return self._price != nil}
  /// Clears the value of `price`. Subsequent reads from it will return its default value.
  mutating func clearPrice() {self._price = nil}

  var ownerID: [Int32] = []

  var duration: Int32 {
    get {return _duration ?? 0}
    set {_duration = newValue}
  }
  /// Returns true if `duration` has been explicitly set.
  var hasDuration: Bool {return self._duration != nil}
  /// Clears the value of `duration`. Subsequent reads from it will return its default value.
  mutating func clearDuration() {self._duration = nil}

  var productID: String {
    get {return _productID ?? String()}
    set {_productID = newValue}
  }
  /// Returns true if `productID` has been explicitly set.
  var hasProductID: Bool {return self._productID != nil}
  /// Clears the value of `productID`. Subsequent reads from it will return its default value.
  mutating func clearProductID() {self._productID = nil}

  var dateEnd: UInt64 {
    get {return _dateEnd ?? 0}
    set {_dateEnd = newValue}
  }
  /// Returns true if `dateEnd` has been explicitly set.
  var hasDateEnd: Bool {return self._dateEnd != nil}
  /// Clears the value of `dateEnd`. Subsequent reads from it will return its default value.
  mutating func clearDateEnd() {self._dateEnd = nil}

  var packageID: [Int32] = []

  var externalUse: Bool {
    get {return _externalUse ?? false}
    set {_externalUse = newValue}
  }
  /// Returns true if `externalUse` has been explicitly set.
  var hasExternalUse: Bool {return self._externalUse != nil}
  /// Clears the value of `externalUse`. Subsequent reads from it will return its default value.
  mutating func clearExternalUse() {self._externalUse = nil}

  var expiresAt: String {
    get {return _expiresAt ?? String()}
    set {_expiresAt = newValue}
  }
  /// Returns true if `expiresAt` has been explicitly set.
  var hasExpiresAt: Bool {return self._expiresAt != nil}
  /// Clears the value of `expiresAt`. Subsequent reads from it will return its default value.
  mutating func clearExpiresAt() {self._expiresAt = nil}

  var promoTags: [TvService_PromoTag] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _id: Int32? = nil
  fileprivate var _name: String? = nil
  fileprivate var _price: Int32? = nil
  fileprivate var _duration: Int32? = nil
  fileprivate var _productID: String? = nil
  fileprivate var _dateEnd: UInt64? = nil
  fileprivate var _externalUse: Bool? = nil
  fileprivate var _expiresAt: String? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tv_service"

extension TvService_Subscription: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Subscription"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .standard(proto: "discount_price"),
    4: .same(proto: "price"),
    5: .same(proto: "duration"),
    6: .standard(proto: "product_id"),
  ]

  public var isInitialized: Bool {
    if self._id == nil {return false}
    if self._name == nil {return false}
    if self._discountPrice == nil {return false}
    if self._price == nil {return false}
    if self._duration == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self._id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._name) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self._discountPrice) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self._price) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self._duration) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self._productID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._id {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._discountPrice {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._price {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._duration {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
    }
    if let v = self._productID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TvService_Subscription, rhs: TvService_Subscription) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._name != rhs._name {return false}
    if lhs._discountPrice != rhs._discountPrice {return false}
    if lhs._price != rhs._price {return false}
    if lhs._duration != rhs._duration {return false}
    if lhs._productID != rhs._productID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TvService_PromoTag: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PromoTag"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "title"),
    3: .standard(proto: "icon_url"),
  ]

  public var isInitialized: Bool {
    if self._id == nil {return false}
    if self._title == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self._id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._title) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._iconURL) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._id {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._title {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._iconURL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TvService_PromoTag, rhs: TvService_PromoTag) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._title != rhs._title {return false}
    if lhs._iconURL != rhs._iconURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TvService_Tariff: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Tariff"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "price"),
    4: .same(proto: "hidden"),
    5: .standard(proto: "package_id"),
    6: .standard(proto: "owner_id"),
    7: .standard(proto: "strict_channel_list"),
    8: .standard(proto: "iptv_channels_count"),
    9: .standard(proto: "movies_count"),
    10: .standard(proto: "dvbc_channels_count"),
    11: .standard(proto: "catv_channels_count"),
    12: .standard(proto: "next_tariff_id"),
    13: .standard(proto: "icon_url"),
    14: .standard(proto: "banner_url"),
    15: .standard(proto: "subscription_id"),
    16: .same(proto: "duration"),
    17: .standard(proto: "price_foreign"),
    18: .standard(proto: "product_id"),
    19: .standard(proto: "sort_order"),
    20: .standard(proto: "image_url"),
    21: .standard(proto: "promo_image_url"),
    100: .standard(proto: "promo_tags"),
  ]

  fileprivate class _StorageClass {
    var _id: Int32? = nil
    var _name: String? = nil
    var _price: Int32? = nil
    var _hidden: Bool? = nil
    var _packageID: [Int32] = []
    var _ownerID: [Int32] = []
    var _strictChannelList: Bool? = nil
    var _iptvChannelsCount: Int32? = nil
    var _moviesCount: Int32? = nil
    var _dvbcChannelsCount: Int32? = nil
    var _catvChannelsCount: Int32? = nil
    var _nextTariffID: Int32? = nil
    var _iconURL: String? = nil
    var _bannerURL: String? = nil
    var _subscriptionID: [Int32] = []
    var _duration: Int32? = nil
    var _priceForeign: Int32? = nil
    var _productID: String? = nil
    var _sortOrder: Int32? = nil
    var _imageURL: String? = nil
    var _promoImageURL: String? = nil
    var _promoTags: [TvService_PromoTag] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _name = source._name
      _price = source._price
      _hidden = source._hidden
      _packageID = source._packageID
      _ownerID = source._ownerID
      _strictChannelList = source._strictChannelList
      _iptvChannelsCount = source._iptvChannelsCount
      _moviesCount = source._moviesCount
      _dvbcChannelsCount = source._dvbcChannelsCount
      _catvChannelsCount = source._catvChannelsCount
      _nextTariffID = source._nextTariffID
      _iconURL = source._iconURL
      _bannerURL = source._bannerURL
      _subscriptionID = source._subscriptionID
      _duration = source._duration
      _priceForeign = source._priceForeign
      _productID = source._productID
      _sortOrder = source._sortOrder
      _imageURL = source._imageURL
      _promoImageURL = source._promoImageURL
      _promoTags = source._promoTags
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id == nil {return false}
      if _storage._name == nil {return false}
      if _storage._price == nil {return false}
      if _storage._hidden == nil {return false}
      if _storage._strictChannelList == nil {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._promoTags) {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt32Field(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 3: try { try decoder.decodeSingularInt32Field(value: &_storage._price) }()
        case 4: try { try decoder.decodeSingularBoolField(value: &_storage._hidden) }()
        case 5: try { try decoder.decodeRepeatedInt32Field(value: &_storage._packageID) }()
        case 6: try { try decoder.decodeRepeatedInt32Field(value: &_storage._ownerID) }()
        case 7: try { try decoder.decodeSingularBoolField(value: &_storage._strictChannelList) }()
        case 8: try { try decoder.decodeSingularInt32Field(value: &_storage._iptvChannelsCount) }()
        case 9: try { try decoder.decodeSingularInt32Field(value: &_storage._moviesCount) }()
        case 10: try { try decoder.decodeSingularInt32Field(value: &_storage._dvbcChannelsCount) }()
        case 11: try { try decoder.decodeSingularInt32Field(value: &_storage._catvChannelsCount) }()
        case 12: try { try decoder.decodeSingularInt32Field(value: &_storage._nextTariffID) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._iconURL) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._bannerURL) }()
        case 15: try { try decoder.decodeRepeatedInt32Field(value: &_storage._subscriptionID) }()
        case 16: try { try decoder.decodeSingularInt32Field(value: &_storage._duration) }()
        case 17: try { try decoder.decodeSingularInt32Field(value: &_storage._priceForeign) }()
        case 18: try { try decoder.decodeSingularStringField(value: &_storage._productID) }()
        case 19: try { try decoder.decodeSingularInt32Field(value: &_storage._sortOrder) }()
        case 20: try { try decoder.decodeSingularStringField(value: &_storage._imageURL) }()
        case 21: try { try decoder.decodeSingularStringField(value: &_storage._promoImageURL) }()
        case 100: try { try decoder.decodeRepeatedMessageField(value: &_storage._promoTags) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._id {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._name {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if let v = _storage._price {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._hidden {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
      }
      if !_storage._packageID.isEmpty {
        try visitor.visitRepeatedInt32Field(value: _storage._packageID, fieldNumber: 5)
      }
      if !_storage._ownerID.isEmpty {
        try visitor.visitRepeatedInt32Field(value: _storage._ownerID, fieldNumber: 6)
      }
      if let v = _storage._strictChannelList {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
      }
      if let v = _storage._iptvChannelsCount {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 8)
      }
      if let v = _storage._moviesCount {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 9)
      }
      if let v = _storage._dvbcChannelsCount {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 10)
      }
      if let v = _storage._catvChannelsCount {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 11)
      }
      if let v = _storage._nextTariffID {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 12)
      }
      if let v = _storage._iconURL {
        try visitor.visitSingularStringField(value: v, fieldNumber: 13)
      }
      if let v = _storage._bannerURL {
        try visitor.visitSingularStringField(value: v, fieldNumber: 14)
      }
      if !_storage._subscriptionID.isEmpty {
        try visitor.visitRepeatedInt32Field(value: _storage._subscriptionID, fieldNumber: 15)
      }
      if let v = _storage._duration {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 16)
      }
      if let v = _storage._priceForeign {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 17)
      }
      if let v = _storage._productID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 18)
      }
      if let v = _storage._sortOrder {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 19)
      }
      if let v = _storage._imageURL {
        try visitor.visitSingularStringField(value: v, fieldNumber: 20)
      }
      if let v = _storage._promoImageURL {
        try visitor.visitSingularStringField(value: v, fieldNumber: 21)
      }
      if !_storage._promoTags.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._promoTags, fieldNumber: 100)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TvService_Tariff, rhs: TvService_Tariff) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._price != rhs_storage._price {return false}
        if _storage._hidden != rhs_storage._hidden {return false}
        if _storage._packageID != rhs_storage._packageID {return false}
        if _storage._ownerID != rhs_storage._ownerID {return false}
        if _storage._strictChannelList != rhs_storage._strictChannelList {return false}
        if _storage._iptvChannelsCount != rhs_storage._iptvChannelsCount {return false}
        if _storage._moviesCount != rhs_storage._moviesCount {return false}
        if _storage._dvbcChannelsCount != rhs_storage._dvbcChannelsCount {return false}
        if _storage._catvChannelsCount != rhs_storage._catvChannelsCount {return false}
        if _storage._nextTariffID != rhs_storage._nextTariffID {return false}
        if _storage._iconURL != rhs_storage._iconURL {return false}
        if _storage._bannerURL != rhs_storage._bannerURL {return false}
        if _storage._subscriptionID != rhs_storage._subscriptionID {return false}
        if _storage._duration != rhs_storage._duration {return false}
        if _storage._priceForeign != rhs_storage._priceForeign {return false}
        if _storage._productID != rhs_storage._productID {return false}
        if _storage._sortOrder != rhs_storage._sortOrder {return false}
        if _storage._imageURL != rhs_storage._imageURL {return false}
        if _storage._promoImageURL != rhs_storage._promoImageURL {return false}
        if _storage._promoTags != rhs_storage._promoTags {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TvService_Service: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Service"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "price"),
    4: .standard(proto: "owner_id"),
    5: .same(proto: "duration"),
    6: .standard(proto: "product_id"),
    7: .standard(proto: "date_end"),
    8: .standard(proto: "package_id"),
    9: .standard(proto: "external_use"),
    10: .standard(proto: "expires_at"),
    100: .standard(proto: "promo_tags"),
  ]

  public var isInitialized: Bool {
    if self._id == nil {return false}
    if self._name == nil {return false}
    if self._price == nil {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.promoTags) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self._id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._name) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self._price) }()
      case 4: try { try decoder.decodeRepeatedInt32Field(value: &self.ownerID) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self._duration) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self._productID) }()
      case 7: try { try decoder.decodeSingularUInt64Field(value: &self._dateEnd) }()
      case 8: try { try decoder.decodeRepeatedInt32Field(value: &self.packageID) }()
      case 9: try { try decoder.decodeSingularBoolField(value: &self._externalUse) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self._expiresAt) }()
      case 100: try { try decoder.decodeRepeatedMessageField(value: &self.promoTags) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._id {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._price {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    }
    if !self.ownerID.isEmpty {
      try visitor.visitRepeatedInt32Field(value: self.ownerID, fieldNumber: 4)
    }
    if let v = self._duration {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
    }
    if let v = self._productID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    }
    if let v = self._dateEnd {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 7)
    }
    if !self.packageID.isEmpty {
      try visitor.visitRepeatedInt32Field(value: self.packageID, fieldNumber: 8)
    }
    if let v = self._externalUse {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
    }
    if let v = self._expiresAt {
      try visitor.visitSingularStringField(value: v, fieldNumber: 10)
    }
    if !self.promoTags.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.promoTags, fieldNumber: 100)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TvService_Service, rhs: TvService_Service) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._name != rhs._name {return false}
    if lhs._price != rhs._price {return false}
    if lhs.ownerID != rhs.ownerID {return false}
    if lhs._duration != rhs._duration {return false}
    if lhs._productID != rhs._productID {return false}
    if lhs._dateEnd != rhs._dateEnd {return false}
    if lhs.packageID != rhs.packageID {return false}
    if lhs._externalUse != rhs._externalUse {return false}
    if lhs._expiresAt != rhs._expiresAt {return false}
    if lhs.promoTags != rhs.promoTags {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
