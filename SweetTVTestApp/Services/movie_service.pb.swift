// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: movie_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum MovieService_LinkType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case hls // = 0
  case dash // = 1
  case mss // = 2

  init() {
    self = .hls
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .hls
    case 1: self = .dash
    case 2: self = .mss
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .hls: return 0
    case .dash: return 1
    case .mss: return 2
    }
  }

}

#if swift(>=4.2)

extension MovieService_LinkType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

enum MovieService_Page: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case home // = 0
  case movie // = 1
  case premiere // = 2
  case series // = 3
  case cartoon // = 4

  init() {
    self = .home
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .home
    case 1: self = .movie
    case 2: self = .premiere
    case 3: self = .series
    case 4: self = .cartoon
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .home: return 0
    case .movie: return 1
    case .premiere: return 2
    case .series: return 3
    case .cartoon: return 4
    }
  }

}

#if swift(>=4.2)

extension MovieService_Page: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

enum MovieService_PromoBannerAction: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case showChannel // = 0
  case showMovie // = 1
  case showPremiere // = 2
  case showCollection // = 3
  case proposeTariff // = 4
  case proposeSubscription // = 5
  case proposeService // = 6
  case proposePayment // = 7
  case enterPromocode // = 8
  case enterMoviePromocode // = 9
  case openWebSite // = 10
  case rateApplication // = 11
  case inviteFriend // = 12
  case bindNewDevice // = 13
  case openChatbot // = 14
  case fillUserData // = 15
  case showInfo // = 16
  case showPromotions // = 17
  case signupUser // = 18
  case startTutorial // = 19

  init() {
    self = .showChannel
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .showChannel
    case 1: self = .showMovie
    case 2: self = .showPremiere
    case 3: self = .showCollection
    case 4: self = .proposeTariff
    case 5: self = .proposeSubscription
    case 6: self = .proposeService
    case 7: self = .proposePayment
    case 8: self = .enterPromocode
    case 9: self = .enterMoviePromocode
    case 10: self = .openWebSite
    case 11: self = .rateApplication
    case 12: self = .inviteFriend
    case 13: self = .bindNewDevice
    case 14: self = .openChatbot
    case 15: self = .fillUserData
    case 16: self = .showInfo
    case 17: self = .showPromotions
    case 18: self = .signupUser
    case 19: self = .startTutorial
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .showChannel: return 0
    case .showMovie: return 1
    case .showPremiere: return 2
    case .showCollection: return 3
    case .proposeTariff: return 4
    case .proposeSubscription: return 5
    case .proposeService: return 6
    case .proposePayment: return 7
    case .enterPromocode: return 8
    case .enterMoviePromocode: return 9
    case .openWebSite: return 10
    case .rateApplication: return 11
    case .inviteFriend: return 12
    case .bindNewDevice: return 13
    case .openChatbot: return 14
    case .fillUserData: return 15
    case .showInfo: return 16
    case .showPromotions: return 17
    case .signupUser: return 18
    case .startTutorial: return 19
    }
  }

}

#if swift(>=4.2)

extension MovieService_PromoBannerAction: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

enum MovieService_Rating: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case none // = 0
  case like // = 1
  case dislike // = 2

  init() {
    self = .none
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .like
    case 2: self = .dislike
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .none: return 0
    case .like: return 1
    case .dislike: return 2
    }
  }

}

#if swift(>=4.2)

extension MovieService_Rating: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct MovieService_Movie {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int32 {
    get {return _storage._id ?? 0}
    set {_uniqueStorage()._id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {_uniqueStorage()._id = nil}

  var externalIDPairs: [MovieService_ExternalIdPair] {
    get {return _storage._externalIDPairs}
    set {_uniqueStorage()._externalIDPairs = newValue}
  }

  var title: String {
    get {return _storage._title ?? String()}
    set {_uniqueStorage()._title = newValue}
  }
  /// Returns true if `title` has been explicitly set.
  var hasTitle: Bool {return _storage._title != nil}
  /// Clears the value of `title`. Subsequent reads from it will return its default value.
  mutating func clearTitle() {_uniqueStorage()._title = nil}

  var titleEn: String {
    get {return _storage._titleEn ?? String()}
    set {_uniqueStorage()._titleEn = newValue}
  }
  /// Returns true if `titleEn` has been explicitly set.
  var hasTitleEn: Bool {return _storage._titleEn != nil}
  /// Clears the value of `titleEn`. Subsequent reads from it will return its default value.
  mutating func clearTitleEn() {_uniqueStorage()._titleEn = nil}

  var description_p: String {
    get {return _storage._description_p ?? String()}
    set {_uniqueStorage()._description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  var hasDescription_p: Bool {return _storage._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  mutating func clearDescription_p() {_uniqueStorage()._description_p = nil}

  var year: Int32 {
    get {return _storage._year ?? 0}
    set {_uniqueStorage()._year = newValue}
  }
  /// Returns true if `year` has been explicitly set.
  var hasYear: Bool {return _storage._year != nil}
  /// Clears the value of `year`. Subsequent reads from it will return its default value.
  mutating func clearYear() {_uniqueStorage()._year = nil}

  var duration: Int32 {
    get {return _storage._duration ?? 0}
    set {_uniqueStorage()._duration = newValue}
  }
  /// Returns true if `duration` has been explicitly set.
  var hasDuration: Bool {return _storage._duration != nil}
  /// Clears the value of `duration`. Subsequent reads from it will return its default value.
  mutating func clearDuration() {_uniqueStorage()._duration = nil}

  var ageLimit: Int32 {
    get {return _storage._ageLimit ?? 0}
    set {_uniqueStorage()._ageLimit = newValue}
  }
  /// Returns true if `ageLimit` has been explicitly set.
  var hasAgeLimit: Bool {return _storage._ageLimit != nil}
  /// Clears the value of `ageLimit`. Subsequent reads from it will return its default value.
  mutating func clearAgeLimit() {_uniqueStorage()._ageLimit = nil}

  var posterURL: String {
    get {return _storage._posterURL ?? String()}
    set {_uniqueStorage()._posterURL = newValue}
  }
  /// Returns true if `posterURL` has been explicitly set.
  var hasPosterURL: Bool {return _storage._posterURL != nil}
  /// Clears the value of `posterURL`. Subsequent reads from it will return its default value.
  mutating func clearPosterURL() {_uniqueStorage()._posterURL = nil}

  var ratingImdb: Float {
    get {return _storage._ratingImdb ?? 0}
    set {_uniqueStorage()._ratingImdb = newValue}
  }
  /// Returns true if `ratingImdb` has been explicitly set.
  var hasRatingImdb: Bool {return _storage._ratingImdb != nil}
  /// Clears the value of `ratingImdb`. Subsequent reads from it will return its default value.
  mutating func clearRatingImdb() {_uniqueStorage()._ratingImdb = nil}

  var ratingKinopoisk: Float {
    get {return _storage._ratingKinopoisk ?? 0}
    set {_uniqueStorage()._ratingKinopoisk = newValue}
  }
  /// Returns true if `ratingKinopoisk` has been explicitly set.
  var hasRatingKinopoisk: Bool {return _storage._ratingKinopoisk != nil}
  /// Clears the value of `ratingKinopoisk`. Subsequent reads from it will return its default value.
  mutating func clearRatingKinopoisk() {_uniqueStorage()._ratingKinopoisk = nil}

  var categories: [Int32] {
    get {return _storage._categories}
    set {_uniqueStorage()._categories = newValue}
  }

  var countries: [Int32] {
    get {return _storage._countries}
    set {_uniqueStorage()._countries = newValue}
  }

  var genres: [Int32] {
    get {return _storage._genres}
    set {_uniqueStorage()._genres = newValue}
  }

  var owners: [Int32] {
    get {return _storage._owners}
    set {_uniqueStorage()._owners = newValue}
  }

  var people: [MovieService_Person] {
    get {return _storage._people}
    set {_uniqueStorage()._people = newValue}
  }

  var seasons: [MovieService_Season] {
    get {return _storage._seasons}
    set {_uniqueStorage()._seasons = newValue}
  }

  var available: Bool {
    get {return _storage._available ?? false}
    set {_uniqueStorage()._available = newValue}
  }
  /// Returns true if `available` has been explicitly set.
  var hasAvailable: Bool {return _storage._available != nil}
  /// Clears the value of `available`. Subsequent reads from it will return its default value.
  mutating func clearAvailable() {_uniqueStorage()._available = nil}

  var tariffs: [Int32] {
    get {return _storage._tariffs}
    set {_uniqueStorage()._tariffs = newValue}
  }

  var isFavorite: Bool {
    get {return _storage._isFavorite ?? false}
    set {_uniqueStorage()._isFavorite = newValue}
  }
  /// Returns true if `isFavorite` has been explicitly set.
  var hasIsFavorite: Bool {return _storage._isFavorite != nil}
  /// Clears the value of `isFavorite`. Subsequent reads from it will return its default value.
  mutating func clearIsFavorite() {_uniqueStorage()._isFavorite = nil}

  var watchInfo: MovieService_WatchInfo {
    get {return _storage._watchInfo ?? MovieService_WatchInfo()}
    set {_uniqueStorage()._watchInfo = newValue}
  }
  /// Returns true if `watchInfo` has been explicitly set.
  var hasWatchInfo: Bool {return _storage._watchInfo != nil}
  /// Clears the value of `watchInfo`. Subsequent reads from it will return its default value.
  mutating func clearWatchInfo() {_uniqueStorage()._watchInfo = nil}

  var offers: [MovieService_MovieOffer] {
    get {return _storage._offers}
    set {_uniqueStorage()._offers = newValue}
  }

  var posters: [MovieService_Poster] {
    get {return _storage._posters}
    set {_uniqueStorage()._posters = newValue}
  }

  var trailerURL: String {
    get {return _storage._trailerURL ?? String()}
    set {_uniqueStorage()._trailerURL = newValue}
  }
  /// Returns true if `trailerURL` has been explicitly set.
  var hasTrailerURL: Bool {return _storage._trailerURL != nil}
  /// Clears the value of `trailerURL`. Subsequent reads from it will return its default value.
  mutating func clearTrailerURL() {_uniqueStorage()._trailerURL = nil}

  var tagline: String {
    get {return _storage._tagline ?? String()}
    set {_uniqueStorage()._tagline = newValue}
  }
  /// Returns true if `tagline` has been explicitly set.
  var hasTagline: Bool {return _storage._tagline != nil}
  /// Clears the value of `tagline`. Subsequent reads from it will return its default value.
  mutating func clearTagline() {_uniqueStorage()._tagline = nil}

  var slug: String {
    get {return _storage._slug ?? String()}
    set {_uniqueStorage()._slug = newValue}
  }
  /// Returns true if `slug` has been explicitly set.
  var hasSlug: Bool {return _storage._slug != nil}
  /// Clears the value of `slug`. Subsequent reads from it will return its default value.
  mutating func clearSlug() {_uniqueStorage()._slug = nil}

  var downloadable: Bool {
    get {return _storage._downloadable ?? false}
    set {_uniqueStorage()._downloadable = newValue}
  }
  /// Returns true if `downloadable` has been explicitly set.
  var hasDownloadable: Bool {return _storage._downloadable != nil}
  /// Clears the value of `downloadable`. Subsequent reads from it will return its default value.
  mutating func clearDownloadable() {_uniqueStorage()._downloadable = nil}

  var recommendedMovies: [Int32] {
    get {return _storage._recommendedMovies}
    set {_uniqueStorage()._recommendedMovies = newValue}
  }

  var audioTracks: [MovieService_AudioTrack] {
    get {return _storage._audioTracks}
    set {_uniqueStorage()._audioTracks = newValue}
  }

  var subtitles: [MovieService_Subtitle] {
    get {return _storage._subtitles}
    set {_uniqueStorage()._subtitles = newValue}
  }

  var statistics: MovieService_Statistics {
    get {return _storage._statistics ?? MovieService_Statistics()}
    set {_uniqueStorage()._statistics = newValue}
  }
  /// Returns true if `statistics` has been explicitly set.
  var hasStatistics: Bool {return _storage._statistics != nil}
  /// Clears the value of `statistics`. Subsequent reads from it will return its default value.
  mutating func clearStatistics() {_uniqueStorage()._statistics = nil}

  var userRating: MovieService_Rating {
    get {return _storage._userRating ?? .none}
    set {_uniqueStorage()._userRating = newValue}
  }
  /// Returns true if `userRating` has been explicitly set.
  var hasUserRating: Bool {return _storage._userRating != nil}
  /// Clears the value of `userRating`. Subsequent reads from it will return its default value.
  mutating func clearUserRating() {_uniqueStorage()._userRating = nil}

  var bannerURL: String {
    get {return _storage._bannerURL ?? String()}
    set {_uniqueStorage()._bannerURL = newValue}
  }
  /// Returns true if `bannerURL` has been explicitly set.
  var hasBannerURL: Bool {return _storage._bannerURL != nil}
  /// Clears the value of `bannerURL`. Subsequent reads from it will return its default value.
  mutating func clearBannerURL() {_uniqueStorage()._bannerURL = nil}

  var comments: [MovieService_Comment] {
    get {return _storage._comments}
    set {_uniqueStorage()._comments = newValue}
  }

  var releaseDate: Int64 {
    get {return _storage._releaseDate ?? 0}
    set {_uniqueStorage()._releaseDate = newValue}
  }
  /// Returns true if `releaseDate` has been explicitly set.
  var hasReleaseDate: Bool {return _storage._releaseDate != nil}
  /// Clears the value of `releaseDate`. Subsequent reads from it will return its default value.
  mutating func clearReleaseDate() {_uniqueStorage()._releaseDate = nil}

  var released: Bool {
    get {return _storage._released ?? false}
    set {_uniqueStorage()._released = newValue}
  }
  /// Returns true if `released` has been explicitly set.
  var hasReleased: Bool {return _storage._released != nil}
  /// Clears the value of `released`. Subsequent reads from it will return its default value.
  mutating func clearReleased() {_uniqueStorage()._released = nil}

  var boughtPeriod: Int32 {
    get {return _storage._boughtPeriod ?? 0}
    set {_uniqueStorage()._boughtPeriod = newValue}
  }
  /// Returns true if `boughtPeriod` has been explicitly set.
  var hasBoughtPeriod: Bool {return _storage._boughtPeriod != nil}
  /// Clears the value of `boughtPeriod`. Subsequent reads from it will return its default value.
  mutating func clearBoughtPeriod() {_uniqueStorage()._boughtPeriod = nil}

  var availabilityInfo: String {
    get {return _storage._availabilityInfo ?? String()}
    set {_uniqueStorage()._availabilityInfo = newValue}
  }
  /// Returns true if `availabilityInfo` has been explicitly set.
  var hasAvailabilityInfo: Bool {return _storage._availabilityInfo != nil}
  /// Clears the value of `availabilityInfo`. Subsequent reads from it will return its default value.
  mutating func clearAvailabilityInfo() {_uniqueStorage()._availabilityInfo = nil}

  var similarMovies: [Int32] {
    get {return _storage._similarMovies}
    set {_uniqueStorage()._similarMovies = newValue}
  }

  var endCredits: Int32 {
    get {return _storage._endCredits ?? 0}
    set {_uniqueStorage()._endCredits = newValue}
  }
  /// Returns true if `endCredits` has been explicitly set.
  var hasEndCredits: Bool {return _storage._endCredits != nil}
  /// Clears the value of `endCredits`. Subsequent reads from it will return its default value.
  mutating func clearEndCredits() {_uniqueStorage()._endCredits = nil}

  var ratingSweetTv: Float {
    get {return _storage._ratingSweetTv ?? 0}
    set {_uniqueStorage()._ratingSweetTv = newValue}
  }
  /// Returns true if `ratingSweetTv` has been explicitly set.
  var hasRatingSweetTv: Bool {return _storage._ratingSweetTv != nil}
  /// Clears the value of `ratingSweetTv`. Subsequent reads from it will return its default value.
  mutating func clearRatingSweetTv() {_uniqueStorage()._ratingSweetTv = nil}

  var followingMovies: [Int32] {
    get {return _storage._followingMovies}
    set {_uniqueStorage()._followingMovies = newValue}
  }

  var videoQuality: Int32 {
    get {return _storage._videoQuality ?? 0}
    set {_uniqueStorage()._videoQuality = newValue}
  }
  /// Returns true if `videoQuality` has been explicitly set.
  var hasVideoQuality: Bool {return _storage._videoQuality != nil}
  /// Clears the value of `videoQuality`. Subsequent reads from it will return its default value.
  mutating func clearVideoQuality() {_uniqueStorage()._videoQuality = nil}

  var availabilityInfoColor: String {
    get {return _storage._availabilityInfoColor ?? String()}
    set {_uniqueStorage()._availabilityInfoColor = newValue}
  }
  /// Returns true if `availabilityInfoColor` has been explicitly set.
  var hasAvailabilityInfoColor: Bool {return _storage._availabilityInfoColor != nil}
  /// Clears the value of `availabilityInfoColor`. Subsequent reads from it will return its default value.
  mutating func clearAvailabilityInfoColor() {_uniqueStorage()._availabilityInfoColor = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct MovieService_Category {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int32 {
    get {return _id ?? 0}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {self._id = nil}

  var title: String {
    get {return _title ?? String()}
    set {_title = newValue}
  }
  /// Returns true if `title` has been explicitly set.
  var hasTitle: Bool {return self._title != nil}
  /// Clears the value of `title`. Subsequent reads from it will return its default value.
  mutating func clearTitle() {self._title = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _id: Int32? = nil
  fileprivate var _title: String? = nil
}

struct MovieService_Genre {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int32 {
    get {return _id ?? 0}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {self._id = nil}

  var title: String {
    get {return _title ?? String()}
    set {_title = newValue}
  }
  /// Returns true if `title` has been explicitly set.
  var hasTitle: Bool {return self._title != nil}
  /// Clears the value of `title`. Subsequent reads from it will return its default value.
  mutating func clearTitle() {self._title = nil}

  var iconURL: String {
    get {return _iconURL ?? String()}
    set {_iconURL = newValue}
  }
  /// Returns true if `iconURL` has been explicitly set.
  var hasIconURL: Bool {return self._iconURL != nil}
  /// Clears the value of `iconURL`. Subsequent reads from it will return its default value.
  mutating func clearIconURL() {self._iconURL = nil}

  var slug: String {
    get {return _slug ?? String()}
    set {_slug = newValue}
  }
  /// Returns true if `slug` has been explicitly set.
  var hasSlug: Bool {return self._slug != nil}
  /// Clears the value of `slug`. Subsequent reads from it will return its default value.
  mutating func clearSlug() {self._slug = nil}

  var bannerURL: String {
    get {return _bannerURL ?? String()}
    set {_bannerURL = newValue}
  }
  /// Returns true if `bannerURL` has been explicitly set.
  var hasBannerURL: Bool {return self._bannerURL != nil}
  /// Clears the value of `bannerURL`. Subsequent reads from it will return its default value.
  mutating func clearBannerURL() {self._bannerURL = nil}

  var iconV2URL: String {
    get {return _iconV2URL ?? String()}
    set {_iconV2URL = newValue}
  }
  /// Returns true if `iconV2URL` has been explicitly set.
  var hasIconV2URL: Bool {return self._iconV2URL != nil}
  /// Clears the value of `iconV2URL`. Subsequent reads from it will return its default value.
  mutating func clearIconV2URL() {self._iconV2URL = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _id: Int32? = nil
  fileprivate var _title: String? = nil
  fileprivate var _iconURL: String? = nil
  fileprivate var _slug: String? = nil
  fileprivate var _bannerURL: String? = nil
  fileprivate var _iconV2URL: String? = nil
}

struct MovieService_Subgenre {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int32 {
    get {return _id ?? 0}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {self._id = nil}

  var title: String {
    get {return _title ?? String()}
    set {_title = newValue}
  }
  /// Returns true if `title` has been explicitly set.
  var hasTitle: Bool {return self._title != nil}
  /// Clears the value of `title`. Subsequent reads from it will return its default value.
  mutating func clearTitle() {self._title = nil}

  var iconURL: String {
    get {return _iconURL ?? String()}
    set {_iconURL = newValue}
  }
  /// Returns true if `iconURL` has been explicitly set.
  var hasIconURL: Bool {return self._iconURL != nil}
  /// Clears the value of `iconURL`. Subsequent reads from it will return its default value.
  mutating func clearIconURL() {self._iconURL = nil}

  var slug: String {
    get {return _slug ?? String()}
    set {_slug = newValue}
  }
  /// Returns true if `slug` has been explicitly set.
  var hasSlug: Bool {return self._slug != nil}
  /// Clears the value of `slug`. Subsequent reads from it will return its default value.
  mutating func clearSlug() {self._slug = nil}

  var bannerURL: String {
    get {return _bannerURL ?? String()}
    set {_bannerURL = newValue}
  }
  /// Returns true if `bannerURL` has been explicitly set.
  var hasBannerURL: Bool {return self._bannerURL != nil}
  /// Clears the value of `bannerURL`. Subsequent reads from it will return its default value.
  mutating func clearBannerURL() {self._bannerURL = nil}

  var iconV2URL: String {
    get {return _iconV2URL ?? String()}
    set {_iconV2URL = newValue}
  }
  /// Returns true if `iconV2URL` has been explicitly set.
  var hasIconV2URL: Bool {return self._iconV2URL != nil}
  /// Clears the value of `iconV2URL`. Subsequent reads from it will return its default value.
  mutating func clearIconV2URL() {self._iconV2URL = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _id: Int32? = nil
  fileprivate var _title: String? = nil
  fileprivate var _iconURL: String? = nil
  fileprivate var _slug: String? = nil
  fileprivate var _bannerURL: String? = nil
  fileprivate var _iconV2URL: String? = nil
}

struct MovieService_Country {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int32 {
    get {return _id ?? 0}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {self._id = nil}

  var title: String {
    get {return _title ?? String()}
    set {_title = newValue}
  }
  /// Returns true if `title` has been explicitly set.
  var hasTitle: Bool {return self._title != nil}
  /// Clears the value of `title`. Subsequent reads from it will return its default value.
  mutating func clearTitle() {self._title = nil}

  var code: String {
    get {return _code ?? String()}
    set {_code = newValue}
  }
  /// Returns true if `code` has been explicitly set.
  var hasCode: Bool {return self._code != nil}
  /// Clears the value of `code`. Subsequent reads from it will return its default value.
  mutating func clearCode() {self._code = nil}

  var slug: String {
    get {return _slug ?? String()}
    set {_slug = newValue}
  }
  /// Returns true if `slug` has been explicitly set.
  var hasSlug: Bool {return self._slug != nil}
  /// Clears the value of `slug`. Subsequent reads from it will return its default value.
  mutating func clearSlug() {self._slug = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _id: Int32? = nil
  fileprivate var _title: String? = nil
  fileprivate var _code: String? = nil
  fileprivate var _slug: String? = nil
}

struct MovieService_Section {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int32 {
    get {return _id ?? 0}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {self._id = nil}

  var type: MovieService_Section.TypeEnum {
    get {return _type ?? .main}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  var title: String {
    get {return _title ?? String()}
    set {_title = newValue}
  }
  /// Returns true if `title` has been explicitly set.
  var hasTitle: Bool {return self._title != nil}
  /// Clears the value of `title`. Subsequent reads from it will return its default value.
  mutating func clearTitle() {self._title = nil}

  var iconURL: String {
    get {return _iconURL ?? String()}
    set {_iconURL = newValue}
  }
  /// Returns true if `iconURL` has been explicitly set.
  var hasIconURL: Bool {return self._iconURL != nil}
  /// Clears the value of `iconURL`. Subsequent reads from it will return its default value.
  mutating func clearIconURL() {self._iconURL = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum TypeEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case main // = 0
    case tv // = 1
    case cinema // = 2
    case premieres // = 3
    case series // = 4
    case cartoons // = 5

    init() {
      self = .main
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .main
      case 1: self = .tv
      case 2: self = .cinema
      case 3: self = .premieres
      case 4: self = .series
      case 5: self = .cartoons
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .main: return 0
      case .tv: return 1
      case .cinema: return 2
      case .premieres: return 3
      case .series: return 4
      case .cartoons: return 5
      }
    }

  }

  init() {}

  fileprivate var _id: Int32? = nil
  fileprivate var _type: MovieService_Section.TypeEnum? = nil
  fileprivate var _title: String? = nil
  fileprivate var _iconURL: String? = nil
}

#if swift(>=4.2)

extension MovieService_Section.TypeEnum: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct MovieService_BannerResolution {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int32 {
    get {return _id ?? 0}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {self._id = nil}

  var width: Int32 {
    get {return _width ?? 0}
    set {_width = newValue}
  }
  /// Returns true if `width` has been explicitly set.
  var hasWidth: Bool {return self._width != nil}
  /// Clears the value of `width`. Subsequent reads from it will return its default value.
  mutating func clearWidth() {self._width = nil}

  var height: Int32 {
    get {return _height ?? 0}
    set {_height = newValue}
  }
  /// Returns true if `height` has been explicitly set.
  var hasHeight: Bool {return self._height != nil}
  /// Clears the value of `height`. Subsequent reads from it will return its default value.
  mutating func clearHeight() {self._height = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _id: Int32? = nil
  fileprivate var _width: Int32? = nil
  fileprivate var _height: Int32? = nil
}

struct MovieService_Poster {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var posterURL: String {
    get {return _posterURL ?? String()}
    set {_posterURL = newValue}
  }
  /// Returns true if `posterURL` has been explicitly set.
  var hasPosterURL: Bool {return self._posterURL != nil}
  /// Clears the value of `posterURL`. Subsequent reads from it will return its default value.
  mutating func clearPosterURL() {self._posterURL = nil}

  var orientation: MovieService_Poster.Orientation {
    get {return _orientation ?? .horizontal}
    set {_orientation = newValue}
  }
  /// Returns true if `orientation` has been explicitly set.
  var hasOrientation: Bool {return self._orientation != nil}
  /// Clears the value of `orientation`. Subsequent reads from it will return its default value.
  mutating func clearOrientation() {self._orientation = nil}

  var dimensions: MovieService_Poster.Dimensions {
    get {return _dimensions ?? MovieService_Poster.Dimensions()}
    set {_dimensions = newValue}
  }
  /// Returns true if `dimensions` has been explicitly set.
  var hasDimensions: Bool {return self._dimensions != nil}
  /// Clears the value of `dimensions`. Subsequent reads from it will return its default value.
  mutating func clearDimensions() {self._dimensions = nil}

  var blur: Bool {
    get {return _blur ?? false}
    set {_blur = newValue}
  }
  /// Returns true if `blur` has been explicitly set.
  var hasBlur: Bool {return self._blur != nil}
  /// Clears the value of `blur`. Subsequent reads from it will return its default value.
  mutating func clearBlur() {self._blur = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Orientation: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case horizontal // = 0
    case vertical // = 1

    init() {
      self = .horizontal
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .horizontal
      case 1: self = .vertical
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .horizontal: return 0
      case .vertical: return 1
      }
    }

  }

  struct Dimensions {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var width: Int32 {
      get {return _width ?? 0}
      set {_width = newValue}
    }
    /// Returns true if `width` has been explicitly set.
    var hasWidth: Bool {return self._width != nil}
    /// Clears the value of `width`. Subsequent reads from it will return its default value.
    mutating func clearWidth() {self._width = nil}

    var height: Int32 {
      get {return _height ?? 0}
      set {_height = newValue}
    }
    /// Returns true if `height` has been explicitly set.
    var hasHeight: Bool {return self._height != nil}
    /// Clears the value of `height`. Subsequent reads from it will return its default value.
    mutating func clearHeight() {self._height = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _width: Int32? = nil
    fileprivate var _height: Int32? = nil
  }

  init() {}

  fileprivate var _posterURL: String? = nil
  fileprivate var _orientation: MovieService_Poster.Orientation? = nil
  fileprivate var _dimensions: MovieService_Poster.Dimensions? = nil
  fileprivate var _blur: Bool? = nil
}

#if swift(>=4.2)

extension MovieService_Poster.Orientation: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct MovieService_Person {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int32 {
    get {return _id ?? 0}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {self._id = nil}

  var name: String {
    get {return _name ?? String()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {self._name = nil}

  var nameOriginal: String {
    get {return _nameOriginal ?? String()}
    set {_nameOriginal = newValue}
  }
  /// Returns true if `nameOriginal` has been explicitly set.
  var hasNameOriginal: Bool {return self._nameOriginal != nil}
  /// Clears the value of `nameOriginal`. Subsequent reads from it will return its default value.
  mutating func clearNameOriginal() {self._nameOriginal = nil}

  var role: MovieService_Role {
    get {return _role ?? MovieService_Role()}
    set {_role = newValue}
  }
  /// Returns true if `role` has been explicitly set.
  var hasRole: Bool {return self._role != nil}
  /// Clears the value of `role`. Subsequent reads from it will return its default value.
  mutating func clearRole() {self._role = nil}

  var imageURL: String {
    get {return _imageURL ?? String()}
    set {_imageURL = newValue}
  }
  /// Returns true if `imageURL` has been explicitly set.
  var hasImageURL: Bool {return self._imageURL != nil}
  /// Clears the value of `imageURL`. Subsequent reads from it will return its default value.
  mutating func clearImageURL() {self._imageURL = nil}

  var biography: String {
    get {return _biography ?? String()}
    set {_biography = newValue}
  }
  /// Returns true if `biography` has been explicitly set.
  var hasBiography: Bool {return self._biography != nil}
  /// Clears the value of `biography`. Subsequent reads from it will return its default value.
  mutating func clearBiography() {self._biography = nil}

  var roles: [MovieService_Role] = []

  var movies: [Int32] = []

  var bannerURL: String {
    get {return _bannerURL ?? String()}
    set {_bannerURL = newValue}
  }
  /// Returns true if `bannerURL` has been explicitly set.
  var hasBannerURL: Bool {return self._bannerURL != nil}
  /// Clears the value of `bannerURL`. Subsequent reads from it will return its default value.
  mutating func clearBannerURL() {self._bannerURL = nil}

  var placeOfBirth: String {
    get {return _placeOfBirth ?? String()}
    set {_placeOfBirth = newValue}
  }
  /// Returns true if `placeOfBirth` has been explicitly set.
  var hasPlaceOfBirth: Bool {return self._placeOfBirth != nil}
  /// Clears the value of `placeOfBirth`. Subsequent reads from it will return its default value.
  mutating func clearPlaceOfBirth() {self._placeOfBirth = nil}

  var dateOfBirth: Int64 {
    get {return _dateOfBirth ?? 0}
    set {_dateOfBirth = newValue}
  }
  /// Returns true if `dateOfBirth` has been explicitly set.
  var hasDateOfBirth: Bool {return self._dateOfBirth != nil}
  /// Clears the value of `dateOfBirth`. Subsequent reads from it will return its default value.
  mutating func clearDateOfBirth() {self._dateOfBirth = nil}

  var genres: [Int32] = []

  var slug: String {
    get {return _slug ?? String()}
    set {_slug = newValue}
  }
  /// Returns true if `slug` has been explicitly set.
  var hasSlug: Bool {return self._slug != nil}
  /// Clears the value of `slug`. Subsequent reads from it will return its default value.
  mutating func clearSlug() {self._slug = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _id: Int32? = nil
  fileprivate var _name: String? = nil
  fileprivate var _nameOriginal: String? = nil
  fileprivate var _role: MovieService_Role? = nil
  fileprivate var _imageURL: String? = nil
  fileprivate var _biography: String? = nil
  fileprivate var _bannerURL: String? = nil
  fileprivate var _placeOfBirth: String? = nil
  fileprivate var _dateOfBirth: Int64? = nil
  fileprivate var _slug: String? = nil
}

struct MovieService_Role {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int32 {
    get {return _id ?? 0}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {self._id = nil}

  var title: String {
    get {return _title ?? String()}
    set {_title = newValue}
  }
  /// Returns true if `title` has been explicitly set.
  var hasTitle: Bool {return self._title != nil}
  /// Clears the value of `title`. Subsequent reads from it will return its default value.
  mutating func clearTitle() {self._title = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _id: Int32? = nil
  fileprivate var _title: String? = nil
}

struct MovieService_Season {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int32 {
    get {return _id ?? 0}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {self._id = nil}

  var title: String {
    get {return _title ?? String()}
    set {_title = newValue}
  }
  /// Returns true if `title` has been explicitly set.
  var hasTitle: Bool {return self._title != nil}
  /// Clears the value of `title`. Subsequent reads from it will return its default value.
  mutating func clearTitle() {self._title = nil}

  var episodes: [MovieService_Episode] = []

  var ownerID: Int32 {
    get {return _ownerID ?? 0}
    set {_ownerID = newValue}
  }
  /// Returns true if `ownerID` has been explicitly set.
  var hasOwnerID: Bool {return self._ownerID != nil}
  /// Clears the value of `ownerID`. Subsequent reads from it will return its default value.
  mutating func clearOwnerID() {self._ownerID = nil}

  var externalID: Int32 {
    get {return _externalID ?? 0}
    set {_externalID = newValue}
  }
  /// Returns true if `externalID` has been explicitly set.
  var hasExternalID: Bool {return self._externalID != nil}
  /// Clears the value of `externalID`. Subsequent reads from it will return its default value.
  mutating func clearExternalID() {self._externalID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _id: Int32? = nil
  fileprivate var _title: String? = nil
  fileprivate var _ownerID: Int32? = nil
  fileprivate var _externalID: Int32? = nil
}

struct MovieService_Episode {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int32 {
    get {return _id ?? 0}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {self._id = nil}

  var title: String {
    get {return _title ?? String()}
    set {_title = newValue}
  }
  /// Returns true if `title` has been explicitly set.
  var hasTitle: Bool {return self._title != nil}
  /// Clears the value of `title`. Subsequent reads from it will return its default value.
  mutating func clearTitle() {self._title = nil}

  var duration: Int32 {
    get {return _duration ?? 0}
    set {_duration = newValue}
  }
  /// Returns true if `duration` has been explicitly set.
  var hasDuration: Bool {return self._duration != nil}
  /// Clears the value of `duration`. Subsequent reads from it will return its default value.
  mutating func clearDuration() {self._duration = nil}

  var externalID: Int32 {
    get {return _externalID ?? 0}
    set {_externalID = newValue}
  }
  /// Returns true if `externalID` has been explicitly set.
  var hasExternalID: Bool {return self._externalID != nil}
  /// Clears the value of `externalID`. Subsequent reads from it will return its default value.
  mutating func clearExternalID() {self._externalID = nil}

  var watchInfo: MovieService_WatchInfo {
    get {return _watchInfo ?? MovieService_WatchInfo()}
    set {_watchInfo = newValue}
  }
  /// Returns true if `watchInfo` has been explicitly set.
  var hasWatchInfo: Bool {return self._watchInfo != nil}
  /// Clears the value of `watchInfo`. Subsequent reads from it will return its default value.
  mutating func clearWatchInfo() {self._watchInfo = nil}

  var previewURL: String {
    get {return _previewURL ?? String()}
    set {_previewURL = newValue}
  }
  /// Returns true if `previewURL` has been explicitly set.
  var hasPreviewURL: Bool {return self._previewURL != nil}
  /// Clears the value of `previewURL`. Subsequent reads from it will return its default value.
  mutating func clearPreviewURL() {self._previewURL = nil}

  var endCredits: Int32 {
    get {return _endCredits ?? 0}
    set {_endCredits = newValue}
  }
  /// Returns true if `endCredits` has been explicitly set.
  var hasEndCredits: Bool {return self._endCredits != nil}
  /// Clears the value of `endCredits`. Subsequent reads from it will return its default value.
  mutating func clearEndCredits() {self._endCredits = nil}

  var audioTracks: [MovieService_AudioTrack] = []

  var subtitles: [MovieService_Subtitle] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _id: Int32? = nil
  fileprivate var _title: String? = nil
  fileprivate var _duration: Int32? = nil
  fileprivate var _externalID: Int32? = nil
  fileprivate var _watchInfo: MovieService_WatchInfo? = nil
  fileprivate var _previewURL: String? = nil
  fileprivate var _endCredits: Int32? = nil
}

struct MovieService_Collection {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int32 {
    get {return _id ?? 0}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {self._id = nil}

  var title: String {
    get {return _title ?? String()}
    set {_title = newValue}
  }
  /// Returns true if `title` has been explicitly set.
  var hasTitle: Bool {return self._title != nil}
  /// Clears the value of `title`. Subsequent reads from it will return its default value.
  mutating func clearTitle() {self._title = nil}

  var type: MovieService_Collection.TypeEnum {
    get {return _type ?? .movie}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  var idList: [Int32] = []

  var slug: String {
    get {return _slug ?? String()}
    set {_slug = newValue}
  }
  /// Returns true if `slug` has been explicitly set.
  var hasSlug: Bool {return self._slug != nil}
  /// Clears the value of `slug`. Subsequent reads from it will return its default value.
  mutating func clearSlug() {self._slug = nil}

  var itemList: [MovieService_CollectionItem] = []

  var collectionList: [MovieService_Collection] = []

  var imageURL: String {
    get {return _imageURL ?? String()}
    set {_imageURL = newValue}
  }
  /// Returns true if `imageURL` has been explicitly set.
  var hasImageURL: Bool {return self._imageURL != nil}
  /// Clears the value of `imageURL`. Subsequent reads from it will return its default value.
  mutating func clearImageURL() {self._imageURL = nil}

  var darkThemeImageURL: String {
    get {return _darkThemeImageURL ?? String()}
    set {_darkThemeImageURL = newValue}
  }
  /// Returns true if `darkThemeImageURL` has been explicitly set.
  var hasDarkThemeImageURL: Bool {return self._darkThemeImageURL != nil}
  /// Clears the value of `darkThemeImageURL`. Subsequent reads from it will return its default value.
  mutating func clearDarkThemeImageURL() {self._darkThemeImageURL = nil}

  var action: MovieService_PromoBannerAction {
    get {return _action ?? .showChannel}
    set {_action = newValue}
  }
  /// Returns true if `action` has been explicitly set.
  var hasAction: Bool {return self._action != nil}
  /// Clears the value of `action`. Subsequent reads from it will return its default value.
  mutating func clearAction() {self._action = nil}

  var closable: Bool {
    get {return _closable ?? false}
    set {_closable = newValue}
  }
  /// Returns true if `closable` has been explicitly set.
  var hasClosable: Bool {return self._closable != nil}
  /// Clears the value of `closable`. Subsequent reads from it will return its default value.
  mutating func clearClosable() {self._closable = nil}

  var secondaryIDList: [Int32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum TypeEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case movie // = 0
    case channel // = 1
    case genre // = 2
    case subgenre // = 3
    case epg // = 4
    case collection // = 5
    case banner // = 6
    case person // = 7
    case tvShow // = 8

    init() {
      self = .movie
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .movie
      case 1: self = .channel
      case 2: self = .genre
      case 3: self = .subgenre
      case 4: self = .epg
      case 5: self = .collection
      case 6: self = .banner
      case 7: self = .person
      case 8: self = .tvShow
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .movie: return 0
      case .channel: return 1
      case .genre: return 2
      case .subgenre: return 3
      case .epg: return 4
      case .collection: return 5
      case .banner: return 6
      case .person: return 7
      case .tvShow: return 8
      }
    }

  }

  init() {}

  fileprivate var _id: Int32? = nil
  fileprivate var _title: String? = nil
  fileprivate var _type: MovieService_Collection.TypeEnum? = nil
  fileprivate var _slug: String? = nil
  fileprivate var _imageURL: String? = nil
  fileprivate var _darkThemeImageURL: String? = nil
  fileprivate var _action: MovieService_PromoBannerAction? = nil
  fileprivate var _closable: Bool? = nil
}

#if swift(>=4.2)

extension MovieService_Collection.TypeEnum: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct MovieService_CollectionItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int32 {
    get {return _id ?? 0}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {self._id = nil}

  var secondaryID: Int32 {
    get {return _secondaryID ?? 0}
    set {_secondaryID = newValue}
  }
  /// Returns true if `secondaryID` has been explicitly set.
  var hasSecondaryID: Bool {return self._secondaryID != nil}
  /// Clears the value of `secondaryID`. Subsequent reads from it will return its default value.
  mutating func clearSecondaryID() {self._secondaryID = nil}

  var title: String {
    get {return _title ?? String()}
    set {_title = newValue}
  }
  /// Returns true if `title` has been explicitly set.
  var hasTitle: Bool {return self._title != nil}
  /// Clears the value of `title`. Subsequent reads from it will return its default value.
  mutating func clearTitle() {self._title = nil}

  var genres: String {
    get {return _genres ?? String()}
    set {_genres = newValue}
  }
  /// Returns true if `genres` has been explicitly set.
  var hasGenres: Bool {return self._genres != nil}
  /// Clears the value of `genres`. Subsequent reads from it will return its default value.
  mutating func clearGenres() {self._genres = nil}

  var imageURL: String {
    get {return _imageURL ?? String()}
    set {_imageURL = newValue}
  }
  /// Returns true if `imageURL` has been explicitly set.
  var hasImageURL: Bool {return self._imageURL != nil}
  /// Clears the value of `imageURL`. Subsequent reads from it will return its default value.
  mutating func clearImageURL() {self._imageURL = nil}

  var availableIn: String {
    get {return _availableIn ?? String()}
    set {_availableIn = newValue}
  }
  /// Returns true if `availableIn` has been explicitly set.
  var hasAvailableIn: Bool {return self._availableIn != nil}
  /// Clears the value of `availableIn`. Subsequent reads from it will return its default value.
  mutating func clearAvailableIn() {self._availableIn = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _id: Int32? = nil
  fileprivate var _secondaryID: Int32? = nil
  fileprivate var _title: String? = nil
  fileprivate var _genres: String? = nil
  fileprivate var _imageURL: String? = nil
  fileprivate var _availableIn: String? = nil
}

struct MovieService_SortMode {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int32 {
    get {return _id ?? 0}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {self._id = nil}

  var title: String {
    get {return _title ?? String()}
    set {_title = newValue}
  }
  /// Returns true if `title` has been explicitly set.
  var hasTitle: Bool {return self._title != nil}
  /// Clears the value of `title`. Subsequent reads from it will return its default value.
  mutating func clearTitle() {self._title = nil}

  var iconURL: String {
    get {return _iconURL ?? String()}
    set {_iconURL = newValue}
  }
  /// Returns true if `iconURL` has been explicitly set.
  var hasIconURL: Bool {return self._iconURL != nil}
  /// Clears the value of `iconURL`. Subsequent reads from it will return its default value.
  mutating func clearIconURL() {self._iconURL = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _id: Int32? = nil
  fileprivate var _title: String? = nil
  fileprivate var _iconURL: String? = nil
}

struct MovieService_Period {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int32 {
    get {return _id ?? 0}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {self._id = nil}

  var rentHours: Int32 {
    get {return _rentHours ?? 0}
    set {_rentHours = newValue}
  }
  /// Returns true if `rentHours` has been explicitly set.
  var hasRentHours: Bool {return self._rentHours != nil}
  /// Clears the value of `rentHours`. Subsequent reads from it will return its default value.
  mutating func clearRentHours() {self._rentHours = nil}

  var watchHours: Int32 {
    get {return _watchHours ?? 0}
    set {_watchHours = newValue}
  }
  /// Returns true if `watchHours` has been explicitly set.
  var hasWatchHours: Bool {return self._watchHours != nil}
  /// Clears the value of `watchHours`. Subsequent reads from it will return its default value.
  mutating func clearWatchHours() {self._watchHours = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _id: Int32? = nil
  fileprivate var _rentHours: Int32? = nil
  fileprivate var _watchHours: Int32? = nil
}

struct MovieService_PremiereBanner {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int32 {
    get {return _id ?? 0}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {self._id = nil}

  var imageURL: String {
    get {return _imageURL ?? String()}
    set {_imageURL = newValue}
  }
  /// Returns true if `imageURL` has been explicitly set.
  var hasImageURL: Bool {return self._imageURL != nil}
  /// Clears the value of `imageURL`. Subsequent reads from it will return its default value.
  mutating func clearImageURL() {self._imageURL = nil}

  var title: String {
    get {return _title ?? String()}
    set {_title = newValue}
  }
  /// Returns true if `title` has been explicitly set.
  var hasTitle: Bool {return self._title != nil}
  /// Clears the value of `title`. Subsequent reads from it will return its default value.
  mutating func clearTitle() {self._title = nil}

  var movieID: Int32 {
    get {return _movieID ?? 0}
    set {_movieID = newValue}
  }
  /// Returns true if `movieID` has been explicitly set.
  var hasMovieID: Bool {return self._movieID != nil}
  /// Clears the value of `movieID`. Subsequent reads from it will return its default value.
  mutating func clearMovieID() {self._movieID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _id: Int32? = nil
  fileprivate var _imageURL: String? = nil
  fileprivate var _title: String? = nil
  fileprivate var _movieID: Int32? = nil
}

struct MovieService_VideoQuality {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int32 {
    get {return _id ?? 0}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {self._id = nil}

  var name: String {
    get {return _name ?? String()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {self._name = nil}

  var description_p: String {
    get {return _description_p ?? String()}
    set {_description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  var hasDescription_p: Bool {return self._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  mutating func clearDescription_p() {self._description_p = nil}

  var iconURL: String {
    get {return _iconURL ?? String()}
    set {_iconURL = newValue}
  }
  /// Returns true if `iconURL` has been explicitly set.
  var hasIconURL: Bool {return self._iconURL != nil}
  /// Clears the value of `iconURL`. Subsequent reads from it will return its default value.
  mutating func clearIconURL() {self._iconURL = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _id: Int32? = nil
  fileprivate var _name: String? = nil
  fileprivate var _description_p: String? = nil
  fileprivate var _iconURL: String? = nil
}

struct MovieService_Language {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int32 {
    get {return _id ?? 0}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {self._id = nil}

  var title: String {
    get {return _title ?? String()}
    set {_title = newValue}
  }
  /// Returns true if `title` has been explicitly set.
  var hasTitle: Bool {return self._title != nil}
  /// Clears the value of `title`. Subsequent reads from it will return its default value.
  mutating func clearTitle() {self._title = nil}

  var iconURL: String {
    get {return _iconURL ?? String()}
    set {_iconURL = newValue}
  }
  /// Returns true if `iconURL` has been explicitly set.
  var hasIconURL: Bool {return self._iconURL != nil}
  /// Clears the value of `iconURL`. Subsequent reads from it will return its default value.
  mutating func clearIconURL() {self._iconURL = nil}

  var isoCode: String {
    get {return _isoCode ?? String()}
    set {_isoCode = newValue}
  }
  /// Returns true if `isoCode` has been explicitly set.
  var hasIsoCode: Bool {return self._isoCode != nil}
  /// Clears the value of `isoCode`. Subsequent reads from it will return its default value.
  mutating func clearIsoCode() {self._isoCode = nil}

  var slug: String {
    get {return _slug ?? String()}
    set {_slug = newValue}
  }
  /// Returns true if `slug` has been explicitly set.
  var hasSlug: Bool {return self._slug != nil}
  /// Clears the value of `slug`. Subsequent reads from it will return its default value.
  mutating func clearSlug() {self._slug = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _id: Int32? = nil
  fileprivate var _title: String? = nil
  fileprivate var _iconURL: String? = nil
  fileprivate var _isoCode: String? = nil
  fileprivate var _slug: String? = nil
}

struct MovieService_MovieOffer {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int32 {
    get {return _storage._id ?? 0}
    set {_uniqueStorage()._id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {_uniqueStorage()._id = nil}

  var offerType: MovieService_MovieOffer.OfferType {
    get {return _storage._offerType ?? .buy}
    set {_uniqueStorage()._offerType = newValue}
  }
  /// Returns true if `offerType` has been explicitly set.
  var hasOfferType: Bool {return _storage._offerType != nil}
  /// Clears the value of `offerType`. Subsequent reads from it will return its default value.
  mutating func clearOfferType() {_uniqueStorage()._offerType = nil}

  var videoQuality: MovieService_VideoQuality {
    get {return _storage._videoQuality ?? MovieService_VideoQuality()}
    set {_uniqueStorage()._videoQuality = newValue}
  }
  /// Returns true if `videoQuality` has been explicitly set.
  var hasVideoQuality: Bool {return _storage._videoQuality != nil}
  /// Clears the value of `videoQuality`. Subsequent reads from it will return its default value.
  mutating func clearVideoQuality() {_uniqueStorage()._videoQuality = nil}

  var title: String {
    get {return _storage._title ?? String()}
    set {_uniqueStorage()._title = newValue}
  }
  /// Returns true if `title` has been explicitly set.
  var hasTitle: Bool {return _storage._title != nil}
  /// Clears the value of `title`. Subsequent reads from it will return its default value.
  mutating func clearTitle() {_uniqueStorage()._title = nil}

  var offerIcon: String {
    get {return _storage._offerIcon ?? String()}
    set {_uniqueStorage()._offerIcon = newValue}
  }
  /// Returns true if `offerIcon` has been explicitly set.
  var hasOfferIcon: Bool {return _storage._offerIcon != nil}
  /// Clears the value of `offerIcon`. Subsequent reads from it will return its default value.
  mutating func clearOfferIcon() {_uniqueStorage()._offerIcon = nil}

  var period: MovieService_Period {
    get {return _storage._period ?? MovieService_Period()}
    set {_uniqueStorage()._period = newValue}
  }
  /// Returns true if `period` has been explicitly set.
  var hasPeriod: Bool {return _storage._period != nil}
  /// Clears the value of `period`. Subsequent reads from it will return its default value.
  mutating func clearPeriod() {_uniqueStorage()._period = nil}

  var price: Int32 {
    get {return _storage._price ?? 0}
    set {_uniqueStorage()._price = newValue}
  }
  /// Returns true if `price` has been explicitly set.
  var hasPrice: Bool {return _storage._price != nil}
  /// Clears the value of `price`. Subsequent reads from it will return its default value.
  mutating func clearPrice() {_uniqueStorage()._price = nil}

  var productID: String {
    get {return _storage._productID ?? String()}
    set {_uniqueStorage()._productID = newValue}
  }
  /// Returns true if `productID` has been explicitly set.
  var hasProductID: Bool {return _storage._productID != nil}
  /// Clears the value of `productID`. Subsequent reads from it will return its default value.
  mutating func clearProductID() {_uniqueStorage()._productID = nil}

  var storeID: Int32 {
    get {return _storage._storeID ?? 0}
    set {_uniqueStorage()._storeID = newValue}
  }
  /// Returns true if `storeID` has been explicitly set.
  var hasStoreID: Bool {return _storage._storeID != nil}
  /// Clears the value of `storeID`. Subsequent reads from it will return its default value.
  mutating func clearStoreID() {_uniqueStorage()._storeID = nil}

  var storeStatus: Int32 {
    get {return _storage._storeStatus ?? 0}
    set {_uniqueStorage()._storeStatus = newValue}
  }
  /// Returns true if `storeStatus` has been explicitly set.
  var hasStoreStatus: Bool {return _storage._storeStatus != nil}
  /// Clears the value of `storeStatus`. Subsequent reads from it will return its default value.
  mutating func clearStoreStatus() {_uniqueStorage()._storeStatus = nil}

  var discounted: Bool {
    get {return _storage._discounted ?? false}
    set {_uniqueStorage()._discounted = newValue}
  }
  /// Returns true if `discounted` has been explicitly set.
  var hasDiscounted: Bool {return _storage._discounted != nil}
  /// Clears the value of `discounted`. Subsequent reads from it will return its default value.
  mutating func clearDiscounted() {_uniqueStorage()._discounted = nil}

  var originalPrice: Int32 {
    get {return _storage._originalPrice ?? 0}
    set {_uniqueStorage()._originalPrice = newValue}
  }
  /// Returns true if `originalPrice` has been explicitly set.
  var hasOriginalPrice: Bool {return _storage._originalPrice != nil}
  /// Clears the value of `originalPrice`. Subsequent reads from it will return its default value.
  mutating func clearOriginalPrice() {_uniqueStorage()._originalPrice = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OfferType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case buy // = 0
    case rent // = 1

    init() {
      self = .buy
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .buy
      case 1: self = .rent
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .buy: return 0
      case .rent: return 1
      }
    }

  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension MovieService_MovieOffer.OfferType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct MovieService_AudioTrack {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var index: Int32 {
    get {return _index ?? 0}
    set {_index = newValue}
  }
  /// Returns true if `index` has been explicitly set.
  var hasIndex: Bool {return self._index != nil}
  /// Clears the value of `index`. Subsequent reads from it will return its default value.
  mutating func clearIndex() {self._index = nil}

  var language: String {
    get {return _language ?? String()}
    set {_language = newValue}
  }
  /// Returns true if `language` has been explicitly set.
  var hasLanguage: Bool {return self._language != nil}
  /// Clears the value of `language`. Subsequent reads from it will return its default value.
  mutating func clearLanguage() {self._language = nil}

  var soundScheme: String {
    get {return _soundScheme ?? String()}
    set {_soundScheme = newValue}
  }
  /// Returns true if `soundScheme` has been explicitly set.
  var hasSoundScheme: Bool {return self._soundScheme != nil}
  /// Clears the value of `soundScheme`. Subsequent reads from it will return its default value.
  mutating func clearSoundScheme() {self._soundScheme = nil}

  var isoCode: String {
    get {return _isoCode ?? String()}
    set {_isoCode = newValue}
  }
  /// Returns true if `isoCode` has been explicitly set.
  var hasIsoCode: Bool {return self._isoCode != nil}
  /// Clears the value of `isoCode`. Subsequent reads from it will return its default value.
  mutating func clearIsoCode() {self._isoCode = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _index: Int32? = nil
  fileprivate var _language: String? = nil
  fileprivate var _soundScheme: String? = nil
  fileprivate var _isoCode: String? = nil
}

struct MovieService_Subtitle {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var language: String {
    get {return _language ?? String()}
    set {_language = newValue}
  }
  /// Returns true if `language` has been explicitly set.
  var hasLanguage: Bool {return self._language != nil}
  /// Clears the value of `language`. Subsequent reads from it will return its default value.
  mutating func clearLanguage() {self._language = nil}

  var isoCode: String {
    get {return _isoCode ?? String()}
    set {_isoCode = newValue}
  }
  /// Returns true if `isoCode` has been explicitly set.
  var hasIsoCode: Bool {return self._isoCode != nil}
  /// Clears the value of `isoCode`. Subsequent reads from it will return its default value.
  mutating func clearIsoCode() {self._isoCode = nil}

  var url: String {
    get {return _url ?? String()}
    set {_url = newValue}
  }
  /// Returns true if `url` has been explicitly set.
  var hasURL: Bool {return self._url != nil}
  /// Clears the value of `url`. Subsequent reads from it will return its default value.
  mutating func clearURL() {self._url = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _language: String? = nil
  fileprivate var _isoCode: String? = nil
  fileprivate var _url: String? = nil
}

struct MovieService_Statistics {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var likeCount: Int32 {
    get {return _likeCount ?? 0}
    set {_likeCount = newValue}
  }
  /// Returns true if `likeCount` has been explicitly set.
  var hasLikeCount: Bool {return self._likeCount != nil}
  /// Clears the value of `likeCount`. Subsequent reads from it will return its default value.
  mutating func clearLikeCount() {self._likeCount = nil}

  var dislikeCount: Int32 {
    get {return _dislikeCount ?? 0}
    set {_dislikeCount = newValue}
  }
  /// Returns true if `dislikeCount` has been explicitly set.
  var hasDislikeCount: Bool {return self._dislikeCount != nil}
  /// Clears the value of `dislikeCount`. Subsequent reads from it will return its default value.
  mutating func clearDislikeCount() {self._dislikeCount = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _likeCount: Int32? = nil
  fileprivate var _dislikeCount: Int32? = nil
}

struct MovieService_Comment {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int32 {
    get {return _id ?? 0}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {self._id = nil}

  var author: String {
    get {return _author ?? String()}
    set {_author = newValue}
  }
  /// Returns true if `author` has been explicitly set.
  var hasAuthor: Bool {return self._author != nil}
  /// Clears the value of `author`. Subsequent reads from it will return its default value.
  mutating func clearAuthor() {self._author = nil}

  var text: String {
    get {return _text ?? String()}
    set {_text = newValue}
  }
  /// Returns true if `text` has been explicitly set.
  var hasText: Bool {return self._text != nil}
  /// Clears the value of `text`. Subsequent reads from it will return its default value.
  mutating func clearText() {self._text = nil}

  var editable: Bool {
    get {return _editable ?? false}
    set {_editable = newValue}
  }
  /// Returns true if `editable` has been explicitly set.
  var hasEditable: Bool {return self._editable != nil}
  /// Clears the value of `editable`. Subsequent reads from it will return its default value.
  mutating func clearEditable() {self._editable = nil}

  var delible: Bool {
    get {return _delible ?? false}
    set {_delible = newValue}
  }
  /// Returns true if `delible` has been explicitly set.
  var hasDelible: Bool {return self._delible != nil}
  /// Clears the value of `delible`. Subsequent reads from it will return its default value.
  mutating func clearDelible() {self._delible = nil}

  var statistics: MovieService_Statistics {
    get {return _statistics ?? MovieService_Statistics()}
    set {_statistics = newValue}
  }
  /// Returns true if `statistics` has been explicitly set.
  var hasStatistics: Bool {return self._statistics != nil}
  /// Clears the value of `statistics`. Subsequent reads from it will return its default value.
  mutating func clearStatistics() {self._statistics = nil}

  var userRating: MovieService_Rating {
    get {return _userRating ?? .none}
    set {_userRating = newValue}
  }
  /// Returns true if `userRating` has been explicitly set.
  var hasUserRating: Bool {return self._userRating != nil}
  /// Clears the value of `userRating`. Subsequent reads from it will return its default value.
  mutating func clearUserRating() {self._userRating = nil}

  var replies: [MovieService_Comment] = []

  var createdAt: UInt64 {
    get {return _createdAt ?? 0}
    set {_createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  var hasCreatedAt: Bool {return self._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  mutating func clearCreatedAt() {self._createdAt = nil}

  var updatedAt: UInt64 {
    get {return _updatedAt ?? 0}
    set {_updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  var hasUpdatedAt: Bool {return self._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  mutating func clearUpdatedAt() {self._updatedAt = nil}

  var rating: Float {
    get {return _rating ?? 0}
    set {_rating = newValue}
  }
  /// Returns true if `rating` has been explicitly set.
  var hasRating: Bool {return self._rating != nil}
  /// Clears the value of `rating`. Subsequent reads from it will return its default value.
  mutating func clearRating() {self._rating = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _id: Int32? = nil
  fileprivate var _author: String? = nil
  fileprivate var _text: String? = nil
  fileprivate var _editable: Bool? = nil
  fileprivate var _delible: Bool? = nil
  fileprivate var _statistics: MovieService_Statistics? = nil
  fileprivate var _userRating: MovieService_Rating? = nil
  fileprivate var _createdAt: UInt64? = nil
  fileprivate var _updatedAt: UInt64? = nil
  fileprivate var _rating: Float? = nil
}

struct MovieService_Owner {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int32 {
    get {return _id ?? 0}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {self._id = nil}

  var title: String {
    get {return _title ?? String()}
    set {_title = newValue}
  }
  /// Returns true if `title` has been explicitly set.
  var hasTitle: Bool {return self._title != nil}
  /// Clears the value of `title`. Subsequent reads from it will return its default value.
  mutating func clearTitle() {self._title = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Id: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case undefined // = 0
    case megogo // = 1
    case amedia // = 2
    case sonar // = 3
    case ipmedia // = 4
    case continentTv // = 5
    case uts // = 6
    case viasat // = 7
    case viasatPremium // = 8
    case bitMediaCom // = 9
    case starLight // = 10
    case digitalScreens // = 11
    case mostVideo // = 12
    case sweetTvpremiere // = 1000
    case sweetTvmoldovaPremiere // = 1001

    init() {
      self = .undefined
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .undefined
      case 1: self = .megogo
      case 2: self = .amedia
      case 3: self = .sonar
      case 4: self = .ipmedia
      case 5: self = .continentTv
      case 6: self = .uts
      case 7: self = .viasat
      case 8: self = .viasatPremium
      case 9: self = .bitMediaCom
      case 10: self = .starLight
      case 11: self = .digitalScreens
      case 12: self = .mostVideo
      case 1000: self = .sweetTvpremiere
      case 1001: self = .sweetTvmoldovaPremiere
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .undefined: return 0
      case .megogo: return 1
      case .amedia: return 2
      case .sonar: return 3
      case .ipmedia: return 4
      case .continentTv: return 5
      case .uts: return 6
      case .viasat: return 7
      case .viasatPremium: return 8
      case .bitMediaCom: return 9
      case .starLight: return 10
      case .digitalScreens: return 11
      case .mostVideo: return 12
      case .sweetTvpremiere: return 1000
      case .sweetTvmoldovaPremiere: return 1001
      }
    }

  }

  init() {}

  fileprivate var _id: Int32? = nil
  fileprivate var _title: String? = nil
}

#if swift(>=4.2)

extension MovieService_Owner.Id: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct MovieService_WatchInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var lastPos: Int32 {
    get {return _lastPos ?? 0}
    set {_lastPos = newValue}
  }
  /// Returns true if `lastPos` has been explicitly set.
  var hasLastPos: Bool {return self._lastPos != nil}
  /// Clears the value of `lastPos`. Subsequent reads from it will return its default value.
  mutating func clearLastPos() {self._lastPos = nil}

  var lastPosInPercents: Int32 {
    get {return _lastPosInPercents ?? 0}
    set {_lastPosInPercents = newValue}
  }
  /// Returns true if `lastPosInPercents` has been explicitly set.
  var hasLastPosInPercents: Bool {return self._lastPosInPercents != nil}
  /// Clears the value of `lastPosInPercents`. Subsequent reads from it will return its default value.
  mutating func clearLastPosInPercents() {self._lastPosInPercents = nil}

  var lastEpisodeID: Int32 {
    get {return _lastEpisodeID ?? 0}
    set {_lastEpisodeID = newValue}
  }
  /// Returns true if `lastEpisodeID` has been explicitly set.
  var hasLastEpisodeID: Bool {return self._lastEpisodeID != nil}
  /// Clears the value of `lastEpisodeID`. Subsequent reads from it will return its default value.
  mutating func clearLastEpisodeID() {self._lastEpisodeID = nil}

  var lastTime: Int64 {
    get {return _lastTime ?? 0}
    set {_lastTime = newValue}
  }
  /// Returns true if `lastTime` has been explicitly set.
  var hasLastTime: Bool {return self._lastTime != nil}
  /// Clears the value of `lastTime`. Subsequent reads from it will return its default value.
  mutating func clearLastTime() {self._lastTime = nil}

  var referralMovieID: Int32 {
    get {return _referralMovieID ?? 0}
    set {_referralMovieID = newValue}
  }
  /// Returns true if `referralMovieID` has been explicitly set.
  var hasReferralMovieID: Bool {return self._referralMovieID != nil}
  /// Clears the value of `referralMovieID`. Subsequent reads from it will return its default value.
  mutating func clearReferralMovieID() {self._referralMovieID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _lastPos: Int32? = nil
  fileprivate var _lastPosInPercents: Int32? = nil
  fileprivate var _lastEpisodeID: Int32? = nil
  fileprivate var _lastTime: Int64? = nil
  fileprivate var _referralMovieID: Int32? = nil
}

struct MovieService_ExternalIdPair {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ownerID: Int32 {
    get {return _ownerID ?? 0}
    set {_ownerID = newValue}
  }
  /// Returns true if `ownerID` has been explicitly set.
  var hasOwnerID: Bool {return self._ownerID != nil}
  /// Clears the value of `ownerID`. Subsequent reads from it will return its default value.
  mutating func clearOwnerID() {self._ownerID = nil}

  var externalID: Int32 {
    get {return _externalID ?? 0}
    set {_externalID = newValue}
  }
  /// Returns true if `externalID` has been explicitly set.
  var hasExternalID: Bool {return self._externalID != nil}
  /// Clears the value of `externalID`. Subsequent reads from it will return its default value.
  mutating func clearExternalID() {self._externalID = nil}

  var preferred: Bool {
    get {return _preferred ?? false}
    set {_preferred = newValue}
  }
  /// Returns true if `preferred` has been explicitly set.
  var hasPreferred: Bool {return self._preferred != nil}
  /// Clears the value of `preferred`. Subsequent reads from it will return its default value.
  mutating func clearPreferred() {self._preferred = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _ownerID: Int32? = nil
  fileprivate var _externalID: Int32? = nil
  fileprivate var _preferred: Bool? = nil
}

struct MovieService_Recommendation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: MovieService_Recommendation.RecommendationType {
    get {return _type ?? .channel}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  var contentID: Int32 {
    get {return _contentID ?? 0}
    set {_contentID = newValue}
  }
  /// Returns true if `contentID` has been explicitly set.
  var hasContentID: Bool {return self._contentID != nil}
  /// Clears the value of `contentID`. Subsequent reads from it will return its default value.
  mutating func clearContentID() {self._contentID = nil}

  var imageURL: String {
    get {return _imageURL ?? String()}
    set {_imageURL = newValue}
  }
  /// Returns true if `imageURL` has been explicitly set.
  var hasImageURL: Bool {return self._imageURL != nil}
  /// Clears the value of `imageURL`. Subsequent reads from it will return its default value.
  mutating func clearImageURL() {self._imageURL = nil}

  var title: String {
    get {return _title ?? String()}
    set {_title = newValue}
  }
  /// Returns true if `title` has been explicitly set.
  var hasTitle: Bool {return self._title != nil}
  /// Clears the value of `title`. Subsequent reads from it will return its default value.
  mutating func clearTitle() {self._title = nil}

  var description_p: String {
    get {return _description_p ?? String()}
    set {_description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  var hasDescription_p: Bool {return self._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  mutating func clearDescription_p() {self._description_p = nil}

  var trailerURL: String {
    get {return _trailerURL ?? String()}
    set {_trailerURL = newValue}
  }
  /// Returns true if `trailerURL` has been explicitly set.
  var hasTrailerURL: Bool {return self._trailerURL != nil}
  /// Clears the value of `trailerURL`. Subsequent reads from it will return its default value.
  mutating func clearTrailerURL() {self._trailerURL = nil}

  var secondaryID: Int32 {
    get {return _secondaryID ?? 0}
    set {_secondaryID = newValue}
  }
  /// Returns true if `secondaryID` has been explicitly set.
  var hasSecondaryID: Bool {return self._secondaryID != nil}
  /// Clears the value of `secondaryID`. Subsequent reads from it will return its default value.
  mutating func clearSecondaryID() {self._secondaryID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum RecommendationType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case channel // = 1
    case movie // = 2

    init() {
      self = .channel
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .channel
      case 2: self = .movie
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .channel: return 1
      case .movie: return 2
      }
    }

  }

  init() {}

  fileprivate var _type: MovieService_Recommendation.RecommendationType? = nil
  fileprivate var _contentID: Int32? = nil
  fileprivate var _imageURL: String? = nil
  fileprivate var _title: String? = nil
  fileprivate var _description_p: String? = nil
  fileprivate var _trailerURL: String? = nil
  fileprivate var _secondaryID: Int32? = nil
}

#if swift(>=4.2)

extension MovieService_Recommendation.RecommendationType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct MovieService_GetGenreMoviesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var auth: String {
    get {return _auth ?? String()}
    set {_auth = newValue}
  }
  /// Returns true if `auth` has been explicitly set.
  var hasAuth: Bool {return self._auth != nil}
  /// Clears the value of `auth`. Subsequent reads from it will return its default value.
  mutating func clearAuth() {self._auth = nil}

  var genreID: Int32 {
    get {return _genreID ?? 0}
    set {_genreID = newValue}
  }
  /// Returns true if `genreID` has been explicitly set.
  var hasGenreID: Bool {return self._genreID != nil}
  /// Clears the value of `genreID`. Subsequent reads from it will return its default value.
  mutating func clearGenreID() {self._genreID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _auth: String? = nil
  fileprivate var _genreID: Int32? = nil
}

struct MovieService_GetGenreMoviesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var result: MovieService_GetGenreMoviesResponse.Result {
    get {return _result ?? .ok}
    set {_result = newValue}
  }
  /// Returns true if `result` has been explicitly set.
  var hasResult: Bool {return self._result != nil}
  /// Clears the value of `result`. Subsequent reads from it will return its default value.
  mutating func clearResult() {self._result = nil}

  var movies: [Int32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Result: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case ok // = 0
    case noAuth // = 1

    init() {
      self = .ok
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ok
      case 1: self = .noAuth
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .ok: return 0
      case .noAuth: return 1
      }
    }

  }

  init() {}

  fileprivate var _result: MovieService_GetGenreMoviesResponse.Result? = nil
}

#if swift(>=4.2)

extension MovieService_GetGenreMoviesResponse.Result: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct MovieService_GetSubgenreMoviesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var auth: String {
    get {return _auth ?? String()}
    set {_auth = newValue}
  }
  /// Returns true if `auth` has been explicitly set.
  var hasAuth: Bool {return self._auth != nil}
  /// Clears the value of `auth`. Subsequent reads from it will return its default value.
  mutating func clearAuth() {self._auth = nil}

  var subgenreID: Int32 {
    get {return _subgenreID ?? 0}
    set {_subgenreID = newValue}
  }
  /// Returns true if `subgenreID` has been explicitly set.
  var hasSubgenreID: Bool {return self._subgenreID != nil}
  /// Clears the value of `subgenreID`. Subsequent reads from it will return its default value.
  mutating func clearSubgenreID() {self._subgenreID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _auth: String? = nil
  fileprivate var _subgenreID: Int32? = nil
}

struct MovieService_GetSubgenreMoviesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var result: MovieService_GetSubgenreMoviesResponse.Result {
    get {return _result ?? .ok}
    set {_result = newValue}
  }
  /// Returns true if `result` has been explicitly set.
  var hasResult: Bool {return self._result != nil}
  /// Clears the value of `result`. Subsequent reads from it will return its default value.
  mutating func clearResult() {self._result = nil}

  var movies: [Int32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Result: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case ok // = 0
    case noAuth // = 1

    init() {
      self = .ok
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ok
      case 1: self = .noAuth
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .ok: return 0
      case .noAuth: return 1
      }
    }

  }

  init() {}

  fileprivate var _result: MovieService_GetSubgenreMoviesResponse.Result? = nil
}

#if swift(>=4.2)

extension MovieService_GetSubgenreMoviesResponse.Result: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct MovieService_GetMovieInfoRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var auth: String {
    get {return _auth ?? String()}
    set {_auth = newValue}
  }
  /// Returns true if `auth` has been explicitly set.
  var hasAuth: Bool {return self._auth != nil}
  /// Clears the value of `auth`. Subsequent reads from it will return its default value.
  mutating func clearAuth() {self._auth = nil}

  var movies: [Int32] = []

  var offset: Int32 {
    get {return _offset ?? 0}
    set {_offset = newValue}
  }
  /// Returns true if `offset` has been explicitly set.
  var hasOffset: Bool {return self._offset != nil}
  /// Clears the value of `offset`. Subsequent reads from it will return its default value.
  mutating func clearOffset() {self._offset = nil}

  var limit: Int32 {
    get {return _limit ?? 0}
    set {_limit = newValue}
  }
  /// Returns true if `limit` has been explicitly set.
  var hasLimit: Bool {return self._limit != nil}
  /// Clears the value of `limit`. Subsequent reads from it will return its default value.
  mutating func clearLimit() {self._limit = nil}

  var needExtendedInfo: Bool {
    get {return _needExtendedInfo ?? true}
    set {_needExtendedInfo = newValue}
  }
  /// Returns true if `needExtendedInfo` has been explicitly set.
  var hasNeedExtendedInfo: Bool {return self._needExtendedInfo != nil}
  /// Clears the value of `needExtendedInfo`. Subsequent reads from it will return its default value.
  mutating func clearNeedExtendedInfo() {self._needExtendedInfo = nil}

  var sortModeID: Int32 {
    get {return _sortModeID ?? 0}
    set {_sortModeID = newValue}
  }
  /// Returns true if `sortModeID` has been explicitly set.
  var hasSortModeID: Bool {return self._sortModeID != nil}
  /// Clears the value of `sortModeID`. Subsequent reads from it will return its default value.
  mutating func clearSortModeID() {self._sortModeID = nil}

  var needBundleOffers: Bool {
    get {return _needBundleOffers ?? false}
    set {_needBundleOffers = newValue}
  }
  /// Returns true if `needBundleOffers` has been explicitly set.
  var hasNeedBundleOffers: Bool {return self._needBundleOffers != nil}
  /// Clears the value of `needBundleOffers`. Subsequent reads from it will return its default value.
  mutating func clearNeedBundleOffers() {self._needBundleOffers = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _auth: String? = nil
  fileprivate var _offset: Int32? = nil
  fileprivate var _limit: Int32? = nil
  fileprivate var _needExtendedInfo: Bool? = nil
  fileprivate var _sortModeID: Int32? = nil
  fileprivate var _needBundleOffers: Bool? = nil
}

struct MovieService_GetMovieInfoResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var result: MovieService_GetMovieInfoResponse.Result {
    get {return _result ?? .ok}
    set {_result = newValue}
  }
  /// Returns true if `result` has been explicitly set.
  var hasResult: Bool {return self._result != nil}
  /// Clears the value of `result`. Subsequent reads from it will return its default value.
  mutating func clearResult() {self._result = nil}

  var movies: [MovieService_Movie] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Result: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case ok // = 0
    case noAuth // = 1

    init() {
      self = .ok
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ok
      case 1: self = .noAuth
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .ok: return 0
      case .noAuth: return 1
      }
    }

  }

  init() {}

  fileprivate var _result: MovieService_GetMovieInfoResponse.Result? = nil
}

#if swift(>=4.2)

extension MovieService_GetMovieInfoResponse.Result: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct MovieService_GetConfigurationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var auth: String {
    get {return _auth ?? String()}
    set {_auth = newValue}
  }
  /// Returns true if `auth` has been explicitly set.
  var hasAuth: Bool {return self._auth != nil}
  /// Clears the value of `auth`. Subsequent reads from it will return its default value.
  mutating func clearAuth() {self._auth = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _auth: String? = nil
}

struct MovieService_GetConfigurationResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var result: MovieService_GetConfigurationResponse.Result {
    get {return _result ?? .ok}
    set {_result = newValue}
  }
  /// Returns true if `result` has been explicitly set.
  var hasResult: Bool {return self._result != nil}
  /// Clears the value of `result`. Subsequent reads from it will return its default value.
  mutating func clearResult() {self._result = nil}

  var categories: [MovieService_Category] = []

  var countries: [MovieService_Country] = []

  var genres: [MovieService_Genre] = []

  var owners: [MovieService_Owner] = []

  var roles: [MovieService_Role] = []

  var collections: [MovieService_Collection] = []

  var sortModes: [MovieService_SortMode] = []

  var subgenres: [MovieService_Subgenre] = []

  var videoQualities: [MovieService_VideoQuality] = []

  var languages: [MovieService_Language] = []

  var sections: [MovieService_Section] = []

  var bannerResolutions: [MovieService_BannerResolution] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Result: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case ok // = 0
    case noAuth // = 1

    init() {
      self = .ok
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ok
      case 1: self = .noAuth
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .ok: return 0
      case .noAuth: return 1
      }
    }

  }

  init() {}

  fileprivate var _result: MovieService_GetConfigurationResponse.Result? = nil
}

#if swift(>=4.2)

extension MovieService_GetConfigurationResponse.Result: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct MovieService_GetRecommendedMoviesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var auth: String {
    get {return _auth ?? String()}
    set {_auth = newValue}
  }
  /// Returns true if `auth` has been explicitly set.
  var hasAuth: Bool {return self._auth != nil}
  /// Clears the value of `auth`. Subsequent reads from it will return its default value.
  mutating func clearAuth() {self._auth = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _auth: String? = nil
}

struct MovieService_GetRecommendedMoviesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: MovieService_GetRecommendedMoviesResponse.Result {
    get {return _status ?? .ok}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  mutating func clearStatus() {self._status = nil}

  var movies: [Int32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Result: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case ok // = 0
    case noAuth // = 1

    init() {
      self = .ok
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ok
      case 1: self = .noAuth
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .ok: return 0
      case .noAuth: return 1
      }
    }

  }

  init() {}

  fileprivate var _status: MovieService_GetRecommendedMoviesResponse.Result? = nil
}

#if swift(>=4.2)

extension MovieService_GetRecommendedMoviesResponse.Result: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct MovieService_GetLinkRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var auth: String {
    get {return _auth ?? String()}
    set {_auth = newValue}
  }
  /// Returns true if `auth` has been explicitly set.
  var hasAuth: Bool {return self._auth != nil}
  /// Clears the value of `auth`. Subsequent reads from it will return its default value.
  mutating func clearAuth() {self._auth = nil}

  var movieID: Int32 {
    get {return _movieID ?? 0}
    set {_movieID = newValue}
  }
  /// Returns true if `movieID` has been explicitly set.
  var hasMovieID: Bool {return self._movieID != nil}
  /// Clears the value of `movieID`. Subsequent reads from it will return its default value.
  mutating func clearMovieID() {self._movieID = nil}

  var ownerID: Int32 {
    get {return _ownerID ?? 0}
    set {_ownerID = newValue}
  }
  /// Returns true if `ownerID` has been explicitly set.
  var hasOwnerID: Bool {return self._ownerID != nil}
  /// Clears the value of `ownerID`. Subsequent reads from it will return its default value.
  mutating func clearOwnerID() {self._ownerID = nil}

  var episodeID: Int32 {
    get {return _episodeID ?? 0}
    set {_episodeID = newValue}
  }
  /// Returns true if `episodeID` has been explicitly set.
  var hasEpisodeID: Bool {return self._episodeID != nil}
  /// Clears the value of `episodeID`. Subsequent reads from it will return its default value.
  mutating func clearEpisodeID() {self._episodeID = nil}

  var sessionID: String {
    get {return _sessionID ?? String()}
    set {_sessionID = newValue}
  }
  /// Returns true if `sessionID` has been explicitly set.
  var hasSessionID: Bool {return self._sessionID != nil}
  /// Clears the value of `sessionID`. Subsequent reads from it will return its default value.
  mutating func clearSessionID() {self._sessionID = nil}

  var audioTrack: Int32 {
    get {return _audioTrack ?? 0}
    set {_audioTrack = newValue}
  }
  /// Returns true if `audioTrack` has been explicitly set.
  var hasAudioTrack: Bool {return self._audioTrack != nil}
  /// Clears the value of `audioTrack`. Subsequent reads from it will return its default value.
  mutating func clearAudioTrack() {self._audioTrack = nil}

  var subtitle: String {
    get {return _subtitle ?? String()}
    set {_subtitle = newValue}
  }
  /// Returns true if `subtitle` has been explicitly set.
  var hasSubtitle: Bool {return self._subtitle != nil}
  /// Clears the value of `subtitle`. Subsequent reads from it will return its default value.
  mutating func clearSubtitle() {self._subtitle = nil}

  var preferredLinkType: MovieService_LinkType {
    get {return _preferredLinkType ?? .hls}
    set {_preferredLinkType = newValue}
  }
  /// Returns true if `preferredLinkType` has been explicitly set.
  var hasPreferredLinkType: Bool {return self._preferredLinkType != nil}
  /// Clears the value of `preferredLinkType`. Subsequent reads from it will return its default value.
  mutating func clearPreferredLinkType() {self._preferredLinkType = nil}

  var previewMode: Bool {
    get {return _previewMode ?? false}
    set {_previewMode = newValue}
  }
  /// Returns true if `previewMode` has been explicitly set.
  var hasPreviewMode: Bool {return self._previewMode != nil}
  /// Clears the value of `previewMode`. Subsequent reads from it will return its default value.
  mutating func clearPreviewMode() {self._previewMode = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _auth: String? = nil
  fileprivate var _movieID: Int32? = nil
  fileprivate var _ownerID: Int32? = nil
  fileprivate var _episodeID: Int32? = nil
  fileprivate var _sessionID: String? = nil
  fileprivate var _audioTrack: Int32? = nil
  fileprivate var _subtitle: String? = nil
  fileprivate var _preferredLinkType: MovieService_LinkType? = nil
  fileprivate var _previewMode: Bool? = nil
}

struct MovieService_GetLinkResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: MovieService_GetLinkResponse.Result {
    get {return _storage._status ?? .ok}
    set {_uniqueStorage()._status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  var hasStatus: Bool {return _storage._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  mutating func clearStatus() {_uniqueStorage()._status = nil}

  var url: String {
    get {return _storage._url ?? String()}
    set {_uniqueStorage()._url = newValue}
  }
  /// Returns true if `url` has been explicitly set.
  var hasURL: Bool {return _storage._url != nil}
  /// Clears the value of `url`. Subsequent reads from it will return its default value.
  mutating func clearURL() {_uniqueStorage()._url = nil}

  var ads: [MovieService_Ad] {
    get {return _storage._ads}
    set {_uniqueStorage()._ads = newValue}
  }

  var adTagURL: String {
    get {return _storage._adTagURL ?? String()}
    set {_uniqueStorage()._adTagURL = newValue}
  }
  /// Returns true if `adTagURL` has been explicitly set.
  var hasAdTagURL: Bool {return _storage._adTagURL != nil}
  /// Clears the value of `adTagURL`. Subsequent reads from it will return its default value.
  mutating func clearAdTagURL() {_uniqueStorage()._adTagURL = nil}

  var linkType: MovieService_LinkType {
    get {return _storage._linkType ?? .hls}
    set {_uniqueStorage()._linkType = newValue}
  }
  /// Returns true if `linkType` has been explicitly set.
  var hasLinkType: Bool {return _storage._linkType != nil}
  /// Clears the value of `linkType`. Subsequent reads from it will return its default value.
  mutating func clearLinkType() {_uniqueStorage()._linkType = nil}

  var drmType: MovieService_DRMType {
    get {return _storage._drmType ?? .drmNone}
    set {_uniqueStorage()._drmType = newValue}
  }
  /// Returns true if `drmType` has been explicitly set.
  var hasDrmType: Bool {return _storage._drmType != nil}
  /// Clears the value of `drmType`. Subsequent reads from it will return its default value.
  mutating func clearDrmType() {_uniqueStorage()._drmType = nil}

  var licenseServerURL: String {
    get {return _storage._licenseServerURL ?? String()}
    set {_uniqueStorage()._licenseServerURL = newValue}
  }
  /// Returns true if `licenseServerURL` has been explicitly set.
  var hasLicenseServerURL: Bool {return _storage._licenseServerURL != nil}
  /// Clears the value of `licenseServerURL`. Subsequent reads from it will return its default value.
  mutating func clearLicenseServerURL() {_uniqueStorage()._licenseServerURL = nil}

  var thumbnails: MovieService_Thumbnails {
    get {return _storage._thumbnails ?? MovieService_Thumbnails()}
    set {_uniqueStorage()._thumbnails = newValue}
  }
  /// Returns true if `thumbnails` has been explicitly set.
  var hasThumbnails: Bool {return _storage._thumbnails != nil}
  /// Clears the value of `thumbnails`. Subsequent reads from it will return its default value.
  mutating func clearThumbnails() {_uniqueStorage()._thumbnails = nil}

  var mesh: Bool {
    get {return _storage._mesh ?? false}
    set {_uniqueStorage()._mesh = newValue}
  }
  /// Returns true if `mesh` has been explicitly set.
  var hasMesh: Bool {return _storage._mesh != nil}
  /// Clears the value of `mesh`. Subsequent reads from it will return its default value.
  mutating func clearMesh() {_uniqueStorage()._mesh = nil}

  var contentKey: String {
    get {return _storage._contentKey ?? String()}
    set {_uniqueStorage()._contentKey = newValue}
  }
  /// Returns true if `contentKey` has been explicitly set.
  var hasContentKey: Bool {return _storage._contentKey != nil}
  /// Clears the value of `contentKey`. Subsequent reads from it will return its default value.
  mutating func clearContentKey() {_uniqueStorage()._contentKey = nil}

  var subtitles: [MovieService_Subtitle] {
    get {return _storage._subtitles}
    set {_uniqueStorage()._subtitles = newValue}
  }

  var channelID: Int32 {
    get {return _storage._channelID ?? 0}
    set {_uniqueStorage()._channelID = newValue}
  }
  /// Returns true if `channelID` has been explicitly set.
  var hasChannelID: Bool {return _storage._channelID != nil}
  /// Clears the value of `channelID`. Subsequent reads from it will return its default value.
  mutating func clearChannelID() {_uniqueStorage()._channelID = nil}

  var epgID: Int32 {
    get {return _storage._epgID ?? 0}
    set {_uniqueStorage()._epgID = newValue}
  }
  /// Returns true if `epgID` has been explicitly set.
  var hasEpgID: Bool {return _storage._epgID != nil}
  /// Clears the value of `epgID`. Subsequent reads from it will return its default value.
  mutating func clearEpgID() {_uniqueStorage()._epgID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Result: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case ok // = 0
    case noAuth // = 1
    case externalError // = 2
    case notFound // = 3
    case needDrm // = 4

    init() {
      self = .ok
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ok
      case 1: self = .noAuth
      case 2: self = .externalError
      case 3: self = .notFound
      case 4: self = .needDrm
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .ok: return 0
      case .noAuth: return 1
      case .externalError: return 2
      case .notFound: return 3
      case .needDrm: return 4
      }
    }

  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension MovieService_GetLinkResponse.Result: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct MovieService_Thumbnails {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var imageURL: String {
    get {return _imageURL ?? String()}
    set {_imageURL = newValue}
  }
  /// Returns true if `imageURL` has been explicitly set.
  var hasImageURL: Bool {return self._imageURL != nil}
  /// Clears the value of `imageURL`. Subsequent reads from it will return its default value.
  mutating func clearImageURL() {self._imageURL = nil}

  var playlistURL: String {
    get {return _playlistURL ?? String()}
    set {_playlistURL = newValue}
  }
  /// Returns true if `playlistURL` has been explicitly set.
  var hasPlaylistURL: Bool {return self._playlistURL != nil}
  /// Clears the value of `playlistURL`. Subsequent reads from it will return its default value.
  mutating func clearPlaylistURL() {self._playlistURL = nil}

  var interval: Int32 {
    get {return _interval ?? 0}
    set {_interval = newValue}
  }
  /// Returns true if `interval` has been explicitly set.
  var hasInterval: Bool {return self._interval != nil}
  /// Clears the value of `interval`. Subsequent reads from it will return its default value.
  mutating func clearInterval() {self._interval = nil}

  var cols: Int32 {
    get {return _cols ?? 0}
    set {_cols = newValue}
  }
  /// Returns true if `cols` has been explicitly set.
  var hasCols: Bool {return self._cols != nil}
  /// Clears the value of `cols`. Subsequent reads from it will return its default value.
  mutating func clearCols() {self._cols = nil}

  var rows: Int32 {
    get {return _rows ?? 0}
    set {_rows = newValue}
  }
  /// Returns true if `rows` has been explicitly set.
  var hasRows: Bool {return self._rows != nil}
  /// Clears the value of `rows`. Subsequent reads from it will return its default value.
  mutating func clearRows() {self._rows = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _imageURL: String? = nil
  fileprivate var _playlistURL: String? = nil
  fileprivate var _interval: Int32? = nil
  fileprivate var _cols: Int32? = nil
  fileprivate var _rows: Int32? = nil
}

struct MovieService_GetCollectionMoviesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var auth: String {
    get {return _auth ?? String()}
    set {_auth = newValue}
  }
  /// Returns true if `auth` has been explicitly set.
  var hasAuth: Bool {return self._auth != nil}
  /// Clears the value of `auth`. Subsequent reads from it will return its default value.
  mutating func clearAuth() {self._auth = nil}

  var collectionID: Int32 {
    get {return _collectionID ?? 0}
    set {_collectionID = newValue}
  }
  /// Returns true if `collectionID` has been explicitly set.
  var hasCollectionID: Bool {return self._collectionID != nil}
  /// Clears the value of `collectionID`. Subsequent reads from it will return its default value.
  mutating func clearCollectionID() {self._collectionID = nil}

  var includeHidden: Bool {
    get {return _includeHidden ?? false}
    set {_includeHidden = newValue}
  }
  /// Returns true if `includeHidden` has been explicitly set.
  var hasIncludeHidden: Bool {return self._includeHidden != nil}
  /// Clears the value of `includeHidden`. Subsequent reads from it will return its default value.
  mutating func clearIncludeHidden() {self._includeHidden = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _auth: String? = nil
  fileprivate var _collectionID: Int32? = nil
  fileprivate var _includeHidden: Bool? = nil
}

struct MovieService_GetCollectionMoviesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var result: MovieService_GetCollectionMoviesResponse.Result {
    get {return _result ?? .ok}
    set {_result = newValue}
  }
  /// Returns true if `result` has been explicitly set.
  var hasResult: Bool {return self._result != nil}
  /// Clears the value of `result`. Subsequent reads from it will return its default value.
  mutating func clearResult() {self._result = nil}

  var movies: [Int32] = []

  var title: String {
    get {return _title ?? String()}
    set {_title = newValue}
  }
  /// Returns true if `title` has been explicitly set.
  var hasTitle: Bool {return self._title != nil}
  /// Clears the value of `title`. Subsequent reads from it will return its default value.
  mutating func clearTitle() {self._title = nil}

  var slug: String {
    get {return _slug ?? String()}
    set {_slug = newValue}
  }
  /// Returns true if `slug` has been explicitly set.
  var hasSlug: Bool {return self._slug != nil}
  /// Clears the value of `slug`. Subsequent reads from it will return its default value.
  mutating func clearSlug() {self._slug = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Result: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case ok // = 0
    case noAuth // = 1

    init() {
      self = .ok
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ok
      case 1: self = .noAuth
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .ok: return 0
      case .noAuth: return 1
      }
    }

  }

  init() {}

  fileprivate var _result: MovieService_GetCollectionMoviesResponse.Result? = nil
  fileprivate var _title: String? = nil
  fileprivate var _slug: String? = nil
}

#if swift(>=4.2)

extension MovieService_GetCollectionMoviesResponse.Result: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct MovieService_GetPremiereMoviesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var auth: String {
    get {return _auth ?? String()}
    set {_auth = newValue}
  }
  /// Returns true if `auth` has been explicitly set.
  var hasAuth: Bool {return self._auth != nil}
  /// Clears the value of `auth`. Subsequent reads from it will return its default value.
  mutating func clearAuth() {self._auth = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _auth: String? = nil
}

struct MovieService_PremieresCollection {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int32 {
    get {return _id ?? 0}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {self._id = nil}

  var title: String {
    get {return _title ?? String()}
    set {_title = newValue}
  }
  /// Returns true if `title` has been explicitly set.
  var hasTitle: Bool {return self._title != nil}
  /// Clears the value of `title`. Subsequent reads from it will return its default value.
  mutating func clearTitle() {self._title = nil}

  var movies: [Int32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _id: Int32? = nil
  fileprivate var _title: String? = nil
}

struct MovieService_GetPremiereMoviesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var result: MovieService_GetPremiereMoviesResponse.Result {
    get {return _result ?? .ok}
    set {_result = newValue}
  }
  /// Returns true if `result` has been explicitly set.
  var hasResult: Bool {return self._result != nil}
  /// Clears the value of `result`. Subsequent reads from it will return its default value.
  mutating func clearResult() {self._result = nil}

  var collection: [MovieService_PremieresCollection] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Result: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case ok // = 0
    case noAuth // = 1

    init() {
      self = .ok
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ok
      case 1: self = .noAuth
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .ok: return 0
      case .noAuth: return 1
      }
    }

  }

  init() {}

  fileprivate var _result: MovieService_GetPremiereMoviesResponse.Result? = nil
}

#if swift(>=4.2)

extension MovieService_GetPremiereMoviesResponse.Result: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct MovieService_GetWatchListRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var auth: String {
    get {return _auth ?? String()}
    set {_auth = newValue}
  }
  /// Returns true if `auth` has been explicitly set.
  var hasAuth: Bool {return self._auth != nil}
  /// Clears the value of `auth`. Subsequent reads from it will return its default value.
  mutating func clearAuth() {self._auth = nil}

  var limit: Int32 {
    get {return _limit ?? 0}
    set {_limit = newValue}
  }
  /// Returns true if `limit` has been explicitly set.
  var hasLimit: Bool {return self._limit != nil}
  /// Clears the value of `limit`. Subsequent reads from it will return its default value.
  mutating func clearLimit() {self._limit = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _auth: String? = nil
  fileprivate var _limit: Int32? = nil
}

struct MovieService_GetWatchListResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var result: MovieService_GetWatchListResponse.Result {
    get {return _result ?? .ok}
    set {_result = newValue}
  }
  /// Returns true if `result` has been explicitly set.
  var hasResult: Bool {return self._result != nil}
  /// Clears the value of `result`. Subsequent reads from it will return its default value.
  mutating func clearResult() {self._result = nil}

  var movies: [Int32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Result: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case ok // = 0
    case noAuth // = 1

    init() {
      self = .ok
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ok
      case 1: self = .noAuth
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .ok: return 0
      case .noAuth: return 1
      }
    }

  }

  init() {}

  fileprivate var _result: MovieService_GetWatchListResponse.Result? = nil
}

#if swift(>=4.2)

extension MovieService_GetWatchListResponse.Result: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct MovieService_SetWatchInfoRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var auth: String {
    get {return _auth ?? String()}
    set {_auth = newValue}
  }
  /// Returns true if `auth` has been explicitly set.
  var hasAuth: Bool {return self._auth != nil}
  /// Clears the value of `auth`. Subsequent reads from it will return its default value.
  mutating func clearAuth() {self._auth = nil}

  var movieID: Int32 {
    get {return _movieID ?? 0}
    set {_movieID = newValue}
  }
  /// Returns true if `movieID` has been explicitly set.
  var hasMovieID: Bool {return self._movieID != nil}
  /// Clears the value of `movieID`. Subsequent reads from it will return its default value.
  mutating func clearMovieID() {self._movieID = nil}

  var episodeID: Int32 {
    get {return _episodeID ?? 0}
    set {_episodeID = newValue}
  }
  /// Returns true if `episodeID` has been explicitly set.
  var hasEpisodeID: Bool {return self._episodeID != nil}
  /// Clears the value of `episodeID`. Subsequent reads from it will return its default value.
  mutating func clearEpisodeID() {self._episodeID = nil}

  var info: MovieService_WatchInfo {
    get {return _info ?? MovieService_WatchInfo()}
    set {_info = newValue}
  }
  /// Returns true if `info` has been explicitly set.
  var hasInfo: Bool {return self._info != nil}
  /// Clears the value of `info`. Subsequent reads from it will return its default value.
  mutating func clearInfo() {self._info = nil}

  var position: Int32 {
    get {return _position ?? 0}
    set {_position = newValue}
  }
  /// Returns true if `position` has been explicitly set.
  var hasPosition: Bool {return self._position != nil}
  /// Clears the value of `position`. Subsequent reads from it will return its default value.
  mutating func clearPosition() {self._position = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _auth: String? = nil
  fileprivate var _movieID: Int32? = nil
  fileprivate var _episodeID: Int32? = nil
  fileprivate var _info: MovieService_WatchInfo? = nil
  fileprivate var _position: Int32? = nil
}

struct MovieService_SetWatchInfoResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var result: MovieService_SetWatchInfoResponse.Result {
    get {return _result ?? .ok}
    set {_result = newValue}
  }
  /// Returns true if `result` has been explicitly set.
  var hasResult: Bool {return self._result != nil}
  /// Clears the value of `result`. Subsequent reads from it will return its default value.
  mutating func clearResult() {self._result = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Result: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case ok // = 0
    case noAuth // = 1

    init() {
      self = .ok
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ok
      case 1: self = .noAuth
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .ok: return 0
      case .noAuth: return 1
      }
    }

  }

  init() {}

  fileprivate var _result: MovieService_SetWatchInfoResponse.Result? = nil
}

#if swift(>=4.2)

extension MovieService_SetWatchInfoResponse.Result: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct MovieService_ClearWatchInfoRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct MovieService_ClearWatchInfoResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var result: MovieService_ClearWatchInfoResponse.Result {
    get {return _result ?? .ok}
    set {_result = newValue}
  }
  /// Returns true if `result` has been explicitly set.
  var hasResult: Bool {return self._result != nil}
  /// Clears the value of `result`. Subsequent reads from it will return its default value.
  mutating func clearResult() {self._result = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Result: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case ok // = 0

    init() {
      self = .ok
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ok
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .ok: return 0
      }
    }

  }

  init() {}

  fileprivate var _result: MovieService_ClearWatchInfoResponse.Result? = nil
}

#if swift(>=4.2)

extension MovieService_ClearWatchInfoResponse.Result: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct MovieService_GetFavoriteMoviesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var auth: String {
    get {return _auth ?? String()}
    set {_auth = newValue}
  }
  /// Returns true if `auth` has been explicitly set.
  var hasAuth: Bool {return self._auth != nil}
  /// Clears the value of `auth`. Subsequent reads from it will return its default value.
  mutating func clearAuth() {self._auth = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _auth: String? = nil
}

struct MovieService_GetFavoriteMoviesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: MovieService_GetFavoriteMoviesResponse.Result {
    get {return _status ?? .ok}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  mutating func clearStatus() {self._status = nil}

  var movies: [Int32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Result: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case ok // = 0
    case noAuth // = 1

    init() {
      self = .ok
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ok
      case 1: self = .noAuth
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .ok: return 0
      case .noAuth: return 1
      }
    }

  }

  init() {}

  fileprivate var _status: MovieService_GetFavoriteMoviesResponse.Result? = nil
}

#if swift(>=4.2)

extension MovieService_GetFavoriteMoviesResponse.Result: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct MovieService_AddFavoriteMovieRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var auth: String {
    get {return _auth ?? String()}
    set {_auth = newValue}
  }
  /// Returns true if `auth` has been explicitly set.
  var hasAuth: Bool {return self._auth != nil}
  /// Clears the value of `auth`. Subsequent reads from it will return its default value.
  mutating func clearAuth() {self._auth = nil}

  var movieID: Int32 {
    get {return _movieID ?? 0}
    set {_movieID = newValue}
  }
  /// Returns true if `movieID` has been explicitly set.
  var hasMovieID: Bool {return self._movieID != nil}
  /// Clears the value of `movieID`. Subsequent reads from it will return its default value.
  mutating func clearMovieID() {self._movieID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _auth: String? = nil
  fileprivate var _movieID: Int32? = nil
}

struct MovieService_AddFavoriteMovieResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: MovieService_AddFavoriteMovieResponse.Result {
    get {return _status ?? .ok}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  mutating func clearStatus() {self._status = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Result: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case ok // = 0
    case noAuth // = 1

    init() {
      self = .ok
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ok
      case 1: self = .noAuth
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .ok: return 0
      case .noAuth: return 1
      }
    }

  }

  init() {}

  fileprivate var _status: MovieService_AddFavoriteMovieResponse.Result? = nil
}

#if swift(>=4.2)

extension MovieService_AddFavoriteMovieResponse.Result: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct MovieService_RemoveFavoriteMovieRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var auth: String {
    get {return _auth ?? String()}
    set {_auth = newValue}
  }
  /// Returns true if `auth` has been explicitly set.
  var hasAuth: Bool {return self._auth != nil}
  /// Clears the value of `auth`. Subsequent reads from it will return its default value.
  mutating func clearAuth() {self._auth = nil}

  var movieID: Int32 {
    get {return _movieID ?? 0}
    set {_movieID = newValue}
  }
  /// Returns true if `movieID` has been explicitly set.
  var hasMovieID: Bool {return self._movieID != nil}
  /// Clears the value of `movieID`. Subsequent reads from it will return its default value.
  mutating func clearMovieID() {self._movieID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _auth: String? = nil
  fileprivate var _movieID: Int32? = nil
}

struct MovieService_RemoveFavoriteMovieResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: MovieService_RemoveFavoriteMovieResponse.Result {
    get {return _status ?? .ok}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  mutating func clearStatus() {self._status = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Result: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case ok // = 0
    case noAuth // = 1

    init() {
      self = .ok
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ok
      case 1: self = .noAuth
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .ok: return 0
      case .noAuth: return 1
      }
    }

  }

  init() {}

  fileprivate var _status: MovieService_RemoveFavoriteMovieResponse.Result? = nil
}

#if swift(>=4.2)

extension MovieService_RemoveFavoriteMovieResponse.Result: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct MovieService_GetPremiereBannersRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var auth: String {
    get {return _auth ?? String()}
    set {_auth = newValue}
  }
  /// Returns true if `auth` has been explicitly set.
  var hasAuth: Bool {return self._auth != nil}
  /// Clears the value of `auth`. Subsequent reads from it will return its default value.
  mutating func clearAuth() {self._auth = nil}

  var page: MovieService_Page {
    get {return _page ?? .home}
    set {_page = newValue}
  }
  /// Returns true if `page` has been explicitly set.
  var hasPage: Bool {return self._page != nil}
  /// Clears the value of `page`. Subsequent reads from it will return its default value.
  mutating func clearPage() {self._page = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _auth: String? = nil
  fileprivate var _page: MovieService_Page? = nil
}

struct MovieService_GetPremiereBannersResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: MovieService_GetPremiereBannersResponse.Result {
    get {return _status ?? .ok}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  mutating func clearStatus() {self._status = nil}

  var banners: [MovieService_PremiereBanner] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Result: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case ok // = 0
    case noAuth // = 1

    init() {
      self = .ok
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ok
      case 1: self = .noAuth
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .ok: return 0
      case .noAuth: return 1
      }
    }

  }

  init() {}

  fileprivate var _status: MovieService_GetPremiereBannersResponse.Result? = nil
}

#if swift(>=4.2)

extension MovieService_GetPremiereBannersResponse.Result: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct MovieService_GetPurchasedMoviesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var auth: String {
    get {return _auth ?? String()}
    set {_auth = newValue}
  }
  /// Returns true if `auth` has been explicitly set.
  var hasAuth: Bool {return self._auth != nil}
  /// Clears the value of `auth`. Subsequent reads from it will return its default value.
  mutating func clearAuth() {self._auth = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _auth: String? = nil
}

struct MovieService_PromoBannerImage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var resolutionID: Int32 {
    get {return _resolutionID ?? 0}
    set {_resolutionID = newValue}
  }
  /// Returns true if `resolutionID` has been explicitly set.
  var hasResolutionID: Bool {return self._resolutionID != nil}
  /// Clears the value of `resolutionID`. Subsequent reads from it will return its default value.
  mutating func clearResolutionID() {self._resolutionID = nil}

  var url: String {
    get {return _url ?? String()}
    set {_url = newValue}
  }
  /// Returns true if `url` has been explicitly set.
  var hasURL: Bool {return self._url != nil}
  /// Clears the value of `url`. Subsequent reads from it will return its default value.
  mutating func clearURL() {self._url = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _resolutionID: Int32? = nil
  fileprivate var _url: String? = nil
}

struct MovieService_PromoBanner {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int32 {
    get {return _storage._id ?? 0}
    set {_uniqueStorage()._id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {_uniqueStorage()._id = nil}

  var imageURL: String {
    get {return _storage._imageURL ?? String()}
    set {_uniqueStorage()._imageURL = newValue}
  }
  /// Returns true if `imageURL` has been explicitly set.
  var hasImageURL: Bool {return _storage._imageURL != nil}
  /// Clears the value of `imageURL`. Subsequent reads from it will return its default value.
  mutating func clearImageURL() {_uniqueStorage()._imageURL = nil}

  var title: String {
    get {return _storage._title ?? String()}
    set {_uniqueStorage()._title = newValue}
  }
  /// Returns true if `title` has been explicitly set.
  var hasTitle: Bool {return _storage._title != nil}
  /// Clears the value of `title`. Subsequent reads from it will return its default value.
  mutating func clearTitle() {_uniqueStorage()._title = nil}

  var promoBannerAction: MovieService_PromoBannerAction {
    get {return _storage._promoBannerAction ?? .showChannel}
    set {_uniqueStorage()._promoBannerAction = newValue}
  }
  /// Returns true if `promoBannerAction` has been explicitly set.
  var hasPromoBannerAction: Bool {return _storage._promoBannerAction != nil}
  /// Clears the value of `promoBannerAction`. Subsequent reads from it will return its default value.
  mutating func clearPromoBannerAction() {_uniqueStorage()._promoBannerAction = nil}

  var contentID: Int32 {
    get {return _storage._contentID ?? 0}
    set {_uniqueStorage()._contentID = newValue}
  }
  /// Returns true if `contentID` has been explicitly set.
  var hasContentID: Bool {return _storage._contentID != nil}
  /// Clears the value of `contentID`. Subsequent reads from it will return its default value.
  mutating func clearContentID() {_uniqueStorage()._contentID = nil}

  var userTargeted: Bool {
    get {return _storage._userTargeted ?? false}
    set {_uniqueStorage()._userTargeted = newValue}
  }
  /// Returns true if `userTargeted` has been explicitly set.
  var hasUserTargeted: Bool {return _storage._userTargeted != nil}
  /// Clears the value of `userTargeted`. Subsequent reads from it will return its default value.
  mutating func clearUserTargeted() {_uniqueStorage()._userTargeted = nil}

  var slug: String {
    get {return _storage._slug ?? String()}
    set {_uniqueStorage()._slug = newValue}
  }
  /// Returns true if `slug` has been explicitly set.
  var hasSlug: Bool {return _storage._slug != nil}
  /// Clears the value of `slug`. Subsequent reads from it will return its default value.
  mutating func clearSlug() {_uniqueStorage()._slug = nil}

  var contentTitle: String {
    get {return _storage._contentTitle ?? String()}
    set {_uniqueStorage()._contentTitle = newValue}
  }
  /// Returns true if `contentTitle` has been explicitly set.
  var hasContentTitle: Bool {return _storage._contentTitle != nil}
  /// Clears the value of `contentTitle`. Subsequent reads from it will return its default value.
  mutating func clearContentTitle() {_uniqueStorage()._contentTitle = nil}

  var contentTagline: String {
    get {return _storage._contentTagline ?? String()}
    set {_uniqueStorage()._contentTagline = newValue}
  }
  /// Returns true if `contentTagline` has been explicitly set.
  var hasContentTagline: Bool {return _storage._contentTagline != nil}
  /// Clears the value of `contentTagline`. Subsequent reads from it will return its default value.
  mutating func clearContentTagline() {_uniqueStorage()._contentTagline = nil}

  var contentRating: Float {
    get {return _storage._contentRating ?? 0}
    set {_uniqueStorage()._contentRating = newValue}
  }
  /// Returns true if `contentRating` has been explicitly set.
  var hasContentRating: Bool {return _storage._contentRating != nil}
  /// Clears the value of `contentRating`. Subsequent reads from it will return its default value.
  mutating func clearContentRating() {_uniqueStorage()._contentRating = nil}

  var contentYear: Int32 {
    get {return _storage._contentYear ?? 0}
    set {_uniqueStorage()._contentYear = newValue}
  }
  /// Returns true if `contentYear` has been explicitly set.
  var hasContentYear: Bool {return _storage._contentYear != nil}
  /// Clears the value of `contentYear`. Subsequent reads from it will return its default value.
  mutating func clearContentYear() {_uniqueStorage()._contentYear = nil}

  var contentCountries: [Int32] {
    get {return _storage._contentCountries}
    set {_uniqueStorage()._contentCountries = newValue}
  }

  var contentGenres: [Int32] {
    get {return _storage._contentGenres}
    set {_uniqueStorage()._contentGenres = newValue}
  }

  var contentDuration: Int32 {
    get {return _storage._contentDuration ?? 0}
    set {_uniqueStorage()._contentDuration = newValue}
  }
  /// Returns true if `contentDuration` has been explicitly set.
  var hasContentDuration: Bool {return _storage._contentDuration != nil}
  /// Clears the value of `contentDuration`. Subsequent reads from it will return its default value.
  mutating func clearContentDuration() {_uniqueStorage()._contentDuration = nil}

  var epgID: Int32 {
    get {return _storage._epgID ?? 0}
    set {_uniqueStorage()._epgID = newValue}
  }
  /// Returns true if `epgID` has been explicitly set.
  var hasEpgID: Bool {return _storage._epgID != nil}
  /// Clears the value of `epgID`. Subsequent reads from it will return its default value.
  mutating func clearEpgID() {_uniqueStorage()._epgID = nil}

  var url: String {
    get {return _storage._url ?? String()}
    set {_uniqueStorage()._url = newValue}
  }
  /// Returns true if `url` has been explicitly set.
  var hasURL: Bool {return _storage._url != nil}
  /// Clears the value of `url`. Subsequent reads from it will return its default value.
  mutating func clearURL() {_uniqueStorage()._url = nil}

  var secondaryContentID: Int32 {
    get {return _storage._secondaryContentID ?? 0}
    set {_uniqueStorage()._secondaryContentID = newValue}
  }
  /// Returns true if `secondaryContentID` has been explicitly set.
  var hasSecondaryContentID: Bool {return _storage._secondaryContentID != nil}
  /// Clears the value of `secondaryContentID`. Subsequent reads from it will return its default value.
  mutating func clearSecondaryContentID() {_uniqueStorage()._secondaryContentID = nil}

  var sum: Float {
    get {return _storage._sum ?? 0}
    set {_uniqueStorage()._sum = newValue}
  }
  /// Returns true if `sum` has been explicitly set.
  var hasSum: Bool {return _storage._sum != nil}
  /// Clears the value of `sum`. Subsequent reads from it will return its default value.
  mutating func clearSum() {_uniqueStorage()._sum = nil}

  var contentList: [Int32] {
    get {return _storage._contentList}
    set {_uniqueStorage()._contentList = newValue}
  }

  var contentType: MovieService_PromoBanner.ContentType {
    get {return _storage._contentType ?? .movie}
    set {_uniqueStorage()._contentType = newValue}
  }
  /// Returns true if `contentType` has been explicitly set.
  var hasContentType: Bool {return _storage._contentType != nil}
  /// Clears the value of `contentType`. Subsequent reads from it will return its default value.
  mutating func clearContentType() {_uniqueStorage()._contentType = nil}

  var images: [MovieService_PromoBannerImage] {
    get {return _storage._images}
    set {_uniqueStorage()._images = newValue}
  }

  var ambilightColor: String {
    get {return _storage._ambilightColor ?? String()}
    set {_uniqueStorage()._ambilightColor = newValue}
  }
  /// Returns true if `ambilightColor` has been explicitly set.
  var hasAmbilightColor: Bool {return _storage._ambilightColor != nil}
  /// Clears the value of `ambilightColor`. Subsequent reads from it will return its default value.
  mutating func clearAmbilightColor() {_uniqueStorage()._ambilightColor = nil}

  var trailerURL: String {
    get {return _storage._trailerURL ?? String()}
    set {_uniqueStorage()._trailerURL = newValue}
  }
  /// Returns true if `trailerURL` has been explicitly set.
  var hasTrailerURL: Bool {return _storage._trailerURL != nil}
  /// Clears the value of `trailerURL`. Subsequent reads from it will return its default value.
  mutating func clearTrailerURL() {_uniqueStorage()._trailerURL = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum ContentType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case movie // = 0
    case channel // = 1

    init() {
      self = .movie
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .movie
      case 1: self = .channel
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .movie: return 0
      case .channel: return 1
      }
    }

  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension MovieService_PromoBanner.ContentType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct MovieService_GetPromoBannersRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var auth: String {
    get {return _auth ?? String()}
    set {_auth = newValue}
  }
  /// Returns true if `auth` has been explicitly set.
  var hasAuth: Bool {return self._auth != nil}
  /// Clears the value of `auth`. Subsequent reads from it will return its default value.
  mutating func clearAuth() {self._auth = nil}

  var page: MovieService_Page {
    get {return _page ?? .home}
    set {_page = newValue}
  }
  /// Returns true if `page` has been explicitly set.
  var hasPage: Bool {return self._page != nil}
  /// Clears the value of `page`. Subsequent reads from it will return its default value.
  mutating func clearPage() {self._page = nil}

  var needExtendedInfo: Bool {
    get {return _needExtendedInfo ?? false}
    set {_needExtendedInfo = newValue}
  }
  /// Returns true if `needExtendedInfo` has been explicitly set.
  var hasNeedExtendedInfo: Bool {return self._needExtendedInfo != nil}
  /// Clears the value of `needExtendedInfo`. Subsequent reads from it will return its default value.
  mutating func clearNeedExtendedInfo() {self._needExtendedInfo = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _auth: String? = nil
  fileprivate var _page: MovieService_Page? = nil
  fileprivate var _needExtendedInfo: Bool? = nil
}

struct MovieService_GetPromoBannersResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: MovieService_GetPromoBannersResponse.Result {
    get {return _status ?? .ok}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  mutating func clearStatus() {self._status = nil}

  var banners: [MovieService_PromoBanner] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Result: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case ok // = 0
    case noAuth // = 1

    init() {
      self = .ok
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ok
      case 1: self = .noAuth
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .ok: return 0
      case .noAuth: return 1
      }
    }

  }

  init() {}

  fileprivate var _status: MovieService_GetPromoBannersResponse.Result? = nil
}

#if swift(>=4.2)

extension MovieService_GetPromoBannersResponse.Result: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct MovieService_GetPurchasedMoviesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: MovieService_GetPurchasedMoviesResponse.Result {
    get {return _status ?? .ok}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  mutating func clearStatus() {self._status = nil}

  var movies: [Int32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Result: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case ok // = 0
    case noAuth // = 1

    init() {
      self = .ok
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ok
      case 1: self = .noAuth
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .ok: return 0
      case .noAuth: return 1
      }
    }

  }

  init() {}

  fileprivate var _status: MovieService_GetPurchasedMoviesResponse.Result? = nil
}

#if swift(>=4.2)

extension MovieService_GetPurchasedMoviesResponse.Result: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct MovieService_GetPersonInfoRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var auth: String {
    get {return _auth ?? String()}
    set {_auth = newValue}
  }
  /// Returns true if `auth` has been explicitly set.
  var hasAuth: Bool {return self._auth != nil}
  /// Clears the value of `auth`. Subsequent reads from it will return its default value.
  mutating func clearAuth() {self._auth = nil}

  var personID: Int32 {
    get {return _personID ?? 0}
    set {_personID = newValue}
  }
  /// Returns true if `personID` has been explicitly set.
  var hasPersonID: Bool {return self._personID != nil}
  /// Clears the value of `personID`. Subsequent reads from it will return its default value.
  mutating func clearPersonID() {self._personID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _auth: String? = nil
  fileprivate var _personID: Int32? = nil
}

struct MovieService_GetPersonInfoResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: MovieService_GetPersonInfoResponse.Result {
    get {return _status ?? .ok}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  mutating func clearStatus() {self._status = nil}

  var person: MovieService_Person {
    get {return _person ?? MovieService_Person()}
    set {_person = newValue}
  }
  /// Returns true if `person` has been explicitly set.
  var hasPerson: Bool {return self._person != nil}
  /// Clears the value of `person`. Subsequent reads from it will return its default value.
  mutating func clearPerson() {self._person = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Result: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case ok // = 0
    case noAuth // = 1

    init() {
      self = .ok
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ok
      case 1: self = .noAuth
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .ok: return 0
      case .noAuth: return 1
      }
    }

  }

  init() {}

  fileprivate var _status: MovieService_GetPersonInfoResponse.Result? = nil
  fileprivate var _person: MovieService_Person? = nil
}

#if swift(>=4.2)

extension MovieService_GetPersonInfoResponse.Result: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct MovieService_GetPersonsInfoRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var auth: String {
    get {return _auth ?? String()}
    set {_auth = newValue}
  }
  /// Returns true if `auth` has been explicitly set.
  var hasAuth: Bool {return self._auth != nil}
  /// Clears the value of `auth`. Subsequent reads from it will return its default value.
  mutating func clearAuth() {self._auth = nil}

  var persons: [Int32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _auth: String? = nil
}

struct MovieService_GetPersonsInfoResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: MovieService_GetPersonsInfoResponse.Result {
    get {return _status ?? .ok}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  mutating func clearStatus() {self._status = nil}

  var persons: [MovieService_Person] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Result: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case ok // = 0
    case noAuth // = 1

    init() {
      self = .ok
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ok
      case 1: self = .noAuth
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .ok: return 0
      case .noAuth: return 1
      }
    }

  }

  init() {}

  fileprivate var _status: MovieService_GetPersonsInfoResponse.Result? = nil
}

#if swift(>=4.2)

extension MovieService_GetPersonsInfoResponse.Result: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct MovieService_GetDownloadableMoviesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var auth: String {
    get {return _auth ?? String()}
    set {_auth = newValue}
  }
  /// Returns true if `auth` has been explicitly set.
  var hasAuth: Bool {return self._auth != nil}
  /// Clears the value of `auth`. Subsequent reads from it will return its default value.
  mutating func clearAuth() {self._auth = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _auth: String? = nil
}

struct MovieService_GetDownloadableMoviesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: MovieService_GetDownloadableMoviesResponse.Result {
    get {return _status ?? .ok}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  mutating func clearStatus() {self._status = nil}

  var movies: [Int32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Result: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case ok // = 0
    case noAuth // = 1

    init() {
      self = .ok
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ok
      case 1: self = .noAuth
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .ok: return 0
      case .noAuth: return 1
      }
    }

  }

  init() {}

  fileprivate var _status: MovieService_GetDownloadableMoviesResponse.Result? = nil
}

#if swift(>=4.2)

extension MovieService_GetDownloadableMoviesResponse.Result: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct MovieService_RateRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var auth: String {
    get {return _auth ?? String()}
    set {_auth = newValue}
  }
  /// Returns true if `auth` has been explicitly set.
  var hasAuth: Bool {return self._auth != nil}
  /// Clears the value of `auth`. Subsequent reads from it will return its default value.
  mutating func clearAuth() {self._auth = nil}

  var rating: MovieService_Rating {
    get {return _rating ?? .none}
    set {_rating = newValue}
  }
  /// Returns true if `rating` has been explicitly set.
  var hasRating: Bool {return self._rating != nil}
  /// Clears the value of `rating`. Subsequent reads from it will return its default value.
  mutating func clearRating() {self._rating = nil}

  var movieID: Int32 {
    get {return _movieID ?? 0}
    set {_movieID = newValue}
  }
  /// Returns true if `movieID` has been explicitly set.
  var hasMovieID: Bool {return self._movieID != nil}
  /// Clears the value of `movieID`. Subsequent reads from it will return its default value.
  mutating func clearMovieID() {self._movieID = nil}

  var commentID: Int32 {
    get {return _commentID ?? 0}
    set {_commentID = newValue}
  }
  /// Returns true if `commentID` has been explicitly set.
  var hasCommentID: Bool {return self._commentID != nil}
  /// Clears the value of `commentID`. Subsequent reads from it will return its default value.
  mutating func clearCommentID() {self._commentID = nil}

  var accountID: UInt64 {
    get {return _accountID ?? 0}
    set {_accountID = newValue}
  }
  /// Returns true if `accountID` has been explicitly set.
  var hasAccountID: Bool {return self._accountID != nil}
  /// Clears the value of `accountID`. Subsequent reads from it will return its default value.
  mutating func clearAccountID() {self._accountID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _auth: String? = nil
  fileprivate var _rating: MovieService_Rating? = nil
  fileprivate var _movieID: Int32? = nil
  fileprivate var _commentID: Int32? = nil
  fileprivate var _accountID: UInt64? = nil
}

struct MovieService_RateResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: MovieService_RateResponse.Result {
    get {return _status ?? .ok}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  mutating func clearStatus() {self._status = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Result: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case ok // = 0
    case noAuth // = 1

    init() {
      self = .ok
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ok
      case 1: self = .noAuth
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .ok: return 0
      case .noAuth: return 1
      }
    }

  }

  init() {}

  fileprivate var _status: MovieService_RateResponse.Result? = nil
}

#if swift(>=4.2)

extension MovieService_RateResponse.Result: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct MovieService_GetCollectionsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var auth: String {
    get {return _auth ?? String()}
    set {_auth = newValue}
  }
  /// Returns true if `auth` has been explicitly set.
  var hasAuth: Bool {return self._auth != nil}
  /// Clears the value of `auth`. Subsequent reads from it will return its default value.
  mutating func clearAuth() {self._auth = nil}

  var type: MovieService_GetCollectionsRequest.TypeEnum {
    get {return _type ?? .home}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum TypeEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case home // = 0
    case movie // = 1
    case premiere // = 2
    case series // = 3
    case cartoon // = 4

    init() {
      self = .home
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .home
      case 1: self = .movie
      case 2: self = .premiere
      case 3: self = .series
      case 4: self = .cartoon
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .home: return 0
      case .movie: return 1
      case .premiere: return 2
      case .series: return 3
      case .cartoon: return 4
      }
    }

  }

  init() {}

  fileprivate var _auth: String? = nil
  fileprivate var _type: MovieService_GetCollectionsRequest.TypeEnum? = nil
}

#if swift(>=4.2)

extension MovieService_GetCollectionsRequest.TypeEnum: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct MovieService_GetCollectionsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var result: MovieService_GetCollectionsResponse.Result {
    get {return _result ?? .ok}
    set {_result = newValue}
  }
  /// Returns true if `result` has been explicitly set.
  var hasResult: Bool {return self._result != nil}
  /// Clears the value of `result`. Subsequent reads from it will return its default value.
  mutating func clearResult() {self._result = nil}

  var collection: [MovieService_Collection] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Result: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case ok // = 0
    case noAuth // = 1

    init() {
      self = .ok
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ok
      case 1: self = .noAuth
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .ok: return 0
      case .noAuth: return 1
      }
    }

  }

  init() {}

  fileprivate var _result: MovieService_GetCollectionsResponse.Result? = nil
}

#if swift(>=4.2)

extension MovieService_GetCollectionsResponse.Result: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct MovieService_PostCommentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var auth: String {
    get {return _auth ?? String()}
    set {_auth = newValue}
  }
  /// Returns true if `auth` has been explicitly set.
  var hasAuth: Bool {return self._auth != nil}
  /// Clears the value of `auth`. Subsequent reads from it will return its default value.
  mutating func clearAuth() {self._auth = nil}

  var movieID: Int32 {
    get {return _movieID ?? 0}
    set {_movieID = newValue}
  }
  /// Returns true if `movieID` has been explicitly set.
  var hasMovieID: Bool {return self._movieID != nil}
  /// Clears the value of `movieID`. Subsequent reads from it will return its default value.
  mutating func clearMovieID() {self._movieID = nil}

  var parentID: Int32 {
    get {return _parentID ?? 0}
    set {_parentID = newValue}
  }
  /// Returns true if `parentID` has been explicitly set.
  var hasParentID: Bool {return self._parentID != nil}
  /// Clears the value of `parentID`. Subsequent reads from it will return its default value.
  mutating func clearParentID() {self._parentID = nil}

  var text: String {
    get {return _text ?? String()}
    set {_text = newValue}
  }
  /// Returns true if `text` has been explicitly set.
  var hasText: Bool {return self._text != nil}
  /// Clears the value of `text`. Subsequent reads from it will return its default value.
  mutating func clearText() {self._text = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _auth: String? = nil
  fileprivate var _movieID: Int32? = nil
  fileprivate var _parentID: Int32? = nil
  fileprivate var _text: String? = nil
}

struct MovieService_PostCommentResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: MovieService_PostCommentResponse.Result {
    get {return _status ?? .ok}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  mutating func clearStatus() {self._status = nil}

  var message: String {
    get {return _message ?? String()}
    set {_message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  var hasMessage: Bool {return self._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  mutating func clearMessage() {self._message = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Result: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case ok // = 0
    case noAuth // = 1
    case error // = 2

    init() {
      self = .ok
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ok
      case 1: self = .noAuth
      case 2: self = .error
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .ok: return 0
      case .noAuth: return 1
      case .error: return 2
      }
    }

  }

  init() {}

  fileprivate var _status: MovieService_PostCommentResponse.Result? = nil
  fileprivate var _message: String? = nil
}

#if swift(>=4.2)

extension MovieService_PostCommentResponse.Result: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct MovieService_EditCommentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var auth: String {
    get {return _auth ?? String()}
    set {_auth = newValue}
  }
  /// Returns true if `auth` has been explicitly set.
  var hasAuth: Bool {return self._auth != nil}
  /// Clears the value of `auth`. Subsequent reads from it will return its default value.
  mutating func clearAuth() {self._auth = nil}

  var commentID: Int32 {
    get {return _commentID ?? 0}
    set {_commentID = newValue}
  }
  /// Returns true if `commentID` has been explicitly set.
  var hasCommentID: Bool {return self._commentID != nil}
  /// Clears the value of `commentID`. Subsequent reads from it will return its default value.
  mutating func clearCommentID() {self._commentID = nil}

  var text: String {
    get {return _text ?? String()}
    set {_text = newValue}
  }
  /// Returns true if `text` has been explicitly set.
  var hasText: Bool {return self._text != nil}
  /// Clears the value of `text`. Subsequent reads from it will return its default value.
  mutating func clearText() {self._text = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _auth: String? = nil
  fileprivate var _commentID: Int32? = nil
  fileprivate var _text: String? = nil
}

struct MovieService_EditCommentResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: MovieService_EditCommentResponse.Result {
    get {return _status ?? .ok}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  mutating func clearStatus() {self._status = nil}

  var message: String {
    get {return _message ?? String()}
    set {_message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  var hasMessage: Bool {return self._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  mutating func clearMessage() {self._message = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Result: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case ok // = 0
    case noAuth // = 1
    case error // = 2

    init() {
      self = .ok
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ok
      case 1: self = .noAuth
      case 2: self = .error
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .ok: return 0
      case .noAuth: return 1
      case .error: return 2
      }
    }

  }

  init() {}

  fileprivate var _status: MovieService_EditCommentResponse.Result? = nil
  fileprivate var _message: String? = nil
}

#if swift(>=4.2)

extension MovieService_EditCommentResponse.Result: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct MovieService_DeleteCommentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var auth: String {
    get {return _auth ?? String()}
    set {_auth = newValue}
  }
  /// Returns true if `auth` has been explicitly set.
  var hasAuth: Bool {return self._auth != nil}
  /// Clears the value of `auth`. Subsequent reads from it will return its default value.
  mutating func clearAuth() {self._auth = nil}

  var commentID: Int32 {
    get {return _commentID ?? 0}
    set {_commentID = newValue}
  }
  /// Returns true if `commentID` has been explicitly set.
  var hasCommentID: Bool {return self._commentID != nil}
  /// Clears the value of `commentID`. Subsequent reads from it will return its default value.
  mutating func clearCommentID() {self._commentID = nil}

  var movieID: Int32 {
    get {return _movieID ?? 0}
    set {_movieID = newValue}
  }
  /// Returns true if `movieID` has been explicitly set.
  var hasMovieID: Bool {return self._movieID != nil}
  /// Clears the value of `movieID`. Subsequent reads from it will return its default value.
  mutating func clearMovieID() {self._movieID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _auth: String? = nil
  fileprivate var _commentID: Int32? = nil
  fileprivate var _movieID: Int32? = nil
}

struct MovieService_DeleteCommentResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: MovieService_DeleteCommentResponse.Result {
    get {return _status ?? .ok}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  mutating func clearStatus() {self._status = nil}

  var message: String {
    get {return _message ?? String()}
    set {_message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  var hasMessage: Bool {return self._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  mutating func clearMessage() {self._message = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Result: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case ok // = 0
    case noAuth // = 1
    case error // = 2

    init() {
      self = .ok
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ok
      case 1: self = .noAuth
      case 2: self = .error
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .ok: return 0
      case .noAuth: return 1
      case .error: return 2
      }
    }

  }

  init() {}

  fileprivate var _status: MovieService_DeleteCommentResponse.Result? = nil
  fileprivate var _message: String? = nil
}

#if swift(>=4.2)

extension MovieService_DeleteCommentResponse.Result: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct MovieService_InternalCommentMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var action: MovieService_InternalCommentMessage.Action {
    get {return _action ?? .post}
    set {_action = newValue}
  }
  /// Returns true if `action` has been explicitly set.
  var hasAction: Bool {return self._action != nil}
  /// Clears the value of `action`. Subsequent reads from it will return its default value.
  mutating func clearAction() {self._action = nil}

  var movieID: Int32 {
    get {return _movieID ?? 0}
    set {_movieID = newValue}
  }
  /// Returns true if `movieID` has been explicitly set.
  var hasMovieID: Bool {return self._movieID != nil}
  /// Clears the value of `movieID`. Subsequent reads from it will return its default value.
  mutating func clearMovieID() {self._movieID = nil}

  var parentID: Int32 {
    get {return _parentID ?? 0}
    set {_parentID = newValue}
  }
  /// Returns true if `parentID` has been explicitly set.
  var hasParentID: Bool {return self._parentID != nil}
  /// Clears the value of `parentID`. Subsequent reads from it will return its default value.
  mutating func clearParentID() {self._parentID = nil}

  var commentID: Int32 {
    get {return _commentID ?? 0}
    set {_commentID = newValue}
  }
  /// Returns true if `commentID` has been explicitly set.
  var hasCommentID: Bool {return self._commentID != nil}
  /// Clears the value of `commentID`. Subsequent reads from it will return its default value.
  mutating func clearCommentID() {self._commentID = nil}

  var text: String {
    get {return _text ?? String()}
    set {_text = newValue}
  }
  /// Returns true if `text` has been explicitly set.
  var hasText: Bool {return self._text != nil}
  /// Clears the value of `text`. Subsequent reads from it will return its default value.
  mutating func clearText() {self._text = nil}

  var accountID: UInt64 {
    get {return _accountID ?? 0}
    set {_accountID = newValue}
  }
  /// Returns true if `accountID` has been explicitly set.
  var hasAccountID: Bool {return self._accountID != nil}
  /// Clears the value of `accountID`. Subsequent reads from it will return its default value.
  mutating func clearAccountID() {self._accountID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Action: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case post // = 0
    case edit // = 1
    case delete // = 2

    init() {
      self = .post
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .post
      case 1: self = .edit
      case 2: self = .delete
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .post: return 0
      case .edit: return 1
      case .delete: return 2
      }
    }

  }

  init() {}

  fileprivate var _action: MovieService_InternalCommentMessage.Action? = nil
  fileprivate var _movieID: Int32? = nil
  fileprivate var _parentID: Int32? = nil
  fileprivate var _commentID: Int32? = nil
  fileprivate var _text: String? = nil
  fileprivate var _accountID: UInt64? = nil
}

#if swift(>=4.2)

extension MovieService_InternalCommentMessage.Action: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct MovieService_Ad {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int32 {
    get {return _id ?? 0}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {self._id = nil}

  var type: MovieService_Ad.TypeEnum {
    get {return _type ?? .preroll}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  var mediaType: MovieService_Ad.MediaType {
    get {return _mediaType ?? .video}
    set {_mediaType = newValue}
  }
  /// Returns true if `mediaType` has been explicitly set.
  var hasMediaType: Bool {return self._mediaType != nil}
  /// Clears the value of `mediaType`. Subsequent reads from it will return its default value.
  mutating func clearMediaType() {self._mediaType = nil}

  var contentType: MovieService_Ad.ContentType {
    get {return _contentType ?? .movie}
    set {_contentType = newValue}
  }
  /// Returns true if `contentType` has been explicitly set.
  var hasContentType: Bool {return self._contentType != nil}
  /// Clears the value of `contentType`. Subsequent reads from it will return its default value.
  mutating func clearContentType() {self._contentType = nil}

  var startTime: Int64 {
    get {return _startTime ?? 0}
    set {_startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  var hasStartTime: Bool {return self._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  mutating func clearStartTime() {self._startTime = nil}

  var skippable: Bool {
    get {return _skippable ?? false}
    set {_skippable = newValue}
  }
  /// Returns true if `skippable` has been explicitly set.
  var hasSkippable: Bool {return self._skippable != nil}
  /// Clears the value of `skippable`. Subsequent reads from it will return its default value.
  mutating func clearSkippable() {self._skippable = nil}

  var skipOffset: Int32 {
    get {return _skipOffset ?? 0}
    set {_skipOffset = newValue}
  }
  /// Returns true if `skipOffset` has been explicitly set.
  var hasSkipOffset: Bool {return self._skipOffset != nil}
  /// Clears the value of `skipOffset`. Subsequent reads from it will return its default value.
  mutating func clearSkipOffset() {self._skipOffset = nil}

  var title: String {
    get {return _title ?? String()}
    set {_title = newValue}
  }
  /// Returns true if `title` has been explicitly set.
  var hasTitle: Bool {return self._title != nil}
  /// Clears the value of `title`. Subsequent reads from it will return its default value.
  mutating func clearTitle() {self._title = nil}

  var description_p: String {
    get {return _description_p ?? String()}
    set {_description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  var hasDescription_p: Bool {return self._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  mutating func clearDescription_p() {self._description_p = nil}

  var contentURL: String {
    get {return _contentURL ?? String()}
    set {_contentURL = newValue}
  }
  /// Returns true if `contentURL` has been explicitly set.
  var hasContentURL: Bool {return self._contentURL != nil}
  /// Clears the value of `contentURL`. Subsequent reads from it will return its default value.
  mutating func clearContentURL() {self._contentURL = nil}

  var contentID: Int32 {
    get {return _contentID ?? 0}
    set {_contentID = newValue}
  }
  /// Returns true if `contentID` has been explicitly set.
  var hasContentID: Bool {return self._contentID != nil}
  /// Clears the value of `contentID`. Subsequent reads from it will return its default value.
  mutating func clearContentID() {self._contentID = nil}

  var vastURL: String {
    get {return _vastURL ?? String()}
    set {_vastURL = newValue}
  }
  /// Returns true if `vastURL` has been explicitly set.
  var hasVastURL: Bool {return self._vastURL != nil}
  /// Clears the value of `vastURL`. Subsequent reads from it will return its default value.
  mutating func clearVastURL() {self._vastURL = nil}

  var order: Int32 {
    get {return _order ?? 0}
    set {_order = newValue}
  }
  /// Returns true if `order` has been explicitly set.
  var hasOrder: Bool {return self._order != nil}
  /// Clears the value of `order`. Subsequent reads from it will return its default value.
  mutating func clearOrder() {self._order = nil}

  var categoryID: Int32 {
    get {return _categoryID ?? 0}
    set {_categoryID = newValue}
  }
  /// Returns true if `categoryID` has been explicitly set.
  var hasCategoryID: Bool {return self._categoryID != nil}
  /// Clears the value of `categoryID`. Subsequent reads from it will return its default value.
  mutating func clearCategoryID() {self._categoryID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum MediaType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case video // = 0
    case image // = 1

    init() {
      self = .video
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .video
      case 1: self = .image
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .video: return 0
      case .image: return 1
      }
    }

  }

  enum ContentType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case movie // = 0
    case channel // = 1
    case general // = 2

    init() {
      self = .movie
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .movie
      case 1: self = .channel
      case 2: self = .general
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .movie: return 0
      case .channel: return 1
      case .general: return 2
      }
    }

  }

  enum TypeEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case preroll // = 0
    case midroll // = 1
    case postroll // = 2

    init() {
      self = .preroll
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .preroll
      case 1: self = .midroll
      case 2: self = .postroll
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .preroll: return 0
      case .midroll: return 1
      case .postroll: return 2
      }
    }

  }

  init() {}

  fileprivate var _id: Int32? = nil
  fileprivate var _type: MovieService_Ad.TypeEnum? = nil
  fileprivate var _mediaType: MovieService_Ad.MediaType? = nil
  fileprivate var _contentType: MovieService_Ad.ContentType? = nil
  fileprivate var _startTime: Int64? = nil
  fileprivate var _skippable: Bool? = nil
  fileprivate var _skipOffset: Int32? = nil
  fileprivate var _title: String? = nil
  fileprivate var _description_p: String? = nil
  fileprivate var _contentURL: String? = nil
  fileprivate var _contentID: Int32? = nil
  fileprivate var _vastURL: String? = nil
  fileprivate var _order: Int32? = nil
  fileprivate var _categoryID: Int32? = nil
}

#if swift(>=4.2)

extension MovieService_Ad.MediaType: CaseIterable {
  // Support synthesized by the compiler.
}

extension MovieService_Ad.ContentType: CaseIterable {
  // Support synthesized by the compiler.
}

extension MovieService_Ad.TypeEnum: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct MovieService_Filter {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int32 {
    get {return _id ?? 0}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {self._id = nil}

  var typeID: Int32 {
    get {return _typeID ?? 0}
    set {_typeID = newValue}
  }
  /// Returns true if `typeID` has been explicitly set.
  var hasTypeID: Bool {return self._typeID != nil}
  /// Clears the value of `typeID`. Subsequent reads from it will return its default value.
  mutating func clearTypeID() {self._typeID = nil}

  var genreID: Int32 {
    get {return _genreID ?? 0}
    set {_genreID = newValue}
  }
  /// Returns true if `genreID` has been explicitly set.
  var hasGenreID: Bool {return self._genreID != nil}
  /// Clears the value of `genreID`. Subsequent reads from it will return its default value.
  mutating func clearGenreID() {self._genreID = nil}

  var countryID: Int32 {
    get {return _countryID ?? 0}
    set {_countryID = newValue}
  }
  /// Returns true if `countryID` has been explicitly set.
  var hasCountryID: Bool {return self._countryID != nil}
  /// Clears the value of `countryID`. Subsequent reads from it will return its default value.
  mutating func clearCountryID() {self._countryID = nil}

  var order: Int32 {
    get {return _order ?? 0}
    set {_order = newValue}
  }
  /// Returns true if `order` has been explicitly set.
  var hasOrder: Bool {return self._order != nil}
  /// Clears the value of `order`. Subsequent reads from it will return its default value.
  mutating func clearOrder() {self._order = nil}

  var text: String {
    get {return _text ?? String()}
    set {_text = newValue}
  }
  /// Returns true if `text` has been explicitly set.
  var hasText: Bool {return self._text != nil}
  /// Clears the value of `text`. Subsequent reads from it will return its default value.
  mutating func clearText() {self._text = nil}

  var yearFrom: Int32 {
    get {return _yearFrom ?? 0}
    set {_yearFrom = newValue}
  }
  /// Returns true if `yearFrom` has been explicitly set.
  var hasYearFrom: Bool {return self._yearFrom != nil}
  /// Clears the value of `yearFrom`. Subsequent reads from it will return its default value.
  mutating func clearYearFrom() {self._yearFrom = nil}

  var yearTill: Int32 {
    get {return _yearTill ?? 0}
    set {_yearTill = newValue}
  }
  /// Returns true if `yearTill` has been explicitly set.
  var hasYearTill: Bool {return self._yearTill != nil}
  /// Clears the value of `yearTill`. Subsequent reads from it will return its default value.
  mutating func clearYearTill() {self._yearTill = nil}

  var audioTrackLanguageID: Int32 {
    get {return _audioTrackLanguageID ?? 0}
    set {_audioTrackLanguageID = newValue}
  }
  /// Returns true if `audioTrackLanguageID` has been explicitly set.
  var hasAudioTrackLanguageID: Bool {return self._audioTrackLanguageID != nil}
  /// Clears the value of `audioTrackLanguageID`. Subsequent reads from it will return its default value.
  mutating func clearAudioTrackLanguageID() {self._audioTrackLanguageID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _id: Int32? = nil
  fileprivate var _typeID: Int32? = nil
  fileprivate var _genreID: Int32? = nil
  fileprivate var _countryID: Int32? = nil
  fileprivate var _order: Int32? = nil
  fileprivate var _text: String? = nil
  fileprivate var _yearFrom: Int32? = nil
  fileprivate var _yearTill: Int32? = nil
  fileprivate var _audioTrackLanguageID: Int32? = nil
}

struct MovieService_FilterGroup {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: MovieService_FilterGroup.TypeEnum {
    get {return _type ?? .genre}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  var title: String {
    get {return _title ?? String()}
    set {_title = newValue}
  }
  /// Returns true if `title` has been explicitly set.
  var hasTitle: Bool {return self._title != nil}
  /// Clears the value of `title`. Subsequent reads from it will return its default value.
  mutating func clearTitle() {self._title = nil}

  var filters: [MovieService_Filter] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum TypeEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case genre // = 0
    case downloadable // = 1
    case year // = 2
    case country // = 3
    case available // = 4
    case audiotrack // = 5

    init() {
      self = .genre
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .genre
      case 1: self = .downloadable
      case 2: self = .year
      case 3: self = .country
      case 4: self = .available
      case 5: self = .audiotrack
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .genre: return 0
      case .downloadable: return 1
      case .year: return 2
      case .country: return 3
      case .available: return 4
      case .audiotrack: return 5
      }
    }

  }

  init() {}

  fileprivate var _type: MovieService_FilterGroup.TypeEnum? = nil
  fileprivate var _title: String? = nil
}

#if swift(>=4.2)

extension MovieService_FilterGroup.TypeEnum: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct MovieService_GetFiltersRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var auth: String {
    get {return _auth ?? String()}
    set {_auth = newValue}
  }
  /// Returns true if `auth` has been explicitly set.
  var hasAuth: Bool {return self._auth != nil}
  /// Clears the value of `auth`. Subsequent reads from it will return its default value.
  mutating func clearAuth() {self._auth = nil}

  var selectedFilters: [MovieService_FilterGroup] = []

  var selectedGroup: MovieService_FilterGroup.TypeEnum {
    get {return _selectedGroup ?? .genre}
    set {_selectedGroup = newValue}
  }
  /// Returns true if `selectedGroup` has been explicitly set.
  var hasSelectedGroup: Bool {return self._selectedGroup != nil}
  /// Clears the value of `selectedGroup`. Subsequent reads from it will return its default value.
  mutating func clearSelectedGroup() {self._selectedGroup = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _auth: String? = nil
  fileprivate var _selectedGroup: MovieService_FilterGroup.TypeEnum? = nil
}

struct MovieService_GetFiltersResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: MovieService_GetFiltersResponse.Result {
    get {return _status ?? .ok}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  mutating func clearStatus() {self._status = nil}

  var filters: [MovieService_FilterGroup] = []

  var activeFilters: [Int32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Result: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case ok // = 0
    case noAuth // = 1

    init() {
      self = .ok
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ok
      case 1: self = .noAuth
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .ok: return 0
      case .noAuth: return 1
      }
    }

  }

  init() {}

  fileprivate var _status: MovieService_GetFiltersResponse.Result? = nil
}

#if swift(>=4.2)

extension MovieService_GetFiltersResponse.Result: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct MovieService_GetFilteredMoviesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var auth: String {
    get {return _auth ?? String()}
    set {_auth = newValue}
  }
  /// Returns true if `auth` has been explicitly set.
  var hasAuth: Bool {return self._auth != nil}
  /// Clears the value of `auth`. Subsequent reads from it will return its default value.
  mutating func clearAuth() {self._auth = nil}

  var filters: [Int32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _auth: String? = nil
}

struct MovieService_GetFilteredMoviesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: MovieService_GetFilteredMoviesResponse.Result {
    get {return _status ?? .ok}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  mutating func clearStatus() {self._status = nil}

  var movies: [Int32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Result: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case ok // = 0
    case noAuth // = 1

    init() {
      self = .ok
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ok
      case 1: self = .noAuth
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .ok: return 0
      case .noAuth: return 1
      }
    }

  }

  init() {}

  fileprivate var _status: MovieService_GetFilteredMoviesResponse.Result? = nil
}

#if swift(>=4.2)

extension MovieService_GetFilteredMoviesResponse.Result: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct MovieService_FilterOption {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int32 {
    get {return _id ?? 0}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {self._id = nil}

  var title: String {
    get {return _title ?? String()}
    set {_title = newValue}
  }
  /// Returns true if `title` has been explicitly set.
  var hasTitle: Bool {return self._title != nil}
  /// Clears the value of `title`. Subsequent reads from it will return its default value.
  mutating func clearTitle() {self._title = nil}

  var path: String {
    get {return _path ?? String()}
    set {_path = newValue}
  }
  /// Returns true if `path` has been explicitly set.
  var hasPath: Bool {return self._path != nil}
  /// Clears the value of `path`. Subsequent reads from it will return its default value.
  mutating func clearPath() {self._path = nil}

  var filters: [Int32] = []

  var slug: String {
    get {return _slug ?? String()}
    set {_slug = newValue}
  }
  /// Returns true if `slug` has been explicitly set.
  var hasSlug: Bool {return self._slug != nil}
  /// Clears the value of `slug`. Subsequent reads from it will return its default value.
  mutating func clearSlug() {self._slug = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _id: Int32? = nil
  fileprivate var _title: String? = nil
  fileprivate var _path: String? = nil
  fileprivate var _slug: String? = nil
}

struct MovieService_GetFilterOptionRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var auth: String {
    get {return _auth ?? String()}
    set {_auth = newValue}
  }
  /// Returns true if `auth` has been explicitly set.
  var hasAuth: Bool {return self._auth != nil}
  /// Clears the value of `auth`. Subsequent reads from it will return its default value.
  mutating func clearAuth() {self._auth = nil}

  var filterOptionID: Int32 {
    get {return _filterOptionID ?? 0}
    set {_filterOptionID = newValue}
  }
  /// Returns true if `filterOptionID` has been explicitly set.
  var hasFilterOptionID: Bool {return self._filterOptionID != nil}
  /// Clears the value of `filterOptionID`. Subsequent reads from it will return its default value.
  mutating func clearFilterOptionID() {self._filterOptionID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _auth: String? = nil
  fileprivate var _filterOptionID: Int32? = nil
}

struct MovieService_GetFilterOptionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: MovieService_GetFilterOptionResponse.Result {
    get {return _status ?? .ok}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  mutating func clearStatus() {self._status = nil}

  var filterOption: MovieService_FilterOption {
    get {return _filterOption ?? MovieService_FilterOption()}
    set {_filterOption = newValue}
  }
  /// Returns true if `filterOption` has been explicitly set.
  var hasFilterOption: Bool {return self._filterOption != nil}
  /// Clears the value of `filterOption`. Subsequent reads from it will return its default value.
  mutating func clearFilterOption() {self._filterOption = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Result: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case ok // = 0
    case noAuth // = 1

    init() {
      self = .ok
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ok
      case 1: self = .noAuth
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .ok: return 0
      case .noAuth: return 1
      }
    }

  }

  init() {}

  fileprivate var _status: MovieService_GetFilterOptionResponse.Result? = nil
  fileprivate var _filterOption: MovieService_FilterOption? = nil
}

#if swift(>=4.2)

extension MovieService_GetFilterOptionResponse.Result: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct MovieService_NotifyMovieReleaseRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var movieID: Int32 {
    get {return _movieID ?? 0}
    set {_movieID = newValue}
  }
  /// Returns true if `movieID` has been explicitly set.
  var hasMovieID: Bool {return self._movieID != nil}
  /// Clears the value of `movieID`. Subsequent reads from it will return its default value.
  mutating func clearMovieID() {self._movieID = nil}

  var email: String {
    get {return _email ?? String()}
    set {_email = newValue}
  }
  /// Returns true if `email` has been explicitly set.
  var hasEmail: Bool {return self._email != nil}
  /// Clears the value of `email`. Subsequent reads from it will return its default value.
  mutating func clearEmail() {self._email = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _movieID: Int32? = nil
  fileprivate var _email: String? = nil
}

struct MovieService_NotifyMovieReleaseResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: MovieService_NotifyMovieReleaseResponse.Result {
    get {return _status ?? .ok}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  mutating func clearStatus() {self._status = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Result: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case ok // = 0
    case needEmail // = 1

    init() {
      self = .ok
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ok
      case 1: self = .needEmail
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .ok: return 0
      case .needEmail: return 1
      }
    }

  }

  init() {}

  fileprivate var _status: MovieService_NotifyMovieReleaseResponse.Result? = nil
}

#if swift(>=4.2)

extension MovieService_NotifyMovieReleaseResponse.Result: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct MovieService_GetRecommendationsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct MovieService_GetRecommendationsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var recommendations: [MovieService_Recommendation] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "movie_service"

extension MovieService_LinkType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "HLS"),
    1: .same(proto: "DASH"),
    2: .same(proto: "MSS"),
  ]
}

extension MovieService_Page: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "HOME"),
    1: .same(proto: "MOVIE"),
    2: .same(proto: "PREMIERE"),
    3: .same(proto: "SERIES"),
    4: .same(proto: "CARTOON"),
  ]
}

extension MovieService_PromoBannerAction: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SHOW_CHANNEL"),
    1: .same(proto: "SHOW_MOVIE"),
    2: .same(proto: "SHOW_PREMIERE"),
    3: .same(proto: "SHOW_COLLECTION"),
    4: .same(proto: "PROPOSE_TARIFF"),
    5: .same(proto: "PROPOSE_SUBSCRIPTION"),
    6: .same(proto: "PROPOSE_SERVICE"),
    7: .same(proto: "PROPOSE_PAYMENT"),
    8: .same(proto: "ENTER_PROMOCODE"),
    9: .same(proto: "ENTER_MOVIE_PROMOCODE"),
    10: .same(proto: "OPEN_WEB_SITE"),
    11: .same(proto: "RATE_APPLICATION"),
    12: .same(proto: "INVITE_FRIEND"),
    13: .same(proto: "BIND_NEW_DEVICE"),
    14: .same(proto: "OPEN_CHATBOT"),
    15: .same(proto: "FILL_USER_DATA"),
    16: .same(proto: "SHOW_INFO"),
    17: .same(proto: "SHOW_PROMOTIONS"),
    18: .same(proto: "SIGNUP_USER"),
    19: .same(proto: "START_TUTORIAL"),
  ]
}

extension MovieService_Rating: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "None"),
    1: .same(proto: "Like"),
    2: .same(proto: "Dislike"),
  ]
}

extension MovieService_Movie: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Movie"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "external_id_pairs"),
    3: .same(proto: "title"),
    4: .standard(proto: "title_en"),
    5: .same(proto: "description"),
    6: .same(proto: "year"),
    7: .same(proto: "duration"),
    8: .standard(proto: "age_limit"),
    9: .standard(proto: "poster_url"),
    10: .standard(proto: "rating_imdb"),
    11: .standard(proto: "rating_kinopoisk"),
    12: .same(proto: "categories"),
    13: .same(proto: "countries"),
    14: .same(proto: "genres"),
    15: .same(proto: "owners"),
    16: .same(proto: "people"),
    17: .same(proto: "seasons"),
    18: .same(proto: "available"),
    19: .same(proto: "tariffs"),
    20: .standard(proto: "is_favorite"),
    21: .standard(proto: "watch_info"),
    22: .same(proto: "offers"),
    23: .same(proto: "posters"),
    24: .standard(proto: "trailer_url"),
    25: .same(proto: "tagline"),
    26: .same(proto: "slug"),
    27: .same(proto: "downloadable"),
    28: .standard(proto: "recommended_movies"),
    29: .standard(proto: "audio_tracks"),
    30: .same(proto: "subtitles"),
    31: .same(proto: "statistics"),
    32: .standard(proto: "user_rating"),
    33: .standard(proto: "banner_url"),
    34: .same(proto: "comments"),
    35: .standard(proto: "release_date"),
    36: .same(proto: "released"),
    37: .standard(proto: "bought_period"),
    38: .standard(proto: "availability_info"),
    39: .standard(proto: "similar_movies"),
    40: .standard(proto: "end_credits"),
    41: .standard(proto: "rating_sweet_tv"),
    42: .standard(proto: "following_movies"),
    43: .standard(proto: "video_quality"),
    44: .standard(proto: "availability_info_color"),
  ]

  fileprivate class _StorageClass {
    var _id: Int32? = nil
    var _externalIDPairs: [MovieService_ExternalIdPair] = []
    var _title: String? = nil
    var _titleEn: String? = nil
    var _description_p: String? = nil
    var _year: Int32? = nil
    var _duration: Int32? = nil
    var _ageLimit: Int32? = nil
    var _posterURL: String? = nil
    var _ratingImdb: Float? = nil
    var _ratingKinopoisk: Float? = nil
    var _categories: [Int32] = []
    var _countries: [Int32] = []
    var _genres: [Int32] = []
    var _owners: [Int32] = []
    var _people: [MovieService_Person] = []
    var _seasons: [MovieService_Season] = []
    var _available: Bool? = nil
    var _tariffs: [Int32] = []
    var _isFavorite: Bool? = nil
    var _watchInfo: MovieService_WatchInfo? = nil
    var _offers: [MovieService_MovieOffer] = []
    var _posters: [MovieService_Poster] = []
    var _trailerURL: String? = nil
    var _tagline: String? = nil
    var _slug: String? = nil
    var _downloadable: Bool? = nil
    var _recommendedMovies: [Int32] = []
    var _audioTracks: [MovieService_AudioTrack] = []
    var _subtitles: [MovieService_Subtitle] = []
    var _statistics: MovieService_Statistics? = nil
    var _userRating: MovieService_Rating? = nil
    var _bannerURL: String? = nil
    var _comments: [MovieService_Comment] = []
    var _releaseDate: Int64? = nil
    var _released: Bool? = nil
    var _boughtPeriod: Int32? = nil
    var _availabilityInfo: String? = nil
    var _similarMovies: [Int32] = []
    var _endCredits: Int32? = nil
    var _ratingSweetTv: Float? = nil
    var _followingMovies: [Int32] = []
    var _videoQuality: Int32? = nil
    var _availabilityInfoColor: String? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _externalIDPairs = source._externalIDPairs
      _title = source._title
      _titleEn = source._titleEn
      _description_p = source._description_p
      _year = source._year
      _duration = source._duration
      _ageLimit = source._ageLimit
      _posterURL = source._posterURL
      _ratingImdb = source._ratingImdb
      _ratingKinopoisk = source._ratingKinopoisk
      _categories = source._categories
      _countries = source._countries
      _genres = source._genres
      _owners = source._owners
      _people = source._people
      _seasons = source._seasons
      _available = source._available
      _tariffs = source._tariffs
      _isFavorite = source._isFavorite
      _watchInfo = source._watchInfo
      _offers = source._offers
      _posters = source._posters
      _trailerURL = source._trailerURL
      _tagline = source._tagline
      _slug = source._slug
      _downloadable = source._downloadable
      _recommendedMovies = source._recommendedMovies
      _audioTracks = source._audioTracks
      _subtitles = source._subtitles
      _statistics = source._statistics
      _userRating = source._userRating
      _bannerURL = source._bannerURL
      _comments = source._comments
      _releaseDate = source._releaseDate
      _released = source._released
      _boughtPeriod = source._boughtPeriod
      _availabilityInfo = source._availabilityInfo
      _similarMovies = source._similarMovies
      _endCredits = source._endCredits
      _ratingSweetTv = source._ratingSweetTv
      _followingMovies = source._followingMovies
      _videoQuality = source._videoQuality
      _availabilityInfoColor = source._availabilityInfoColor
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id == nil {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._externalIDPairs) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._people) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._seasons) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._offers) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._posters) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._audioTracks) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._subtitles) {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt32Field(value: &_storage._id) }()
        case 2: try { try decoder.decodeRepeatedMessageField(value: &_storage._externalIDPairs) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._title) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._titleEn) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._description_p) }()
        case 6: try { try decoder.decodeSingularInt32Field(value: &_storage._year) }()
        case 7: try { try decoder.decodeSingularInt32Field(value: &_storage._duration) }()
        case 8: try { try decoder.decodeSingularInt32Field(value: &_storage._ageLimit) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._posterURL) }()
        case 10: try { try decoder.decodeSingularFloatField(value: &_storage._ratingImdb) }()
        case 11: try { try decoder.decodeSingularFloatField(value: &_storage._ratingKinopoisk) }()
        case 12: try { try decoder.decodeRepeatedInt32Field(value: &_storage._categories) }()
        case 13: try { try decoder.decodeRepeatedInt32Field(value: &_storage._countries) }()
        case 14: try { try decoder.decodeRepeatedInt32Field(value: &_storage._genres) }()
        case 15: try { try decoder.decodeRepeatedInt32Field(value: &_storage._owners) }()
        case 16: try { try decoder.decodeRepeatedMessageField(value: &_storage._people) }()
        case 17: try { try decoder.decodeRepeatedMessageField(value: &_storage._seasons) }()
        case 18: try { try decoder.decodeSingularBoolField(value: &_storage._available) }()
        case 19: try { try decoder.decodeRepeatedInt32Field(value: &_storage._tariffs) }()
        case 20: try { try decoder.decodeSingularBoolField(value: &_storage._isFavorite) }()
        case 21: try { try decoder.decodeSingularMessageField(value: &_storage._watchInfo) }()
        case 22: try { try decoder.decodeRepeatedMessageField(value: &_storage._offers) }()
        case 23: try { try decoder.decodeRepeatedMessageField(value: &_storage._posters) }()
        case 24: try { try decoder.decodeSingularStringField(value: &_storage._trailerURL) }()
        case 25: try { try decoder.decodeSingularStringField(value: &_storage._tagline) }()
        case 26: try { try decoder.decodeSingularStringField(value: &_storage._slug) }()
        case 27: try { try decoder.decodeSingularBoolField(value: &_storage._downloadable) }()
        case 28: try { try decoder.decodeRepeatedInt32Field(value: &_storage._recommendedMovies) }()
        case 29: try { try decoder.decodeRepeatedMessageField(value: &_storage._audioTracks) }()
        case 30: try { try decoder.decodeRepeatedMessageField(value: &_storage._subtitles) }()
        case 31: try { try decoder.decodeSingularMessageField(value: &_storage._statistics) }()
        case 32: try { try decoder.decodeSingularEnumField(value: &_storage._userRating) }()
        case 33: try { try decoder.decodeSingularStringField(value: &_storage._bannerURL) }()
        case 34: try { try decoder.decodeRepeatedMessageField(value: &_storage._comments) }()
        case 35: try { try decoder.decodeSingularSInt64Field(value: &_storage._releaseDate) }()
        case 36: try { try decoder.decodeSingularBoolField(value: &_storage._released) }()
        case 37: try { try decoder.decodeSingularInt32Field(value: &_storage._boughtPeriod) }()
        case 38: try { try decoder.decodeSingularStringField(value: &_storage._availabilityInfo) }()
        case 39: try { try decoder.decodeRepeatedInt32Field(value: &_storage._similarMovies) }()
        case 40: try { try decoder.decodeSingularInt32Field(value: &_storage._endCredits) }()
        case 41: try { try decoder.decodeSingularFloatField(value: &_storage._ratingSweetTv) }()
        case 42: try { try decoder.decodeRepeatedInt32Field(value: &_storage._followingMovies) }()
        case 43: try { try decoder.decodeSingularInt32Field(value: &_storage._videoQuality) }()
        case 44: try { try decoder.decodeSingularStringField(value: &_storage._availabilityInfoColor) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._id {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      if !_storage._externalIDPairs.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._externalIDPairs, fieldNumber: 2)
      }
      if let v = _storage._title {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
      if let v = _storage._titleEn {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      }
      if let v = _storage._description_p {
        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
      }
      if let v = _storage._year {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 6)
      }
      if let v = _storage._duration {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 7)
      }
      if let v = _storage._ageLimit {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 8)
      }
      if let v = _storage._posterURL {
        try visitor.visitSingularStringField(value: v, fieldNumber: 9)
      }
      if let v = _storage._ratingImdb {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 10)
      }
      if let v = _storage._ratingKinopoisk {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 11)
      }
      if !_storage._categories.isEmpty {
        try visitor.visitRepeatedInt32Field(value: _storage._categories, fieldNumber: 12)
      }
      if !_storage._countries.isEmpty {
        try visitor.visitRepeatedInt32Field(value: _storage._countries, fieldNumber: 13)
      }
      if !_storage._genres.isEmpty {
        try visitor.visitRepeatedInt32Field(value: _storage._genres, fieldNumber: 14)
      }
      if !_storage._owners.isEmpty {
        try visitor.visitRepeatedInt32Field(value: _storage._owners, fieldNumber: 15)
      }
      if !_storage._people.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._people, fieldNumber: 16)
      }
      if !_storage._seasons.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._seasons, fieldNumber: 17)
      }
      if let v = _storage._available {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 18)
      }
      if !_storage._tariffs.isEmpty {
        try visitor.visitRepeatedInt32Field(value: _storage._tariffs, fieldNumber: 19)
      }
      if let v = _storage._isFavorite {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 20)
      }
      if let v = _storage._watchInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      }
      if !_storage._offers.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._offers, fieldNumber: 22)
      }
      if !_storage._posters.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._posters, fieldNumber: 23)
      }
      if let v = _storage._trailerURL {
        try visitor.visitSingularStringField(value: v, fieldNumber: 24)
      }
      if let v = _storage._tagline {
        try visitor.visitSingularStringField(value: v, fieldNumber: 25)
      }
      if let v = _storage._slug {
        try visitor.visitSingularStringField(value: v, fieldNumber: 26)
      }
      if let v = _storage._downloadable {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 27)
      }
      if !_storage._recommendedMovies.isEmpty {
        try visitor.visitRepeatedInt32Field(value: _storage._recommendedMovies, fieldNumber: 28)
      }
      if !_storage._audioTracks.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._audioTracks, fieldNumber: 29)
      }
      if !_storage._subtitles.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._subtitles, fieldNumber: 30)
      }
      if let v = _storage._statistics {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 31)
      }
      if let v = _storage._userRating {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 32)
      }
      if let v = _storage._bannerURL {
        try visitor.visitSingularStringField(value: v, fieldNumber: 33)
      }
      if !_storage._comments.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._comments, fieldNumber: 34)
      }
      if let v = _storage._releaseDate {
        try visitor.visitSingularSInt64Field(value: v, fieldNumber: 35)
      }
      if let v = _storage._released {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 36)
      }
      if let v = _storage._boughtPeriod {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 37)
      }
      if let v = _storage._availabilityInfo {
        try visitor.visitSingularStringField(value: v, fieldNumber: 38)
      }
      if !_storage._similarMovies.isEmpty {
        try visitor.visitRepeatedInt32Field(value: _storage._similarMovies, fieldNumber: 39)
      }
      if let v = _storage._endCredits {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 40)
      }
      if let v = _storage._ratingSweetTv {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 41)
      }
      if !_storage._followingMovies.isEmpty {
        try visitor.visitRepeatedInt32Field(value: _storage._followingMovies, fieldNumber: 42)
      }
      if let v = _storage._videoQuality {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 43)
      }
      if let v = _storage._availabilityInfoColor {
        try visitor.visitSingularStringField(value: v, fieldNumber: 44)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_Movie, rhs: MovieService_Movie) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._externalIDPairs != rhs_storage._externalIDPairs {return false}
        if _storage._title != rhs_storage._title {return false}
        if _storage._titleEn != rhs_storage._titleEn {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._year != rhs_storage._year {return false}
        if _storage._duration != rhs_storage._duration {return false}
        if _storage._ageLimit != rhs_storage._ageLimit {return false}
        if _storage._posterURL != rhs_storage._posterURL {return false}
        if _storage._ratingImdb != rhs_storage._ratingImdb {return false}
        if _storage._ratingKinopoisk != rhs_storage._ratingKinopoisk {return false}
        if _storage._categories != rhs_storage._categories {return false}
        if _storage._countries != rhs_storage._countries {return false}
        if _storage._genres != rhs_storage._genres {return false}
        if _storage._owners != rhs_storage._owners {return false}
        if _storage._people != rhs_storage._people {return false}
        if _storage._seasons != rhs_storage._seasons {return false}
        if _storage._available != rhs_storage._available {return false}
        if _storage._tariffs != rhs_storage._tariffs {return false}
        if _storage._isFavorite != rhs_storage._isFavorite {return false}
        if _storage._watchInfo != rhs_storage._watchInfo {return false}
        if _storage._offers != rhs_storage._offers {return false}
        if _storage._posters != rhs_storage._posters {return false}
        if _storage._trailerURL != rhs_storage._trailerURL {return false}
        if _storage._tagline != rhs_storage._tagline {return false}
        if _storage._slug != rhs_storage._slug {return false}
        if _storage._downloadable != rhs_storage._downloadable {return false}
        if _storage._recommendedMovies != rhs_storage._recommendedMovies {return false}
        if _storage._audioTracks != rhs_storage._audioTracks {return false}
        if _storage._subtitles != rhs_storage._subtitles {return false}
        if _storage._statistics != rhs_storage._statistics {return false}
        if _storage._userRating != rhs_storage._userRating {return false}
        if _storage._bannerURL != rhs_storage._bannerURL {return false}
        if _storage._comments != rhs_storage._comments {return false}
        if _storage._releaseDate != rhs_storage._releaseDate {return false}
        if _storage._released != rhs_storage._released {return false}
        if _storage._boughtPeriod != rhs_storage._boughtPeriod {return false}
        if _storage._availabilityInfo != rhs_storage._availabilityInfo {return false}
        if _storage._similarMovies != rhs_storage._similarMovies {return false}
        if _storage._endCredits != rhs_storage._endCredits {return false}
        if _storage._ratingSweetTv != rhs_storage._ratingSweetTv {return false}
        if _storage._followingMovies != rhs_storage._followingMovies {return false}
        if _storage._videoQuality != rhs_storage._videoQuality {return false}
        if _storage._availabilityInfoColor != rhs_storage._availabilityInfoColor {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_Category: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Category"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "title"),
  ]

  public var isInitialized: Bool {
    if self._id == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self._id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._title) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._id {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._title {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_Category, rhs: MovieService_Category) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._title != rhs._title {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_Genre: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Genre"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "title"),
    3: .standard(proto: "icon_url"),
    4: .same(proto: "slug"),
    5: .standard(proto: "banner_url"),
    6: .standard(proto: "icon_v2_url"),
  ]

  public var isInitialized: Bool {
    if self._id == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self._id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._title) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._iconURL) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._slug) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._bannerURL) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self._iconV2URL) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._id {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._title {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._iconURL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._slug {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    if let v = self._bannerURL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    }
    if let v = self._iconV2URL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_Genre, rhs: MovieService_Genre) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._title != rhs._title {return false}
    if lhs._iconURL != rhs._iconURL {return false}
    if lhs._slug != rhs._slug {return false}
    if lhs._bannerURL != rhs._bannerURL {return false}
    if lhs._iconV2URL != rhs._iconV2URL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_Subgenre: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Subgenre"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "title"),
    3: .standard(proto: "icon_url"),
    4: .same(proto: "slug"),
    5: .standard(proto: "banner_url"),
    6: .standard(proto: "icon_v2_url"),
  ]

  public var isInitialized: Bool {
    if self._id == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self._id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._title) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._iconURL) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._slug) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._bannerURL) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self._iconV2URL) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._id {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._title {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._iconURL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._slug {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    if let v = self._bannerURL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    }
    if let v = self._iconV2URL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_Subgenre, rhs: MovieService_Subgenre) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._title != rhs._title {return false}
    if lhs._iconURL != rhs._iconURL {return false}
    if lhs._slug != rhs._slug {return false}
    if lhs._bannerURL != rhs._bannerURL {return false}
    if lhs._iconV2URL != rhs._iconV2URL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_Country: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Country"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "title"),
    3: .same(proto: "code"),
    4: .same(proto: "slug"),
  ]

  public var isInitialized: Bool {
    if self._id == nil {return false}
    if self._title == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self._id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._title) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._code) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._slug) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._id {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._title {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._code {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._slug {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_Country, rhs: MovieService_Country) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._title != rhs._title {return false}
    if lhs._code != rhs._code {return false}
    if lhs._slug != rhs._slug {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_Section: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Section"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "type"),
    3: .same(proto: "title"),
    4: .standard(proto: "icon_url"),
  ]

  public var isInitialized: Bool {
    if self._id == nil {return false}
    if self._type == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self._id) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self._type) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._title) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._iconURL) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._id {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }
    if let v = self._title {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._iconURL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_Section, rhs: MovieService_Section) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._type != rhs._type {return false}
    if lhs._title != rhs._title {return false}
    if lhs._iconURL != rhs._iconURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_Section.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MAIN"),
    1: .same(proto: "TV"),
    2: .same(proto: "CINEMA"),
    3: .same(proto: "PREMIERES"),
    4: .same(proto: "SERIES"),
    5: .same(proto: "CARTOONS"),
  ]
}

extension MovieService_BannerResolution: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BannerResolution"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "width"),
    3: .same(proto: "height"),
  ]

  public var isInitialized: Bool {
    if self._id == nil {return false}
    if self._width == nil {return false}
    if self._height == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self._id) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self._width) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self._height) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._id {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._width {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._height {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_BannerResolution, rhs: MovieService_BannerResolution) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._width != rhs._width {return false}
    if lhs._height != rhs._height {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_Poster: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Poster"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "poster_url"),
    2: .same(proto: "orientation"),
    3: .same(proto: "dimensions"),
    4: .same(proto: "blur"),
  ]

  public var isInitialized: Bool {
    if self._posterURL == nil {return false}
    if self._orientation == nil {return false}
    if self._dimensions == nil {return false}
    if let v = self._dimensions, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._posterURL) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self._orientation) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._dimensions) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self._blur) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._posterURL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._orientation {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }
    if let v = self._dimensions {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._blur {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_Poster, rhs: MovieService_Poster) -> Bool {
    if lhs._posterURL != rhs._posterURL {return false}
    if lhs._orientation != rhs._orientation {return false}
    if lhs._dimensions != rhs._dimensions {return false}
    if lhs._blur != rhs._blur {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_Poster.Orientation: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Horizontal"),
    1: .same(proto: "Vertical"),
  ]
}

extension MovieService_Poster.Dimensions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = MovieService_Poster.protoMessageName + ".Dimensions"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "width"),
    2: .same(proto: "height"),
  ]

  public var isInitialized: Bool {
    if self._width == nil {return false}
    if self._height == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self._width) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self._height) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._width {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._height {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_Poster.Dimensions, rhs: MovieService_Poster.Dimensions) -> Bool {
    if lhs._width != rhs._width {return false}
    if lhs._height != rhs._height {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_Person: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Person"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .standard(proto: "name_original"),
    4: .same(proto: "role"),
    5: .standard(proto: "image_url"),
    6: .same(proto: "biography"),
    7: .same(proto: "roles"),
    8: .same(proto: "movies"),
    9: .standard(proto: "banner_url"),
    10: .standard(proto: "place_of_birth"),
    11: .standard(proto: "date_of_birth"),
    12: .same(proto: "genres"),
    13: .same(proto: "slug"),
  ]

  public var isInitialized: Bool {
    if self._id == nil {return false}
    if let v = self._role, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.roles) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self._id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._nameOriginal) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._role) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._imageURL) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self._biography) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.roles) }()
      case 8: try { try decoder.decodeRepeatedInt32Field(value: &self.movies) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self._bannerURL) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self._placeOfBirth) }()
      case 11: try { try decoder.decodeSingularSInt64Field(value: &self._dateOfBirth) }()
      case 12: try { try decoder.decodeRepeatedInt32Field(value: &self.genres) }()
      case 13: try { try decoder.decodeSingularStringField(value: &self._slug) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._id {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._nameOriginal {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._role {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._imageURL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    }
    if let v = self._biography {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    }
    if !self.roles.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.roles, fieldNumber: 7)
    }
    if !self.movies.isEmpty {
      try visitor.visitRepeatedInt32Field(value: self.movies, fieldNumber: 8)
    }
    if let v = self._bannerURL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 9)
    }
    if let v = self._placeOfBirth {
      try visitor.visitSingularStringField(value: v, fieldNumber: 10)
    }
    if let v = self._dateOfBirth {
      try visitor.visitSingularSInt64Field(value: v, fieldNumber: 11)
    }
    if !self.genres.isEmpty {
      try visitor.visitRepeatedInt32Field(value: self.genres, fieldNumber: 12)
    }
    if let v = self._slug {
      try visitor.visitSingularStringField(value: v, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_Person, rhs: MovieService_Person) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._name != rhs._name {return false}
    if lhs._nameOriginal != rhs._nameOriginal {return false}
    if lhs._role != rhs._role {return false}
    if lhs._imageURL != rhs._imageURL {return false}
    if lhs._biography != rhs._biography {return false}
    if lhs.roles != rhs.roles {return false}
    if lhs.movies != rhs.movies {return false}
    if lhs._bannerURL != rhs._bannerURL {return false}
    if lhs._placeOfBirth != rhs._placeOfBirth {return false}
    if lhs._dateOfBirth != rhs._dateOfBirth {return false}
    if lhs.genres != rhs.genres {return false}
    if lhs._slug != rhs._slug {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_Role: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Role"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "title"),
  ]

  public var isInitialized: Bool {
    if self._id == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self._id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._title) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._id {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._title {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_Role, rhs: MovieService_Role) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._title != rhs._title {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_Season: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Season"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "title"),
    3: .same(proto: "episodes"),
    4: .standard(proto: "owner_id"),
    5: .standard(proto: "external_id"),
  ]

  public var isInitialized: Bool {
    if self._id == nil {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.episodes) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self._id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._title) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.episodes) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self._ownerID) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self._externalID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._id {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._title {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if !self.episodes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.episodes, fieldNumber: 3)
    }
    if let v = self._ownerID {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._externalID {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_Season, rhs: MovieService_Season) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._title != rhs._title {return false}
    if lhs.episodes != rhs.episodes {return false}
    if lhs._ownerID != rhs._ownerID {return false}
    if lhs._externalID != rhs._externalID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_Episode: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Episode"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "title"),
    3: .same(proto: "duration"),
    4: .standard(proto: "external_id"),
    5: .standard(proto: "watch_info"),
    6: .standard(proto: "preview_url"),
    7: .standard(proto: "end_credits"),
    8: .standard(proto: "audio_tracks"),
    9: .same(proto: "subtitles"),
  ]

  public var isInitialized: Bool {
    if self._id == nil {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.audioTracks) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.subtitles) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self._id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._title) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self._duration) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self._externalID) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._watchInfo) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self._previewURL) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self._endCredits) }()
      case 8: try { try decoder.decodeRepeatedMessageField(value: &self.audioTracks) }()
      case 9: try { try decoder.decodeRepeatedMessageField(value: &self.subtitles) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._id {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._title {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._duration {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._externalID {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._watchInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._previewURL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    }
    if let v = self._endCredits {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 7)
    }
    if !self.audioTracks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.audioTracks, fieldNumber: 8)
    }
    if !self.subtitles.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.subtitles, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_Episode, rhs: MovieService_Episode) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._title != rhs._title {return false}
    if lhs._duration != rhs._duration {return false}
    if lhs._externalID != rhs._externalID {return false}
    if lhs._watchInfo != rhs._watchInfo {return false}
    if lhs._previewURL != rhs._previewURL {return false}
    if lhs._endCredits != rhs._endCredits {return false}
    if lhs.audioTracks != rhs.audioTracks {return false}
    if lhs.subtitles != rhs.subtitles {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_Collection: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Collection"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "title"),
    3: .same(proto: "type"),
    4: .standard(proto: "id_list"),
    5: .same(proto: "slug"),
    6: .standard(proto: "item_list"),
    7: .standard(proto: "collection_list"),
    9: .standard(proto: "image_url"),
    10: .standard(proto: "dark_theme_image_url"),
    11: .same(proto: "action"),
    12: .same(proto: "closable"),
    13: .standard(proto: "secondary_id_list"),
  ]

  public var isInitialized: Bool {
    if self._id == nil {return false}
    if self._title == nil {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.collectionList) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self._id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._title) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self._type) }()
      case 4: try { try decoder.decodeRepeatedInt32Field(value: &self.idList) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._slug) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.itemList) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.collectionList) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self._imageURL) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self._darkThemeImageURL) }()
      case 11: try { try decoder.decodeSingularEnumField(value: &self._action) }()
      case 12: try { try decoder.decodeSingularBoolField(value: &self._closable) }()
      case 13: try { try decoder.decodeRepeatedInt32Field(value: &self.secondaryIDList) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._id {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._title {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    }
    if !self.idList.isEmpty {
      try visitor.visitRepeatedInt32Field(value: self.idList, fieldNumber: 4)
    }
    if let v = self._slug {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    }
    if !self.itemList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.itemList, fieldNumber: 6)
    }
    if !self.collectionList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.collectionList, fieldNumber: 7)
    }
    if let v = self._imageURL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 9)
    }
    if let v = self._darkThemeImageURL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 10)
    }
    if let v = self._action {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 11)
    }
    if let v = self._closable {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 12)
    }
    if !self.secondaryIDList.isEmpty {
      try visitor.visitRepeatedInt32Field(value: self.secondaryIDList, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_Collection, rhs: MovieService_Collection) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._title != rhs._title {return false}
    if lhs._type != rhs._type {return false}
    if lhs.idList != rhs.idList {return false}
    if lhs._slug != rhs._slug {return false}
    if lhs.itemList != rhs.itemList {return false}
    if lhs.collectionList != rhs.collectionList {return false}
    if lhs._imageURL != rhs._imageURL {return false}
    if lhs._darkThemeImageURL != rhs._darkThemeImageURL {return false}
    if lhs._action != rhs._action {return false}
    if lhs._closable != rhs._closable {return false}
    if lhs.secondaryIDList != rhs.secondaryIDList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_Collection.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Movie"),
    1: .same(proto: "Channel"),
    2: .same(proto: "Genre"),
    3: .same(proto: "Subgenre"),
    4: .same(proto: "Epg"),
    5: .same(proto: "Collection"),
    6: .same(proto: "Banner"),
    7: .same(proto: "Person"),
    8: .same(proto: "TvShow"),
  ]
}

extension MovieService_CollectionItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CollectionItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "secondary_id"),
    3: .same(proto: "title"),
    4: .same(proto: "genres"),
    5: .standard(proto: "image_url"),
    6: .standard(proto: "available_in"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self._id) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self._secondaryID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._title) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._genres) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._imageURL) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self._availableIn) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._id {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._secondaryID {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._title {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._genres {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    if let v = self._imageURL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    }
    if let v = self._availableIn {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_CollectionItem, rhs: MovieService_CollectionItem) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._secondaryID != rhs._secondaryID {return false}
    if lhs._title != rhs._title {return false}
    if lhs._genres != rhs._genres {return false}
    if lhs._imageURL != rhs._imageURL {return false}
    if lhs._availableIn != rhs._availableIn {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_SortMode: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SortMode"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "title"),
    3: .standard(proto: "icon_url"),
  ]

  public var isInitialized: Bool {
    if self._id == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self._id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._title) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._iconURL) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._id {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._title {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._iconURL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_SortMode, rhs: MovieService_SortMode) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._title != rhs._title {return false}
    if lhs._iconURL != rhs._iconURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_Period: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Period"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "rent_hours"),
    3: .standard(proto: "watch_hours"),
  ]

  public var isInitialized: Bool {
    if self._id == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self._id) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self._rentHours) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self._watchHours) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._id {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._rentHours {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._watchHours {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_Period, rhs: MovieService_Period) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._rentHours != rhs._rentHours {return false}
    if lhs._watchHours != rhs._watchHours {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_PremiereBanner: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PremiereBanner"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "image_url"),
    3: .same(proto: "title"),
    4: .standard(proto: "movie_id"),
  ]

  public var isInitialized: Bool {
    if self._id == nil {return false}
    if self._imageURL == nil {return false}
    if self._title == nil {return false}
    if self._movieID == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self._id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._imageURL) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._title) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self._movieID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._id {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._imageURL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._title {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._movieID {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_PremiereBanner, rhs: MovieService_PremiereBanner) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._imageURL != rhs._imageURL {return false}
    if lhs._title != rhs._title {return false}
    if lhs._movieID != rhs._movieID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_VideoQuality: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VideoQuality"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "description"),
    4: .standard(proto: "icon_url"),
  ]

  public var isInitialized: Bool {
    if self._id == nil {return false}
    if self._name == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self._id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._description_p) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._iconURL) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._id {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._description_p {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._iconURL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_VideoQuality, rhs: MovieService_VideoQuality) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._name != rhs._name {return false}
    if lhs._description_p != rhs._description_p {return false}
    if lhs._iconURL != rhs._iconURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_Language: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Language"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "title"),
    3: .standard(proto: "icon_url"),
    4: .standard(proto: "iso_code"),
    5: .same(proto: "slug"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self._id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._title) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._iconURL) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._isoCode) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._slug) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._id {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._title {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._iconURL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._isoCode {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    if let v = self._slug {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_Language, rhs: MovieService_Language) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._title != rhs._title {return false}
    if lhs._iconURL != rhs._iconURL {return false}
    if lhs._isoCode != rhs._isoCode {return false}
    if lhs._slug != rhs._slug {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_MovieOffer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MovieOffer"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "offer_type"),
    3: .standard(proto: "video_quality"),
    4: .same(proto: "title"),
    5: .standard(proto: "offer_icon"),
    6: .same(proto: "period"),
    7: .same(proto: "price"),
    8: .standard(proto: "product_id"),
    9: .standard(proto: "store_id"),
    10: .standard(proto: "store_status"),
    11: .same(proto: "discounted"),
    12: .standard(proto: "original_price"),
  ]

  fileprivate class _StorageClass {
    var _id: Int32? = nil
    var _offerType: MovieService_MovieOffer.OfferType? = nil
    var _videoQuality: MovieService_VideoQuality? = nil
    var _title: String? = nil
    var _offerIcon: String? = nil
    var _period: MovieService_Period? = nil
    var _price: Int32? = nil
    var _productID: String? = nil
    var _storeID: Int32? = nil
    var _storeStatus: Int32? = nil
    var _discounted: Bool? = nil
    var _originalPrice: Int32? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _offerType = source._offerType
      _videoQuality = source._videoQuality
      _title = source._title
      _offerIcon = source._offerIcon
      _period = source._period
      _price = source._price
      _productID = source._productID
      _storeID = source._storeID
      _storeStatus = source._storeStatus
      _discounted = source._discounted
      _originalPrice = source._originalPrice
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id == nil {return false}
      if _storage._offerType == nil {return false}
      if _storage._videoQuality == nil {return false}
      if _storage._title == nil {return false}
      if _storage._offerIcon == nil {return false}
      if _storage._period == nil {return false}
      if _storage._price == nil {return false}
      if _storage._productID == nil {return false}
      if let v = _storage._videoQuality, !v.isInitialized {return false}
      if let v = _storage._period, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt32Field(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularEnumField(value: &_storage._offerType) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._videoQuality) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._title) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._offerIcon) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._period) }()
        case 7: try { try decoder.decodeSingularInt32Field(value: &_storage._price) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._productID) }()
        case 9: try { try decoder.decodeSingularInt32Field(value: &_storage._storeID) }()
        case 10: try { try decoder.decodeSingularInt32Field(value: &_storage._storeStatus) }()
        case 11: try { try decoder.decodeSingularBoolField(value: &_storage._discounted) }()
        case 12: try { try decoder.decodeSingularInt32Field(value: &_storage._originalPrice) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._id {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._offerType {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
      }
      if let v = _storage._videoQuality {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._title {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      }
      if let v = _storage._offerIcon {
        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
      }
      if let v = _storage._period {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._price {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 7)
      }
      if let v = _storage._productID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 8)
      }
      if let v = _storage._storeID {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 9)
      }
      if let v = _storage._storeStatus {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 10)
      }
      if let v = _storage._discounted {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 11)
      }
      if let v = _storage._originalPrice {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 12)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_MovieOffer, rhs: MovieService_MovieOffer) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._offerType != rhs_storage._offerType {return false}
        if _storage._videoQuality != rhs_storage._videoQuality {return false}
        if _storage._title != rhs_storage._title {return false}
        if _storage._offerIcon != rhs_storage._offerIcon {return false}
        if _storage._period != rhs_storage._period {return false}
        if _storage._price != rhs_storage._price {return false}
        if _storage._productID != rhs_storage._productID {return false}
        if _storage._storeID != rhs_storage._storeID {return false}
        if _storage._storeStatus != rhs_storage._storeStatus {return false}
        if _storage._discounted != rhs_storage._discounted {return false}
        if _storage._originalPrice != rhs_storage._originalPrice {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_MovieOffer.OfferType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Buy"),
    1: .same(proto: "Rent"),
  ]
}

extension MovieService_AudioTrack: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AudioTrack"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "index"),
    2: .same(proto: "language"),
    3: .standard(proto: "sound_scheme"),
    4: .standard(proto: "iso_code"),
  ]

  public var isInitialized: Bool {
    if self._index == nil {return false}
    if self._language == nil {return false}
    if self._soundScheme == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self._index) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._language) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._soundScheme) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._isoCode) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._index {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._language {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._soundScheme {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._isoCode {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_AudioTrack, rhs: MovieService_AudioTrack) -> Bool {
    if lhs._index != rhs._index {return false}
    if lhs._language != rhs._language {return false}
    if lhs._soundScheme != rhs._soundScheme {return false}
    if lhs._isoCode != rhs._isoCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_Subtitle: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Subtitle"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "language"),
    2: .standard(proto: "iso_code"),
    3: .same(proto: "url"),
  ]

  public var isInitialized: Bool {
    if self._language == nil {return false}
    if self._isoCode == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._language) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._isoCode) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._url) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._language {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._isoCode {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._url {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_Subtitle, rhs: MovieService_Subtitle) -> Bool {
    if lhs._language != rhs._language {return false}
    if lhs._isoCode != rhs._isoCode {return false}
    if lhs._url != rhs._url {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_Statistics: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Statistics"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "like_count"),
    2: .standard(proto: "dislike_count"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self._likeCount) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self._dislikeCount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._likeCount {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._dislikeCount {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_Statistics, rhs: MovieService_Statistics) -> Bool {
    if lhs._likeCount != rhs._likeCount {return false}
    if lhs._dislikeCount != rhs._dislikeCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_Comment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Comment"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "author"),
    3: .same(proto: "text"),
    4: .same(proto: "editable"),
    5: .same(proto: "delible"),
    6: .same(proto: "statistics"),
    7: .standard(proto: "user_rating"),
    8: .same(proto: "replies"),
    9: .standard(proto: "created_at"),
    10: .standard(proto: "updated_at"),
    11: .same(proto: "rating"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self._id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._author) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._text) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self._editable) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self._delible) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._statistics) }()
      case 7: try { try decoder.decodeSingularEnumField(value: &self._userRating) }()
      case 8: try { try decoder.decodeRepeatedMessageField(value: &self.replies) }()
      case 9: try { try decoder.decodeSingularUInt64Field(value: &self._createdAt) }()
      case 10: try { try decoder.decodeSingularUInt64Field(value: &self._updatedAt) }()
      case 11: try { try decoder.decodeSingularFloatField(value: &self._rating) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._id {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._author {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._text {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._editable {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    }
    if let v = self._delible {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    }
    if let v = self._statistics {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._userRating {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 7)
    }
    if !self.replies.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.replies, fieldNumber: 8)
    }
    if let v = self._createdAt {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 9)
    }
    if let v = self._updatedAt {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 10)
    }
    if let v = self._rating {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_Comment, rhs: MovieService_Comment) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._author != rhs._author {return false}
    if lhs._text != rhs._text {return false}
    if lhs._editable != rhs._editable {return false}
    if lhs._delible != rhs._delible {return false}
    if lhs._statistics != rhs._statistics {return false}
    if lhs._userRating != rhs._userRating {return false}
    if lhs.replies != rhs.replies {return false}
    if lhs._createdAt != rhs._createdAt {return false}
    if lhs._updatedAt != rhs._updatedAt {return false}
    if lhs._rating != rhs._rating {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_Owner: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Owner"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "title"),
  ]

  public var isInitialized: Bool {
    if self._id == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self._id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._title) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._id {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._title {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_Owner, rhs: MovieService_Owner) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._title != rhs._title {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_Owner.Id: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Undefined"),
    1: .same(proto: "MEGOGO"),
    2: .same(proto: "Amedia"),
    3: .same(proto: "Sonar"),
    4: .same(proto: "IPMedia"),
    5: .same(proto: "ContinentTV"),
    6: .same(proto: "UTS"),
    7: .same(proto: "Viasat"),
    8: .same(proto: "ViasatPremium"),
    9: .same(proto: "BitMediaCom"),
    10: .same(proto: "StarLight"),
    11: .same(proto: "DigitalScreens"),
    12: .same(proto: "MostVideo"),
    1000: .same(proto: "SweetTVPremiere"),
    1001: .same(proto: "SweetTVMoldovaPremiere"),
  ]
}

extension MovieService_WatchInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WatchInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "last_pos"),
    2: .standard(proto: "last_pos_in_percents"),
    3: .standard(proto: "last_episode_id"),
    4: .standard(proto: "last_time"),
    5: .standard(proto: "referral_movie_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self._lastPos) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self._lastPosInPercents) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self._lastEpisodeID) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self._lastTime) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self._referralMovieID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._lastPos {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._lastPosInPercents {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._lastEpisodeID {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._lastTime {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 4)
    }
    if let v = self._referralMovieID {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_WatchInfo, rhs: MovieService_WatchInfo) -> Bool {
    if lhs._lastPos != rhs._lastPos {return false}
    if lhs._lastPosInPercents != rhs._lastPosInPercents {return false}
    if lhs._lastEpisodeID != rhs._lastEpisodeID {return false}
    if lhs._lastTime != rhs._lastTime {return false}
    if lhs._referralMovieID != rhs._referralMovieID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_ExternalIdPair: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ExternalIdPair"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "owner_id"),
    2: .standard(proto: "external_id"),
    3: .same(proto: "preferred"),
  ]

  public var isInitialized: Bool {
    if self._ownerID == nil {return false}
    if self._externalID == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self._ownerID) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self._externalID) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self._preferred) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._ownerID {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._externalID {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._preferred {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_ExternalIdPair, rhs: MovieService_ExternalIdPair) -> Bool {
    if lhs._ownerID != rhs._ownerID {return false}
    if lhs._externalID != rhs._externalID {return false}
    if lhs._preferred != rhs._preferred {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_Recommendation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Recommendation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .standard(proto: "content_id"),
    3: .standard(proto: "image_url"),
    4: .same(proto: "title"),
    5: .same(proto: "description"),
    6: .standard(proto: "trailer_url"),
    7: .standard(proto: "secondary_id"),
  ]

  public var isInitialized: Bool {
    if self._type == nil {return false}
    if self._contentID == nil {return false}
    if self._imageURL == nil {return false}
    if self._title == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._type) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self._contentID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._imageURL) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._title) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._description_p) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self._trailerURL) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self._secondaryID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if let v = self._contentID {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._imageURL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._title {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    if let v = self._description_p {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    }
    if let v = self._trailerURL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    }
    if let v = self._secondaryID {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_Recommendation, rhs: MovieService_Recommendation) -> Bool {
    if lhs._type != rhs._type {return false}
    if lhs._contentID != rhs._contentID {return false}
    if lhs._imageURL != rhs._imageURL {return false}
    if lhs._title != rhs._title {return false}
    if lhs._description_p != rhs._description_p {return false}
    if lhs._trailerURL != rhs._trailerURL {return false}
    if lhs._secondaryID != rhs._secondaryID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_Recommendation.RecommendationType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Channel"),
    2: .same(proto: "Movie"),
  ]
}

extension MovieService_GetGenreMoviesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetGenreMoviesRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "auth"),
    2: .standard(proto: "genre_id"),
  ]

  public var isInitialized: Bool {
    if self._genreID == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._auth) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self._genreID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._auth {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._genreID {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_GetGenreMoviesRequest, rhs: MovieService_GetGenreMoviesRequest) -> Bool {
    if lhs._auth != rhs._auth {return false}
    if lhs._genreID != rhs._genreID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_GetGenreMoviesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetGenreMoviesResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
    2: .same(proto: "movies"),
  ]

  public var isInitialized: Bool {
    if self._result == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._result) }()
      case 2: try { try decoder.decodeRepeatedInt32Field(value: &self.movies) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._result {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if !self.movies.isEmpty {
      try visitor.visitRepeatedInt32Field(value: self.movies, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_GetGenreMoviesResponse, rhs: MovieService_GetGenreMoviesResponse) -> Bool {
    if lhs._result != rhs._result {return false}
    if lhs.movies != rhs.movies {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_GetGenreMoviesResponse.Result: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
    1: .same(proto: "NoAuth"),
  ]
}

extension MovieService_GetSubgenreMoviesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetSubgenreMoviesRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "auth"),
    2: .standard(proto: "subgenre_id"),
  ]

  public var isInitialized: Bool {
    if self._subgenreID == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._auth) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self._subgenreID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._auth {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._subgenreID {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_GetSubgenreMoviesRequest, rhs: MovieService_GetSubgenreMoviesRequest) -> Bool {
    if lhs._auth != rhs._auth {return false}
    if lhs._subgenreID != rhs._subgenreID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_GetSubgenreMoviesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetSubgenreMoviesResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
    2: .same(proto: "movies"),
  ]

  public var isInitialized: Bool {
    if self._result == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._result) }()
      case 2: try { try decoder.decodeRepeatedInt32Field(value: &self.movies) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._result {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if !self.movies.isEmpty {
      try visitor.visitRepeatedInt32Field(value: self.movies, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_GetSubgenreMoviesResponse, rhs: MovieService_GetSubgenreMoviesResponse) -> Bool {
    if lhs._result != rhs._result {return false}
    if lhs.movies != rhs.movies {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_GetSubgenreMoviesResponse.Result: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
    1: .same(proto: "NoAuth"),
  ]
}

extension MovieService_GetMovieInfoRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetMovieInfoRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "auth"),
    2: .same(proto: "movies"),
    3: .same(proto: "offset"),
    4: .same(proto: "limit"),
    5: .standard(proto: "need_extended_info"),
    6: .standard(proto: "sort_mode_id"),
    7: .standard(proto: "need_bundle_offers"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._auth) }()
      case 2: try { try decoder.decodeRepeatedInt32Field(value: &self.movies) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self._offset) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self._limit) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self._needExtendedInfo) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self._sortModeID) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self._needBundleOffers) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._auth {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if !self.movies.isEmpty {
      try visitor.visitRepeatedInt32Field(value: self.movies, fieldNumber: 2)
    }
    if let v = self._offset {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._limit {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._needExtendedInfo {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    }
    if let v = self._sortModeID {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 6)
    }
    if let v = self._needBundleOffers {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_GetMovieInfoRequest, rhs: MovieService_GetMovieInfoRequest) -> Bool {
    if lhs._auth != rhs._auth {return false}
    if lhs.movies != rhs.movies {return false}
    if lhs._offset != rhs._offset {return false}
    if lhs._limit != rhs._limit {return false}
    if lhs._needExtendedInfo != rhs._needExtendedInfo {return false}
    if lhs._sortModeID != rhs._sortModeID {return false}
    if lhs._needBundleOffers != rhs._needBundleOffers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_GetMovieInfoResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetMovieInfoResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
    2: .same(proto: "movies"),
  ]

  public var isInitialized: Bool {
    if self._result == nil {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.movies) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._result) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.movies) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._result {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if !self.movies.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.movies, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_GetMovieInfoResponse, rhs: MovieService_GetMovieInfoResponse) -> Bool {
    if lhs._result != rhs._result {return false}
    if lhs.movies != rhs.movies {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_GetMovieInfoResponse.Result: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
    1: .same(proto: "NoAuth"),
  ]
}

extension MovieService_GetConfigurationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetConfigurationRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "auth"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._auth) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._auth {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_GetConfigurationRequest, rhs: MovieService_GetConfigurationRequest) -> Bool {
    if lhs._auth != rhs._auth {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_GetConfigurationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetConfigurationResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
    2: .same(proto: "categories"),
    3: .same(proto: "countries"),
    4: .same(proto: "genres"),
    5: .same(proto: "owners"),
    6: .same(proto: "roles"),
    7: .same(proto: "collections"),
    8: .standard(proto: "sort_modes"),
    9: .same(proto: "subgenres"),
    10: .standard(proto: "video_qualities"),
    11: .same(proto: "languages"),
    12: .same(proto: "sections"),
    13: .standard(proto: "banner_resolutions"),
  ]

  public var isInitialized: Bool {
    if self._result == nil {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.categories) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.countries) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.genres) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.owners) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.roles) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.collections) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.sortModes) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.subgenres) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.videoQualities) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.sections) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.bannerResolutions) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._result) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.categories) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.countries) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.genres) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.owners) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.roles) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.collections) }()
      case 8: try { try decoder.decodeRepeatedMessageField(value: &self.sortModes) }()
      case 9: try { try decoder.decodeRepeatedMessageField(value: &self.subgenres) }()
      case 10: try { try decoder.decodeRepeatedMessageField(value: &self.videoQualities) }()
      case 11: try { try decoder.decodeRepeatedMessageField(value: &self.languages) }()
      case 12: try { try decoder.decodeRepeatedMessageField(value: &self.sections) }()
      case 13: try { try decoder.decodeRepeatedMessageField(value: &self.bannerResolutions) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._result {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if !self.categories.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.categories, fieldNumber: 2)
    }
    if !self.countries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.countries, fieldNumber: 3)
    }
    if !self.genres.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.genres, fieldNumber: 4)
    }
    if !self.owners.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.owners, fieldNumber: 5)
    }
    if !self.roles.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.roles, fieldNumber: 6)
    }
    if !self.collections.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.collections, fieldNumber: 7)
    }
    if !self.sortModes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.sortModes, fieldNumber: 8)
    }
    if !self.subgenres.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.subgenres, fieldNumber: 9)
    }
    if !self.videoQualities.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.videoQualities, fieldNumber: 10)
    }
    if !self.languages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.languages, fieldNumber: 11)
    }
    if !self.sections.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.sections, fieldNumber: 12)
    }
    if !self.bannerResolutions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.bannerResolutions, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_GetConfigurationResponse, rhs: MovieService_GetConfigurationResponse) -> Bool {
    if lhs._result != rhs._result {return false}
    if lhs.categories != rhs.categories {return false}
    if lhs.countries != rhs.countries {return false}
    if lhs.genres != rhs.genres {return false}
    if lhs.owners != rhs.owners {return false}
    if lhs.roles != rhs.roles {return false}
    if lhs.collections != rhs.collections {return false}
    if lhs.sortModes != rhs.sortModes {return false}
    if lhs.subgenres != rhs.subgenres {return false}
    if lhs.videoQualities != rhs.videoQualities {return false}
    if lhs.languages != rhs.languages {return false}
    if lhs.sections != rhs.sections {return false}
    if lhs.bannerResolutions != rhs.bannerResolutions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_GetConfigurationResponse.Result: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
    1: .same(proto: "NoAuth"),
  ]
}

extension MovieService_GetRecommendedMoviesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetRecommendedMoviesRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "auth"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._auth) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._auth {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_GetRecommendedMoviesRequest, rhs: MovieService_GetRecommendedMoviesRequest) -> Bool {
    if lhs._auth != rhs._auth {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_GetRecommendedMoviesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetRecommendedMoviesResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "movies"),
  ]

  public var isInitialized: Bool {
    if self._status == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._status) }()
      case 2: try { try decoder.decodeRepeatedInt32Field(value: &self.movies) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if !self.movies.isEmpty {
      try visitor.visitRepeatedInt32Field(value: self.movies, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_GetRecommendedMoviesResponse, rhs: MovieService_GetRecommendedMoviesResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs.movies != rhs.movies {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_GetRecommendedMoviesResponse.Result: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
    1: .same(proto: "NoAuth"),
  ]
}

extension MovieService_GetLinkRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetLinkRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "auth"),
    2: .standard(proto: "movie_id"),
    3: .standard(proto: "owner_id"),
    4: .standard(proto: "episode_id"),
    5: .standard(proto: "session_id"),
    6: .standard(proto: "audio_track"),
    7: .same(proto: "subtitle"),
    8: .standard(proto: "preferred_link_type"),
    9: .standard(proto: "preview_mode"),
  ]

  public var isInitialized: Bool {
    if self._movieID == nil {return false}
    if self._ownerID == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._auth) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self._movieID) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self._ownerID) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self._episodeID) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._sessionID) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self._audioTrack) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self._subtitle) }()
      case 8: try { try decoder.decodeSingularEnumField(value: &self._preferredLinkType) }()
      case 9: try { try decoder.decodeSingularBoolField(value: &self._previewMode) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._auth {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._movieID {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._ownerID {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._episodeID {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._sessionID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    }
    if let v = self._audioTrack {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 6)
    }
    if let v = self._subtitle {
      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
    }
    if let v = self._preferredLinkType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 8)
    }
    if let v = self._previewMode {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_GetLinkRequest, rhs: MovieService_GetLinkRequest) -> Bool {
    if lhs._auth != rhs._auth {return false}
    if lhs._movieID != rhs._movieID {return false}
    if lhs._ownerID != rhs._ownerID {return false}
    if lhs._episodeID != rhs._episodeID {return false}
    if lhs._sessionID != rhs._sessionID {return false}
    if lhs._audioTrack != rhs._audioTrack {return false}
    if lhs._subtitle != rhs._subtitle {return false}
    if lhs._preferredLinkType != rhs._preferredLinkType {return false}
    if lhs._previewMode != rhs._previewMode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_GetLinkResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetLinkResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "url"),
    3: .same(proto: "ads"),
    4: .standard(proto: "ad_tag_url"),
    5: .standard(proto: "link_type"),
    6: .standard(proto: "drm_type"),
    7: .standard(proto: "license_server_url"),
    8: .same(proto: "thumbnails"),
    9: .same(proto: "mesh"),
    10: .standard(proto: "content_key"),
    11: .same(proto: "subtitles"),
    12: .standard(proto: "channel_id"),
    13: .standard(proto: "epg_id"),
  ]

  fileprivate class _StorageClass {
    var _status: MovieService_GetLinkResponse.Result? = nil
    var _url: String? = nil
    var _ads: [MovieService_Ad] = []
    var _adTagURL: String? = nil
    var _linkType: MovieService_LinkType? = nil
    var _drmType: MovieService_DRMType? = nil
    var _licenseServerURL: String? = nil
    var _thumbnails: MovieService_Thumbnails? = nil
    var _mesh: Bool? = nil
    var _contentKey: String? = nil
    var _subtitles: [MovieService_Subtitle] = []
    var _channelID: Int32? = nil
    var _epgID: Int32? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _url = source._url
      _ads = source._ads
      _adTagURL = source._adTagURL
      _linkType = source._linkType
      _drmType = source._drmType
      _licenseServerURL = source._licenseServerURL
      _thumbnails = source._thumbnails
      _mesh = source._mesh
      _contentKey = source._contentKey
      _subtitles = source._subtitles
      _channelID = source._channelID
      _epgID = source._epgID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status == nil {return false}
      if let v = _storage._thumbnails, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._subtitles) {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularEnumField(value: &_storage._status) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._url) }()
        case 3: try { try decoder.decodeRepeatedMessageField(value: &_storage._ads) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._adTagURL) }()
        case 5: try { try decoder.decodeSingularEnumField(value: &_storage._linkType) }()
        case 6: try { try decoder.decodeSingularEnumField(value: &_storage._drmType) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._licenseServerURL) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._thumbnails) }()
        case 9: try { try decoder.decodeSingularBoolField(value: &_storage._mesh) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._contentKey) }()
        case 11: try { try decoder.decodeRepeatedMessageField(value: &_storage._subtitles) }()
        case 12: try { try decoder.decodeSingularInt32Field(value: &_storage._channelID) }()
        case 13: try { try decoder.decodeSingularInt32Field(value: &_storage._epgID) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._status {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
      }
      if let v = _storage._url {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if !_storage._ads.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._ads, fieldNumber: 3)
      }
      if let v = _storage._adTagURL {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      }
      if let v = _storage._linkType {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
      }
      if let v = _storage._drmType {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 6)
      }
      if let v = _storage._licenseServerURL {
        try visitor.visitSingularStringField(value: v, fieldNumber: 7)
      }
      if let v = _storage._thumbnails {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._mesh {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
      }
      if let v = _storage._contentKey {
        try visitor.visitSingularStringField(value: v, fieldNumber: 10)
      }
      if !_storage._subtitles.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._subtitles, fieldNumber: 11)
      }
      if let v = _storage._channelID {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 12)
      }
      if let v = _storage._epgID {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 13)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_GetLinkResponse, rhs: MovieService_GetLinkResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._url != rhs_storage._url {return false}
        if _storage._ads != rhs_storage._ads {return false}
        if _storage._adTagURL != rhs_storage._adTagURL {return false}
        if _storage._linkType != rhs_storage._linkType {return false}
        if _storage._drmType != rhs_storage._drmType {return false}
        if _storage._licenseServerURL != rhs_storage._licenseServerURL {return false}
        if _storage._thumbnails != rhs_storage._thumbnails {return false}
        if _storage._mesh != rhs_storage._mesh {return false}
        if _storage._contentKey != rhs_storage._contentKey {return false}
        if _storage._subtitles != rhs_storage._subtitles {return false}
        if _storage._channelID != rhs_storage._channelID {return false}
        if _storage._epgID != rhs_storage._epgID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_GetLinkResponse.Result: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
    1: .same(proto: "NoAuth"),
    2: .same(proto: "ExternalError"),
    3: .same(proto: "NotFound"),
    4: .same(proto: "NeedDRM"),
  ]
}

extension MovieService_Thumbnails: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Thumbnails"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "image_url"),
    2: .standard(proto: "playlist_url"),
    3: .same(proto: "interval"),
    4: .same(proto: "cols"),
    5: .same(proto: "rows"),
  ]

  public var isInitialized: Bool {
    if self._imageURL == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._imageURL) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._playlistURL) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self._interval) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self._cols) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self._rows) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._imageURL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._playlistURL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._interval {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._cols {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._rows {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_Thumbnails, rhs: MovieService_Thumbnails) -> Bool {
    if lhs._imageURL != rhs._imageURL {return false}
    if lhs._playlistURL != rhs._playlistURL {return false}
    if lhs._interval != rhs._interval {return false}
    if lhs._cols != rhs._cols {return false}
    if lhs._rows != rhs._rows {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_GetCollectionMoviesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetCollectionMoviesRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "auth"),
    2: .standard(proto: "collection_id"),
    3: .standard(proto: "include_hidden"),
  ]

  public var isInitialized: Bool {
    if self._collectionID == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._auth) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self._collectionID) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self._includeHidden) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._auth {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._collectionID {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._includeHidden {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_GetCollectionMoviesRequest, rhs: MovieService_GetCollectionMoviesRequest) -> Bool {
    if lhs._auth != rhs._auth {return false}
    if lhs._collectionID != rhs._collectionID {return false}
    if lhs._includeHidden != rhs._includeHidden {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_GetCollectionMoviesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetCollectionMoviesResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
    2: .same(proto: "movies"),
    3: .same(proto: "title"),
    4: .same(proto: "slug"),
  ]

  public var isInitialized: Bool {
    if self._result == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._result) }()
      case 2: try { try decoder.decodeRepeatedInt32Field(value: &self.movies) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._title) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._slug) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._result {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if !self.movies.isEmpty {
      try visitor.visitRepeatedInt32Field(value: self.movies, fieldNumber: 2)
    }
    if let v = self._title {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._slug {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_GetCollectionMoviesResponse, rhs: MovieService_GetCollectionMoviesResponse) -> Bool {
    if lhs._result != rhs._result {return false}
    if lhs.movies != rhs.movies {return false}
    if lhs._title != rhs._title {return false}
    if lhs._slug != rhs._slug {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_GetCollectionMoviesResponse.Result: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
    1: .same(proto: "NoAuth"),
  ]
}

extension MovieService_GetPremiereMoviesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetPremiereMoviesRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "auth"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._auth) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._auth {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_GetPremiereMoviesRequest, rhs: MovieService_GetPremiereMoviesRequest) -> Bool {
    if lhs._auth != rhs._auth {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_PremieresCollection: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PremieresCollection"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "title"),
    3: .same(proto: "movies"),
  ]

  public var isInitialized: Bool {
    if self._id == nil {return false}
    if self._title == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self._id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._title) }()
      case 3: try { try decoder.decodeRepeatedInt32Field(value: &self.movies) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._id {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._title {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if !self.movies.isEmpty {
      try visitor.visitRepeatedInt32Field(value: self.movies, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_PremieresCollection, rhs: MovieService_PremieresCollection) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._title != rhs._title {return false}
    if lhs.movies != rhs.movies {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_GetPremiereMoviesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetPremiereMoviesResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
    2: .same(proto: "collection"),
  ]

  public var isInitialized: Bool {
    if self._result == nil {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.collection) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._result) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.collection) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._result {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if !self.collection.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.collection, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_GetPremiereMoviesResponse, rhs: MovieService_GetPremiereMoviesResponse) -> Bool {
    if lhs._result != rhs._result {return false}
    if lhs.collection != rhs.collection {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_GetPremiereMoviesResponse.Result: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
    1: .same(proto: "NoAuth"),
  ]
}

extension MovieService_GetWatchListRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetWatchListRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "auth"),
    2: .same(proto: "limit"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._auth) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self._limit) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._auth {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._limit {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_GetWatchListRequest, rhs: MovieService_GetWatchListRequest) -> Bool {
    if lhs._auth != rhs._auth {return false}
    if lhs._limit != rhs._limit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_GetWatchListResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetWatchListResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
    2: .same(proto: "movies"),
  ]

  public var isInitialized: Bool {
    if self._result == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._result) }()
      case 2: try { try decoder.decodeRepeatedInt32Field(value: &self.movies) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._result {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if !self.movies.isEmpty {
      try visitor.visitRepeatedInt32Field(value: self.movies, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_GetWatchListResponse, rhs: MovieService_GetWatchListResponse) -> Bool {
    if lhs._result != rhs._result {return false}
    if lhs.movies != rhs.movies {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_GetWatchListResponse.Result: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
    1: .same(proto: "NoAuth"),
  ]
}

extension MovieService_SetWatchInfoRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetWatchInfoRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "auth"),
    2: .standard(proto: "movie_id"),
    3: .standard(proto: "episode_id"),
    4: .same(proto: "info"),
    5: .same(proto: "position"),
  ]

  public var isInitialized: Bool {
    if self._movieID == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._auth) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self._movieID) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self._episodeID) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._info) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self._position) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._auth {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._movieID {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._episodeID {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._info {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._position {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_SetWatchInfoRequest, rhs: MovieService_SetWatchInfoRequest) -> Bool {
    if lhs._auth != rhs._auth {return false}
    if lhs._movieID != rhs._movieID {return false}
    if lhs._episodeID != rhs._episodeID {return false}
    if lhs._info != rhs._info {return false}
    if lhs._position != rhs._position {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_SetWatchInfoResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetWatchInfoResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
  ]

  public var isInitialized: Bool {
    if self._result == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._result) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._result {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_SetWatchInfoResponse, rhs: MovieService_SetWatchInfoResponse) -> Bool {
    if lhs._result != rhs._result {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_SetWatchInfoResponse.Result: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
    1: .same(proto: "NoAuth"),
  ]
}

extension MovieService_ClearWatchInfoRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ClearWatchInfoRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_ClearWatchInfoRequest, rhs: MovieService_ClearWatchInfoRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_ClearWatchInfoResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ClearWatchInfoResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
  ]

  public var isInitialized: Bool {
    if self._result == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._result) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._result {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_ClearWatchInfoResponse, rhs: MovieService_ClearWatchInfoResponse) -> Bool {
    if lhs._result != rhs._result {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_ClearWatchInfoResponse.Result: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
  ]
}

extension MovieService_GetFavoriteMoviesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetFavoriteMoviesRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "auth"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._auth) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._auth {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_GetFavoriteMoviesRequest, rhs: MovieService_GetFavoriteMoviesRequest) -> Bool {
    if lhs._auth != rhs._auth {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_GetFavoriteMoviesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetFavoriteMoviesResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "movies"),
  ]

  public var isInitialized: Bool {
    if self._status == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._status) }()
      case 2: try { try decoder.decodeRepeatedInt32Field(value: &self.movies) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if !self.movies.isEmpty {
      try visitor.visitRepeatedInt32Field(value: self.movies, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_GetFavoriteMoviesResponse, rhs: MovieService_GetFavoriteMoviesResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs.movies != rhs.movies {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_GetFavoriteMoviesResponse.Result: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
    1: .same(proto: "NoAuth"),
  ]
}

extension MovieService_AddFavoriteMovieRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AddFavoriteMovieRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "auth"),
    2: .standard(proto: "movie_id"),
  ]

  public var isInitialized: Bool {
    if self._movieID == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._auth) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self._movieID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._auth {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._movieID {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_AddFavoriteMovieRequest, rhs: MovieService_AddFavoriteMovieRequest) -> Bool {
    if lhs._auth != rhs._auth {return false}
    if lhs._movieID != rhs._movieID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_AddFavoriteMovieResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AddFavoriteMovieResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
  ]

  public var isInitialized: Bool {
    if self._status == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._status) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_AddFavoriteMovieResponse, rhs: MovieService_AddFavoriteMovieResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_AddFavoriteMovieResponse.Result: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
    1: .same(proto: "NoAuth"),
  ]
}

extension MovieService_RemoveFavoriteMovieRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RemoveFavoriteMovieRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "auth"),
    2: .standard(proto: "movie_id"),
  ]

  public var isInitialized: Bool {
    if self._movieID == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._auth) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self._movieID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._auth {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._movieID {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_RemoveFavoriteMovieRequest, rhs: MovieService_RemoveFavoriteMovieRequest) -> Bool {
    if lhs._auth != rhs._auth {return false}
    if lhs._movieID != rhs._movieID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_RemoveFavoriteMovieResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RemoveFavoriteMovieResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
  ]

  public var isInitialized: Bool {
    if self._status == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._status) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_RemoveFavoriteMovieResponse, rhs: MovieService_RemoveFavoriteMovieResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_RemoveFavoriteMovieResponse.Result: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
    1: .same(proto: "NoAuth"),
  ]
}

extension MovieService_GetPremiereBannersRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetPremiereBannersRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "auth"),
    2: .same(proto: "page"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._auth) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self._page) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._auth {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._page {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_GetPremiereBannersRequest, rhs: MovieService_GetPremiereBannersRequest) -> Bool {
    if lhs._auth != rhs._auth {return false}
    if lhs._page != rhs._page {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_GetPremiereBannersResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetPremiereBannersResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "banners"),
  ]

  public var isInitialized: Bool {
    if self._status == nil {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.banners) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._status) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.banners) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if !self.banners.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.banners, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_GetPremiereBannersResponse, rhs: MovieService_GetPremiereBannersResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs.banners != rhs.banners {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_GetPremiereBannersResponse.Result: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
    1: .same(proto: "NoAuth"),
  ]
}

extension MovieService_GetPurchasedMoviesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetPurchasedMoviesRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "auth"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._auth) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._auth {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_GetPurchasedMoviesRequest, rhs: MovieService_GetPurchasedMoviesRequest) -> Bool {
    if lhs._auth != rhs._auth {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_PromoBannerImage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PromoBannerImage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "resolution_id"),
    2: .same(proto: "url"),
  ]

  public var isInitialized: Bool {
    if self._resolutionID == nil {return false}
    if self._url == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self._resolutionID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._url) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._resolutionID {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._url {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_PromoBannerImage, rhs: MovieService_PromoBannerImage) -> Bool {
    if lhs._resolutionID != rhs._resolutionID {return false}
    if lhs._url != rhs._url {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_PromoBanner: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PromoBanner"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "image_url"),
    3: .same(proto: "title"),
    4: .standard(proto: "promo_banner_action"),
    5: .standard(proto: "content_id"),
    6: .standard(proto: "user_targeted"),
    7: .same(proto: "slug"),
    8: .standard(proto: "content_title"),
    9: .standard(proto: "content_tagline"),
    10: .standard(proto: "content_rating"),
    11: .standard(proto: "content_year"),
    12: .standard(proto: "content_countries"),
    13: .standard(proto: "content_genres"),
    14: .standard(proto: "content_duration"),
    15: .standard(proto: "epg_id"),
    16: .same(proto: "url"),
    17: .standard(proto: "secondary_content_id"),
    18: .same(proto: "sum"),
    19: .standard(proto: "content_list"),
    20: .standard(proto: "content_type"),
    21: .same(proto: "images"),
    22: .standard(proto: "ambilight_color"),
    23: .standard(proto: "trailer_url"),
  ]

  fileprivate class _StorageClass {
    var _id: Int32? = nil
    var _imageURL: String? = nil
    var _title: String? = nil
    var _promoBannerAction: MovieService_PromoBannerAction? = nil
    var _contentID: Int32? = nil
    var _userTargeted: Bool? = nil
    var _slug: String? = nil
    var _contentTitle: String? = nil
    var _contentTagline: String? = nil
    var _contentRating: Float? = nil
    var _contentYear: Int32? = nil
    var _contentCountries: [Int32] = []
    var _contentGenres: [Int32] = []
    var _contentDuration: Int32? = nil
    var _epgID: Int32? = nil
    var _url: String? = nil
    var _secondaryContentID: Int32? = nil
    var _sum: Float? = nil
    var _contentList: [Int32] = []
    var _contentType: MovieService_PromoBanner.ContentType? = nil
    var _images: [MovieService_PromoBannerImage] = []
    var _ambilightColor: String? = nil
    var _trailerURL: String? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _imageURL = source._imageURL
      _title = source._title
      _promoBannerAction = source._promoBannerAction
      _contentID = source._contentID
      _userTargeted = source._userTargeted
      _slug = source._slug
      _contentTitle = source._contentTitle
      _contentTagline = source._contentTagline
      _contentRating = source._contentRating
      _contentYear = source._contentYear
      _contentCountries = source._contentCountries
      _contentGenres = source._contentGenres
      _contentDuration = source._contentDuration
      _epgID = source._epgID
      _url = source._url
      _secondaryContentID = source._secondaryContentID
      _sum = source._sum
      _contentList = source._contentList
      _contentType = source._contentType
      _images = source._images
      _ambilightColor = source._ambilightColor
      _trailerURL = source._trailerURL
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id == nil {return false}
      if _storage._imageURL == nil {return false}
      if _storage._title == nil {return false}
      if _storage._promoBannerAction == nil {return false}
      if _storage._contentID == nil {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._images) {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt32Field(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._imageURL) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._title) }()
        case 4: try { try decoder.decodeSingularEnumField(value: &_storage._promoBannerAction) }()
        case 5: try { try decoder.decodeSingularInt32Field(value: &_storage._contentID) }()
        case 6: try { try decoder.decodeSingularBoolField(value: &_storage._userTargeted) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._slug) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._contentTitle) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._contentTagline) }()
        case 10: try { try decoder.decodeSingularFloatField(value: &_storage._contentRating) }()
        case 11: try { try decoder.decodeSingularInt32Field(value: &_storage._contentYear) }()
        case 12: try { try decoder.decodeRepeatedInt32Field(value: &_storage._contentCountries) }()
        case 13: try { try decoder.decodeRepeatedInt32Field(value: &_storage._contentGenres) }()
        case 14: try { try decoder.decodeSingularInt32Field(value: &_storage._contentDuration) }()
        case 15: try { try decoder.decodeSingularInt32Field(value: &_storage._epgID) }()
        case 16: try { try decoder.decodeSingularStringField(value: &_storage._url) }()
        case 17: try { try decoder.decodeSingularInt32Field(value: &_storage._secondaryContentID) }()
        case 18: try { try decoder.decodeSingularFloatField(value: &_storage._sum) }()
        case 19: try { try decoder.decodeRepeatedInt32Field(value: &_storage._contentList) }()
        case 20: try { try decoder.decodeSingularEnumField(value: &_storage._contentType) }()
        case 21: try { try decoder.decodeRepeatedMessageField(value: &_storage._images) }()
        case 22: try { try decoder.decodeSingularStringField(value: &_storage._ambilightColor) }()
        case 23: try { try decoder.decodeSingularStringField(value: &_storage._trailerURL) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._id {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._imageURL {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if let v = _storage._title {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
      if let v = _storage._promoBannerAction {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
      }
      if let v = _storage._contentID {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
      }
      if let v = _storage._userTargeted {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
      }
      if let v = _storage._slug {
        try visitor.visitSingularStringField(value: v, fieldNumber: 7)
      }
      if let v = _storage._contentTitle {
        try visitor.visitSingularStringField(value: v, fieldNumber: 8)
      }
      if let v = _storage._contentTagline {
        try visitor.visitSingularStringField(value: v, fieldNumber: 9)
      }
      if let v = _storage._contentRating {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 10)
      }
      if let v = _storage._contentYear {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 11)
      }
      if !_storage._contentCountries.isEmpty {
        try visitor.visitRepeatedInt32Field(value: _storage._contentCountries, fieldNumber: 12)
      }
      if !_storage._contentGenres.isEmpty {
        try visitor.visitRepeatedInt32Field(value: _storage._contentGenres, fieldNumber: 13)
      }
      if let v = _storage._contentDuration {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 14)
      }
      if let v = _storage._epgID {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 15)
      }
      if let v = _storage._url {
        try visitor.visitSingularStringField(value: v, fieldNumber: 16)
      }
      if let v = _storage._secondaryContentID {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 17)
      }
      if let v = _storage._sum {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 18)
      }
      if !_storage._contentList.isEmpty {
        try visitor.visitRepeatedInt32Field(value: _storage._contentList, fieldNumber: 19)
      }
      if let v = _storage._contentType {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 20)
      }
      if !_storage._images.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._images, fieldNumber: 21)
      }
      if let v = _storage._ambilightColor {
        try visitor.visitSingularStringField(value: v, fieldNumber: 22)
      }
      if let v = _storage._trailerURL {
        try visitor.visitSingularStringField(value: v, fieldNumber: 23)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_PromoBanner, rhs: MovieService_PromoBanner) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._imageURL != rhs_storage._imageURL {return false}
        if _storage._title != rhs_storage._title {return false}
        if _storage._promoBannerAction != rhs_storage._promoBannerAction {return false}
        if _storage._contentID != rhs_storage._contentID {return false}
        if _storage._userTargeted != rhs_storage._userTargeted {return false}
        if _storage._slug != rhs_storage._slug {return false}
        if _storage._contentTitle != rhs_storage._contentTitle {return false}
        if _storage._contentTagline != rhs_storage._contentTagline {return false}
        if _storage._contentRating != rhs_storage._contentRating {return false}
        if _storage._contentYear != rhs_storage._contentYear {return false}
        if _storage._contentCountries != rhs_storage._contentCountries {return false}
        if _storage._contentGenres != rhs_storage._contentGenres {return false}
        if _storage._contentDuration != rhs_storage._contentDuration {return false}
        if _storage._epgID != rhs_storage._epgID {return false}
        if _storage._url != rhs_storage._url {return false}
        if _storage._secondaryContentID != rhs_storage._secondaryContentID {return false}
        if _storage._sum != rhs_storage._sum {return false}
        if _storage._contentList != rhs_storage._contentList {return false}
        if _storage._contentType != rhs_storage._contentType {return false}
        if _storage._images != rhs_storage._images {return false}
        if _storage._ambilightColor != rhs_storage._ambilightColor {return false}
        if _storage._trailerURL != rhs_storage._trailerURL {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_PromoBanner.ContentType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MOVIE"),
    1: .same(proto: "CHANNEL"),
  ]
}

extension MovieService_GetPromoBannersRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetPromoBannersRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "auth"),
    2: .same(proto: "page"),
    3: .standard(proto: "need_extended_info"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._auth) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self._page) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self._needExtendedInfo) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._auth {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._page {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }
    if let v = self._needExtendedInfo {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_GetPromoBannersRequest, rhs: MovieService_GetPromoBannersRequest) -> Bool {
    if lhs._auth != rhs._auth {return false}
    if lhs._page != rhs._page {return false}
    if lhs._needExtendedInfo != rhs._needExtendedInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_GetPromoBannersResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetPromoBannersResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "banners"),
  ]

  public var isInitialized: Bool {
    if self._status == nil {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.banners) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._status) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.banners) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if !self.banners.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.banners, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_GetPromoBannersResponse, rhs: MovieService_GetPromoBannersResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs.banners != rhs.banners {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_GetPromoBannersResponse.Result: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
    1: .same(proto: "NoAuth"),
  ]
}

extension MovieService_GetPurchasedMoviesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetPurchasedMoviesResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "movies"),
  ]

  public var isInitialized: Bool {
    if self._status == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._status) }()
      case 2: try { try decoder.decodeRepeatedInt32Field(value: &self.movies) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if !self.movies.isEmpty {
      try visitor.visitRepeatedInt32Field(value: self.movies, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_GetPurchasedMoviesResponse, rhs: MovieService_GetPurchasedMoviesResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs.movies != rhs.movies {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_GetPurchasedMoviesResponse.Result: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
    1: .same(proto: "NoAuth"),
  ]
}

extension MovieService_GetPersonInfoRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetPersonInfoRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "auth"),
    2: .standard(proto: "person_id"),
  ]

  public var isInitialized: Bool {
    if self._personID == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._auth) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self._personID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._auth {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._personID {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_GetPersonInfoRequest, rhs: MovieService_GetPersonInfoRequest) -> Bool {
    if lhs._auth != rhs._auth {return false}
    if lhs._personID != rhs._personID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_GetPersonInfoResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetPersonInfoResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "person"),
  ]

  public var isInitialized: Bool {
    if self._status == nil {return false}
    if let v = self._person, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._status) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._person) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if let v = self._person {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_GetPersonInfoResponse, rhs: MovieService_GetPersonInfoResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs._person != rhs._person {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_GetPersonInfoResponse.Result: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
    1: .same(proto: "NoAuth"),
  ]
}

extension MovieService_GetPersonsInfoRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetPersonsInfoRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "auth"),
    2: .same(proto: "persons"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._auth) }()
      case 2: try { try decoder.decodeRepeatedInt32Field(value: &self.persons) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._auth {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if !self.persons.isEmpty {
      try visitor.visitRepeatedInt32Field(value: self.persons, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_GetPersonsInfoRequest, rhs: MovieService_GetPersonsInfoRequest) -> Bool {
    if lhs._auth != rhs._auth {return false}
    if lhs.persons != rhs.persons {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_GetPersonsInfoResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetPersonsInfoResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "persons"),
  ]

  public var isInitialized: Bool {
    if self._status == nil {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.persons) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._status) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.persons) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if !self.persons.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.persons, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_GetPersonsInfoResponse, rhs: MovieService_GetPersonsInfoResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs.persons != rhs.persons {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_GetPersonsInfoResponse.Result: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
    1: .same(proto: "NoAuth"),
  ]
}

extension MovieService_GetDownloadableMoviesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetDownloadableMoviesRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "auth"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._auth) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._auth {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_GetDownloadableMoviesRequest, rhs: MovieService_GetDownloadableMoviesRequest) -> Bool {
    if lhs._auth != rhs._auth {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_GetDownloadableMoviesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetDownloadableMoviesResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "movies"),
  ]

  public var isInitialized: Bool {
    if self._status == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._status) }()
      case 2: try { try decoder.decodeRepeatedInt32Field(value: &self.movies) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if !self.movies.isEmpty {
      try visitor.visitRepeatedInt32Field(value: self.movies, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_GetDownloadableMoviesResponse, rhs: MovieService_GetDownloadableMoviesResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs.movies != rhs.movies {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_GetDownloadableMoviesResponse.Result: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
    1: .same(proto: "NoAuth"),
  ]
}

extension MovieService_RateRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RateRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "auth"),
    2: .same(proto: "rating"),
    3: .standard(proto: "movie_id"),
    4: .standard(proto: "comment_id"),
    100: .standard(proto: "account_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._auth) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self._rating) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self._movieID) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self._commentID) }()
      case 100: try { try decoder.decodeSingularUInt64Field(value: &self._accountID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._auth {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._rating {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }
    if let v = self._movieID {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._commentID {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._accountID {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 100)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_RateRequest, rhs: MovieService_RateRequest) -> Bool {
    if lhs._auth != rhs._auth {return false}
    if lhs._rating != rhs._rating {return false}
    if lhs._movieID != rhs._movieID {return false}
    if lhs._commentID != rhs._commentID {return false}
    if lhs._accountID != rhs._accountID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_RateResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RateResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
  ]

  public var isInitialized: Bool {
    if self._status == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._status) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_RateResponse, rhs: MovieService_RateResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_RateResponse.Result: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
    1: .same(proto: "NoAuth"),
  ]
}

extension MovieService_GetCollectionsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetCollectionsRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "auth"),
    2: .same(proto: "type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._auth) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self._type) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._auth {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_GetCollectionsRequest, rhs: MovieService_GetCollectionsRequest) -> Bool {
    if lhs._auth != rhs._auth {return false}
    if lhs._type != rhs._type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_GetCollectionsRequest.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "HOME"),
    1: .same(proto: "MOVIE"),
    2: .same(proto: "PREMIERE"),
    3: .same(proto: "SERIES"),
    4: .same(proto: "CARTOON"),
  ]
}

extension MovieService_GetCollectionsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetCollectionsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
    2: .same(proto: "collection"),
  ]

  public var isInitialized: Bool {
    if self._result == nil {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.collection) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._result) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.collection) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._result {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if !self.collection.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.collection, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_GetCollectionsResponse, rhs: MovieService_GetCollectionsResponse) -> Bool {
    if lhs._result != rhs._result {return false}
    if lhs.collection != rhs.collection {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_GetCollectionsResponse.Result: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
    1: .same(proto: "NoAuth"),
  ]
}

extension MovieService_PostCommentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PostCommentRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "auth"),
    2: .standard(proto: "movie_id"),
    3: .standard(proto: "parent_id"),
    4: .same(proto: "text"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._auth) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self._movieID) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self._parentID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._text) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._auth {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._movieID {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._parentID {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._text {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_PostCommentRequest, rhs: MovieService_PostCommentRequest) -> Bool {
    if lhs._auth != rhs._auth {return false}
    if lhs._movieID != rhs._movieID {return false}
    if lhs._parentID != rhs._parentID {return false}
    if lhs._text != rhs._text {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_PostCommentResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PostCommentResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "message"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._status) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._message) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if let v = self._message {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_PostCommentResponse, rhs: MovieService_PostCommentResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs._message != rhs._message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_PostCommentResponse.Result: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
    1: .same(proto: "NoAuth"),
    2: .same(proto: "Error"),
  ]
}

extension MovieService_EditCommentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EditCommentRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "auth"),
    2: .standard(proto: "comment_id"),
    3: .same(proto: "text"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._auth) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self._commentID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._text) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._auth {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._commentID {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._text {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_EditCommentRequest, rhs: MovieService_EditCommentRequest) -> Bool {
    if lhs._auth != rhs._auth {return false}
    if lhs._commentID != rhs._commentID {return false}
    if lhs._text != rhs._text {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_EditCommentResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EditCommentResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "message"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._status) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._message) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if let v = self._message {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_EditCommentResponse, rhs: MovieService_EditCommentResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs._message != rhs._message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_EditCommentResponse.Result: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
    1: .same(proto: "NoAuth"),
    2: .same(proto: "Error"),
  ]
}

extension MovieService_DeleteCommentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeleteCommentRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "auth"),
    2: .standard(proto: "comment_id"),
    3: .standard(proto: "movie_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._auth) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self._commentID) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self._movieID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._auth {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._commentID {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._movieID {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_DeleteCommentRequest, rhs: MovieService_DeleteCommentRequest) -> Bool {
    if lhs._auth != rhs._auth {return false}
    if lhs._commentID != rhs._commentID {return false}
    if lhs._movieID != rhs._movieID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_DeleteCommentResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeleteCommentResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "message"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._status) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._message) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if let v = self._message {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_DeleteCommentResponse, rhs: MovieService_DeleteCommentResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs._message != rhs._message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_DeleteCommentResponse.Result: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
    1: .same(proto: "NoAuth"),
    2: .same(proto: "Error"),
  ]
}

extension MovieService_InternalCommentMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".InternalCommentMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "action"),
    2: .standard(proto: "movie_id"),
    3: .standard(proto: "parent_id"),
    4: .standard(proto: "comment_id"),
    5: .same(proto: "text"),
    100: .standard(proto: "account_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._action) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self._movieID) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self._parentID) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self._commentID) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._text) }()
      case 100: try { try decoder.decodeSingularUInt64Field(value: &self._accountID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._action {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if let v = self._movieID {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._parentID {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._commentID {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._text {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    }
    if let v = self._accountID {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 100)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_InternalCommentMessage, rhs: MovieService_InternalCommentMessage) -> Bool {
    if lhs._action != rhs._action {return false}
    if lhs._movieID != rhs._movieID {return false}
    if lhs._parentID != rhs._parentID {return false}
    if lhs._commentID != rhs._commentID {return false}
    if lhs._text != rhs._text {return false}
    if lhs._accountID != rhs._accountID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_InternalCommentMessage.Action: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Post"),
    1: .same(proto: "Edit"),
    2: .same(proto: "Delete"),
  ]
}

extension MovieService_Ad: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Ad"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "type"),
    3: .standard(proto: "media_type"),
    4: .standard(proto: "content_type"),
    5: .standard(proto: "start_time"),
    6: .same(proto: "skippable"),
    7: .standard(proto: "skip_offset"),
    8: .same(proto: "title"),
    9: .same(proto: "description"),
    10: .standard(proto: "content_url"),
    11: .standard(proto: "content_id"),
    12: .standard(proto: "vast_url"),
    13: .same(proto: "order"),
    14: .standard(proto: "category_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self._id) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self._type) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self._mediaType) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self._contentType) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self._startTime) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self._skippable) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self._skipOffset) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self._title) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self._description_p) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self._contentURL) }()
      case 11: try { try decoder.decodeSingularInt32Field(value: &self._contentID) }()
      case 12: try { try decoder.decodeSingularStringField(value: &self._vastURL) }()
      case 13: try { try decoder.decodeSingularInt32Field(value: &self._order) }()
      case 14: try { try decoder.decodeSingularInt32Field(value: &self._categoryID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._id {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }
    if let v = self._mediaType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    }
    if let v = self._contentType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
    }
    if let v = self._startTime {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 5)
    }
    if let v = self._skippable {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    }
    if let v = self._skipOffset {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 7)
    }
    if let v = self._title {
      try visitor.visitSingularStringField(value: v, fieldNumber: 8)
    }
    if let v = self._description_p {
      try visitor.visitSingularStringField(value: v, fieldNumber: 9)
    }
    if let v = self._contentURL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 10)
    }
    if let v = self._contentID {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 11)
    }
    if let v = self._vastURL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 12)
    }
    if let v = self._order {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 13)
    }
    if let v = self._categoryID {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 14)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_Ad, rhs: MovieService_Ad) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._type != rhs._type {return false}
    if lhs._mediaType != rhs._mediaType {return false}
    if lhs._contentType != rhs._contentType {return false}
    if lhs._startTime != rhs._startTime {return false}
    if lhs._skippable != rhs._skippable {return false}
    if lhs._skipOffset != rhs._skipOffset {return false}
    if lhs._title != rhs._title {return false}
    if lhs._description_p != rhs._description_p {return false}
    if lhs._contentURL != rhs._contentURL {return false}
    if lhs._contentID != rhs._contentID {return false}
    if lhs._vastURL != rhs._vastURL {return false}
    if lhs._order != rhs._order {return false}
    if lhs._categoryID != rhs._categoryID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_Ad.MediaType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "VIDEO"),
    1: .same(proto: "IMAGE"),
  ]
}

extension MovieService_Ad.ContentType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Movie"),
    1: .same(proto: "Channel"),
    2: .same(proto: "General"),
  ]
}

extension MovieService_Ad.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PREROLL"),
    1: .same(proto: "MIDROLL"),
    2: .same(proto: "POSTROLL"),
  ]
}

extension MovieService_Filter: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Filter"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "type_id"),
    3: .standard(proto: "genre_id"),
    4: .standard(proto: "country_id"),
    5: .same(proto: "order"),
    6: .same(proto: "text"),
    7: .standard(proto: "year_from"),
    8: .standard(proto: "year_till"),
    9: .standard(proto: "audio_track_language_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self._id) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self._typeID) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self._genreID) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self._countryID) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self._order) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self._text) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self._yearFrom) }()
      case 8: try { try decoder.decodeSingularInt32Field(value: &self._yearTill) }()
      case 9: try { try decoder.decodeSingularInt32Field(value: &self._audioTrackLanguageID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._id {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._typeID {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._genreID {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._countryID {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._order {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
    }
    if let v = self._text {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    }
    if let v = self._yearFrom {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 7)
    }
    if let v = self._yearTill {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 8)
    }
    if let v = self._audioTrackLanguageID {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_Filter, rhs: MovieService_Filter) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._typeID != rhs._typeID {return false}
    if lhs._genreID != rhs._genreID {return false}
    if lhs._countryID != rhs._countryID {return false}
    if lhs._order != rhs._order {return false}
    if lhs._text != rhs._text {return false}
    if lhs._yearFrom != rhs._yearFrom {return false}
    if lhs._yearTill != rhs._yearTill {return false}
    if lhs._audioTrackLanguageID != rhs._audioTrackLanguageID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_FilterGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FilterGroup"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "title"),
    3: .same(proto: "filters"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._type) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._title) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.filters) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if let v = self._title {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if !self.filters.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.filters, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_FilterGroup, rhs: MovieService_FilterGroup) -> Bool {
    if lhs._type != rhs._type {return false}
    if lhs._title != rhs._title {return false}
    if lhs.filters != rhs.filters {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_FilterGroup.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Genre"),
    1: .same(proto: "Downloadable"),
    2: .same(proto: "Year"),
    3: .same(proto: "Country"),
    4: .same(proto: "Available"),
    5: .same(proto: "Audiotrack"),
  ]
}

extension MovieService_GetFiltersRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetFiltersRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "auth"),
    2: .standard(proto: "selected_filters"),
    3: .standard(proto: "selected_group"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._auth) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.selectedFilters) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self._selectedGroup) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._auth {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if !self.selectedFilters.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.selectedFilters, fieldNumber: 2)
    }
    if let v = self._selectedGroup {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_GetFiltersRequest, rhs: MovieService_GetFiltersRequest) -> Bool {
    if lhs._auth != rhs._auth {return false}
    if lhs.selectedFilters != rhs.selectedFilters {return false}
    if lhs._selectedGroup != rhs._selectedGroup {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_GetFiltersResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetFiltersResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "filters"),
    3: .standard(proto: "active_filters"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._status) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.filters) }()
      case 3: try { try decoder.decodeRepeatedInt32Field(value: &self.activeFilters) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if !self.filters.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.filters, fieldNumber: 2)
    }
    if !self.activeFilters.isEmpty {
      try visitor.visitRepeatedInt32Field(value: self.activeFilters, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_GetFiltersResponse, rhs: MovieService_GetFiltersResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs.filters != rhs.filters {return false}
    if lhs.activeFilters != rhs.activeFilters {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_GetFiltersResponse.Result: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
    1: .same(proto: "NoAuth"),
  ]
}

extension MovieService_GetFilteredMoviesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetFilteredMoviesRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "auth"),
    2: .same(proto: "filters"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._auth) }()
      case 2: try { try decoder.decodeRepeatedInt32Field(value: &self.filters) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._auth {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if !self.filters.isEmpty {
      try visitor.visitRepeatedInt32Field(value: self.filters, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_GetFilteredMoviesRequest, rhs: MovieService_GetFilteredMoviesRequest) -> Bool {
    if lhs._auth != rhs._auth {return false}
    if lhs.filters != rhs.filters {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_GetFilteredMoviesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetFilteredMoviesResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "movies"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._status) }()
      case 2: try { try decoder.decodeRepeatedInt32Field(value: &self.movies) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if !self.movies.isEmpty {
      try visitor.visitRepeatedInt32Field(value: self.movies, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_GetFilteredMoviesResponse, rhs: MovieService_GetFilteredMoviesResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs.movies != rhs.movies {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_GetFilteredMoviesResponse.Result: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
    1: .same(proto: "NoAuth"),
  ]
}

extension MovieService_FilterOption: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FilterOption"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "title"),
    3: .same(proto: "path"),
    4: .same(proto: "filters"),
    5: .same(proto: "slug"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self._id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._title) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._path) }()
      case 4: try { try decoder.decodeRepeatedInt32Field(value: &self.filters) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._slug) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._id {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._title {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._path {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if !self.filters.isEmpty {
      try visitor.visitRepeatedInt32Field(value: self.filters, fieldNumber: 4)
    }
    if let v = self._slug {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_FilterOption, rhs: MovieService_FilterOption) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._title != rhs._title {return false}
    if lhs._path != rhs._path {return false}
    if lhs.filters != rhs.filters {return false}
    if lhs._slug != rhs._slug {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_GetFilterOptionRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetFilterOptionRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "auth"),
    2: .standard(proto: "filter_option_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._auth) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self._filterOptionID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._auth {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._filterOptionID {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_GetFilterOptionRequest, rhs: MovieService_GetFilterOptionRequest) -> Bool {
    if lhs._auth != rhs._auth {return false}
    if lhs._filterOptionID != rhs._filterOptionID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_GetFilterOptionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetFilterOptionResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .standard(proto: "filter_option"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._status) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._filterOption) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if let v = self._filterOption {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_GetFilterOptionResponse, rhs: MovieService_GetFilterOptionResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs._filterOption != rhs._filterOption {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_GetFilterOptionResponse.Result: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
    1: .same(proto: "NoAuth"),
  ]
}

extension MovieService_NotifyMovieReleaseRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NotifyMovieReleaseRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "movie_id"),
    2: .same(proto: "email"),
  ]

  public var isInitialized: Bool {
    if self._movieID == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self._movieID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._email) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._movieID {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._email {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_NotifyMovieReleaseRequest, rhs: MovieService_NotifyMovieReleaseRequest) -> Bool {
    if lhs._movieID != rhs._movieID {return false}
    if lhs._email != rhs._email {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_NotifyMovieReleaseResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NotifyMovieReleaseResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._status) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_NotifyMovieReleaseResponse, rhs: MovieService_NotifyMovieReleaseResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_NotifyMovieReleaseResponse.Result: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
    1: .same(proto: "NeedEmail"),
  ]
}

extension MovieService_GetRecommendationsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetRecommendationsRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_GetRecommendationsRequest, rhs: MovieService_GetRecommendationsRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MovieService_GetRecommendationsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetRecommendationsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "recommendations"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.recommendations) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.recommendations) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.recommendations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.recommendations, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MovieService_GetRecommendationsResponse, rhs: MovieService_GetRecommendationsResponse) -> Bool {
    if lhs.recommendations != rhs.recommendations {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
