// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: application.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Application_ApplicationInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: Application_ApplicationInfo.ApplicationType = .atUnknown

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum ApplicationType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case atUnknown // = 0
    case atTrinityPlayer // = 1
    case atSweetTvPlayer // = 2
    case atCactusPlayer // = 3
    case atAlphaIp // = 4
    case atGrizliPlayer // = 5
    case atBravisTvPlayer // = 6
    case atStartelecomTv // = 7
    case atApelsin // = 8
    case atImperialTv // = 9
    case atAiwa // = 10
    case atKahovka // = 11
    case atVodafoneTv // = 12
    case atDiaNet // = 13
    case atKopeika // = 14
    case atRnet // = 15
    case atHisense // = 16
    case atUaCity // = 17
    case atEnlider // = 18
    case atBestlink // = 19
    case atStreamnetwork // = 20
    case atHomenet // = 21
    case UNRECOGNIZED(Int)

    init() {
      self = .atUnknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .atUnknown
      case 1: self = .atTrinityPlayer
      case 2: self = .atSweetTvPlayer
      case 3: self = .atCactusPlayer
      case 4: self = .atAlphaIp
      case 5: self = .atGrizliPlayer
      case 6: self = .atBravisTvPlayer
      case 7: self = .atStartelecomTv
      case 8: self = .atApelsin
      case 9: self = .atImperialTv
      case 10: self = .atAiwa
      case 11: self = .atKahovka
      case 12: self = .atVodafoneTv
      case 13: self = .atDiaNet
      case 14: self = .atKopeika
      case 15: self = .atRnet
      case 16: self = .atHisense
      case 17: self = .atUaCity
      case 18: self = .atEnlider
      case 19: self = .atBestlink
      case 20: self = .atStreamnetwork
      case 21: self = .atHomenet
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .atUnknown: return 0
      case .atTrinityPlayer: return 1
      case .atSweetTvPlayer: return 2
      case .atCactusPlayer: return 3
      case .atAlphaIp: return 4
      case .atGrizliPlayer: return 5
      case .atBravisTvPlayer: return 6
      case .atStartelecomTv: return 7
      case .atApelsin: return 8
      case .atImperialTv: return 9
      case .atAiwa: return 10
      case .atKahovka: return 11
      case .atVodafoneTv: return 12
      case .atDiaNet: return 13
      case .atKopeika: return 14
      case .atRnet: return 15
      case .atHisense: return 16
      case .atUaCity: return 17
      case .atEnlider: return 18
      case .atBestlink: return 19
      case .atStreamnetwork: return 20
      case .atHomenet: return 21
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension Application_ApplicationInfo.ApplicationType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Application_ApplicationInfo.ApplicationType] = [
    .atUnknown,
    .atTrinityPlayer,
    .atSweetTvPlayer,
    .atCactusPlayer,
    .atAlphaIp,
    .atGrizliPlayer,
    .atBravisTvPlayer,
    .atStartelecomTv,
    .atApelsin,
    .atImperialTv,
    .atAiwa,
    .atKahovka,
    .atVodafoneTv,
    .atDiaNet,
    .atKopeika,
    .atRnet,
    .atHisense,
    .atUaCity,
    .atEnlider,
    .atBestlink,
    .atStreamnetwork,
    .atHomenet,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "application"

extension Application_ApplicationInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ApplicationInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .atUnknown {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Application_ApplicationInfo, rhs: Application_ApplicationInfo) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Application_ApplicationInfo.ApplicationType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "AT_Unknown"),
    1: .same(proto: "AT_TRINITY_Player"),
    2: .same(proto: "AT_SWEET_TV_Player"),
    3: .same(proto: "AT_CACTUS_Player"),
    4: .same(proto: "AT_Alpha_IP"),
    5: .same(proto: "AT_GRIZLI_Player"),
    6: .same(proto: "AT_Bravis_TV_Player"),
    7: .same(proto: "AT_Startelecom_TV"),
    8: .same(proto: "AT_Apelsin"),
    9: .same(proto: "AT_IMPERIAL_TV"),
    10: .same(proto: "AT_AIWA"),
    11: .same(proto: "AT_Kahovka"),
    12: .same(proto: "AT_VODAFONE_TV"),
    13: .same(proto: "AT_DiaNet"),
    14: .same(proto: "AT_Kopeika"),
    15: .same(proto: "AT_RNet"),
    16: .same(proto: "AT_HISENSE"),
    17: .same(proto: "AT_UA_CITY"),
    18: .same(proto: "AT_Enlider"),
    19: .same(proto: "AT_Bestlink"),
    20: .same(proto: "AT_Streamnetwork"),
    21: .same(proto: "AT_Homenet"),
  ]
}
