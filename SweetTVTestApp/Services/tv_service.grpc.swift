//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: tv_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `TvService_TvServiceClient`, then call methods of this protocol to make API calls.
internal protocol TvService_TvServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: TvService_TvServiceClientInterceptorFactoryProtocol? { get }

  func getChannels(
    _ request: TvService_GetChannelsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<TvService_GetChannelsRequest, TvService_GetChannelsResponse>

  func openStream(
    _ request: TvService_OpenStreamRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<TvService_OpenStreamRequest, TvService_OpenStreamResponse>

  func updateStream(
    _ request: TvService_UpdateStreamRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<TvService_UpdateStreamRequest, TvService_UpdateStreamResponse>

  func closeStream(
    _ request: TvService_CloseStreamRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<TvService_CloseStreamRequest, TvService_CloseStreamResponse>

  func getTariffs(
    _ request: TvService_GetTariffsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<TvService_GetTariffsRequest, TvService_GetTariffsResponse>

  func getSubscriptions(
    _ request: TvService_GetSubscriptionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<TvService_GetSubscriptionsRequest, TvService_GetSubscriptionsResponse>

  func getTariffsOffers(
    _ request: TvService_GetTariffsOffersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<TvService_GetTariffsOffersRequest, TvService_GetTariffsOffersResponse>

  func getUserInfo(
    _ request: TvService_GetUserInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<TvService_GetUserInfoRequest, TvService_GetUserInfoResponse>

  func getUserChannel(
    _ request: TvService_UserChannelRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<TvService_UserChannelRequest, TvService_UserChannelResponse>

  func setUserChannel(
    _ request: TvService_SetUserChannelRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<TvService_SetUserChannelRequest, TvService_SetUserChannelResponse>

  func getMyVouchers(
    _ request: TvService_GetMyVouchersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<TvService_GetMyVouchersRequest, TvService_GetMyVouchersResponse>

  func getTvShowInfo(
    _ request: TvService_GetTvShowInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<TvService_GetTvShowInfoRequest, TvService_GetTvShowInfoResponse>
}

extension TvService_TvServiceClientProtocol {
  internal var serviceName: String {
    return "tv_service.TvService"
  }

  /// Unary call to GetChannels
  ///
  /// - Parameters:
  ///   - request: Request to send to GetChannels.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getChannels(
    _ request: TvService_GetChannelsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<TvService_GetChannelsRequest, TvService_GetChannelsResponse> {
    return self.makeUnaryCall(
      path: "/tv_service.TvService/GetChannels",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetChannelsInterceptors() ?? []
    )
  }

  /// Unary call to OpenStream
  ///
  /// - Parameters:
  ///   - request: Request to send to OpenStream.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func openStream(
    _ request: TvService_OpenStreamRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<TvService_OpenStreamRequest, TvService_OpenStreamResponse> {
    return self.makeUnaryCall(
      path: "/tv_service.TvService/OpenStream",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOpenStreamInterceptors() ?? []
    )
  }

  /// Unary call to UpdateStream
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateStream.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateStream(
    _ request: TvService_UpdateStreamRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<TvService_UpdateStreamRequest, TvService_UpdateStreamResponse> {
    return self.makeUnaryCall(
      path: "/tv_service.TvService/UpdateStream",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateStreamInterceptors() ?? []
    )
  }

  /// Unary call to CloseStream
  ///
  /// - Parameters:
  ///   - request: Request to send to CloseStream.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func closeStream(
    _ request: TvService_CloseStreamRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<TvService_CloseStreamRequest, TvService_CloseStreamResponse> {
    return self.makeUnaryCall(
      path: "/tv_service.TvService/CloseStream",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCloseStreamInterceptors() ?? []
    )
  }

  /// Unary call to GetTariffs
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTariffs.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getTariffs(
    _ request: TvService_GetTariffsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<TvService_GetTariffsRequest, TvService_GetTariffsResponse> {
    return self.makeUnaryCall(
      path: "/tv_service.TvService/GetTariffs",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTariffsInterceptors() ?? []
    )
  }

  /// Unary call to GetSubscriptions
  ///
  /// - Parameters:
  ///   - request: Request to send to GetSubscriptions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getSubscriptions(
    _ request: TvService_GetSubscriptionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<TvService_GetSubscriptionsRequest, TvService_GetSubscriptionsResponse> {
    return self.makeUnaryCall(
      path: "/tv_service.TvService/GetSubscriptions",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSubscriptionsInterceptors() ?? []
    )
  }

  /// Unary call to GetTariffsOffers
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTariffsOffers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getTariffsOffers(
    _ request: TvService_GetTariffsOffersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<TvService_GetTariffsOffersRequest, TvService_GetTariffsOffersResponse> {
    return self.makeUnaryCall(
      path: "/tv_service.TvService/GetTariffsOffers",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTariffsOffersInterceptors() ?? []
    )
  }

  /// Unary call to GetUserInfo
  ///
  /// - Parameters:
  ///   - request: Request to send to GetUserInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getUserInfo(
    _ request: TvService_GetUserInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<TvService_GetUserInfoRequest, TvService_GetUserInfoResponse> {
    return self.makeUnaryCall(
      path: "/tv_service.TvService/GetUserInfo",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserInfoInterceptors() ?? []
    )
  }

  /// Unary call to GetUserChannel
  ///
  /// - Parameters:
  ///   - request: Request to send to GetUserChannel.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getUserChannel(
    _ request: TvService_UserChannelRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<TvService_UserChannelRequest, TvService_UserChannelResponse> {
    return self.makeUnaryCall(
      path: "/tv_service.TvService/GetUserChannel",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserChannelInterceptors() ?? []
    )
  }

  /// Unary call to SetUserChannel
  ///
  /// - Parameters:
  ///   - request: Request to send to SetUserChannel.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setUserChannel(
    _ request: TvService_SetUserChannelRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<TvService_SetUserChannelRequest, TvService_SetUserChannelResponse> {
    return self.makeUnaryCall(
      path: "/tv_service.TvService/SetUserChannel",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetUserChannelInterceptors() ?? []
    )
  }

  /// Unary call to GetMyVouchers
  ///
  /// - Parameters:
  ///   - request: Request to send to GetMyVouchers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getMyVouchers(
    _ request: TvService_GetMyVouchersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<TvService_GetMyVouchersRequest, TvService_GetMyVouchersResponse> {
    return self.makeUnaryCall(
      path: "/tv_service.TvService/GetMyVouchers",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMyVouchersInterceptors() ?? []
    )
  }

  /// Unary call to GetTvShowInfo
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTvShowInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getTvShowInfo(
    _ request: TvService_GetTvShowInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<TvService_GetTvShowInfoRequest, TvService_GetTvShowInfoResponse> {
    return self.makeUnaryCall(
      path: "/tv_service.TvService/GetTvShowInfo",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTvShowInfoInterceptors() ?? []
    )
  }
}

internal protocol TvService_TvServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'getChannels'.
  func makeGetChannelsInterceptors() -> [ClientInterceptor<TvService_GetChannelsRequest, TvService_GetChannelsResponse>]

  /// - Returns: Interceptors to use when invoking 'openStream'.
  func makeOpenStreamInterceptors() -> [ClientInterceptor<TvService_OpenStreamRequest, TvService_OpenStreamResponse>]

  /// - Returns: Interceptors to use when invoking 'updateStream'.
  func makeUpdateStreamInterceptors() -> [ClientInterceptor<TvService_UpdateStreamRequest, TvService_UpdateStreamResponse>]

  /// - Returns: Interceptors to use when invoking 'closeStream'.
  func makeCloseStreamInterceptors() -> [ClientInterceptor<TvService_CloseStreamRequest, TvService_CloseStreamResponse>]

  /// - Returns: Interceptors to use when invoking 'getTariffs'.
  func makeGetTariffsInterceptors() -> [ClientInterceptor<TvService_GetTariffsRequest, TvService_GetTariffsResponse>]

  /// - Returns: Interceptors to use when invoking 'getSubscriptions'.
  func makeGetSubscriptionsInterceptors() -> [ClientInterceptor<TvService_GetSubscriptionsRequest, TvService_GetSubscriptionsResponse>]

  /// - Returns: Interceptors to use when invoking 'getTariffsOffers'.
  func makeGetTariffsOffersInterceptors() -> [ClientInterceptor<TvService_GetTariffsOffersRequest, TvService_GetTariffsOffersResponse>]

  /// - Returns: Interceptors to use when invoking 'getUserInfo'.
  func makeGetUserInfoInterceptors() -> [ClientInterceptor<TvService_GetUserInfoRequest, TvService_GetUserInfoResponse>]

  /// - Returns: Interceptors to use when invoking 'getUserChannel'.
  func makeGetUserChannelInterceptors() -> [ClientInterceptor<TvService_UserChannelRequest, TvService_UserChannelResponse>]

  /// - Returns: Interceptors to use when invoking 'setUserChannel'.
  func makeSetUserChannelInterceptors() -> [ClientInterceptor<TvService_SetUserChannelRequest, TvService_SetUserChannelResponse>]

  /// - Returns: Interceptors to use when invoking 'getMyVouchers'.
  func makeGetMyVouchersInterceptors() -> [ClientInterceptor<TvService_GetMyVouchersRequest, TvService_GetMyVouchersResponse>]

  /// - Returns: Interceptors to use when invoking 'getTvShowInfo'.
  func makeGetTvShowInfoInterceptors() -> [ClientInterceptor<TvService_GetTvShowInfoRequest, TvService_GetTvShowInfoResponse>]
}

internal final class TvService_TvServiceClient: TvService_TvServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: TvService_TvServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the tv_service.TvService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: TvService_TvServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

