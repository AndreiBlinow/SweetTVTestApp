//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: signup_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `SignupService_SignupServiceClient`, then call methods of this protocol to make API calls.
internal protocol SignupService_SignupServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: SignupService_SignupServiceClientInterceptorFactoryProtocol? { get }

  func setPhone(
    _ request: SignupService_SetPhoneRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<SignupService_SetPhoneRequest, SignupService_SetPhoneResponse>

  func setCode(
    _ request: SignupService_SetCodeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<SignupService_SetCodeRequest, SignupService_SetCodeResponse>

  func getPartnerCode(
    _ request: SignupService_GetPartnerCodeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<SignupService_GetPartnerCodeRequest, SignupService_GetPartnerCodeResponse>

  func auth(
    _ request: SignupService_AuthRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<SignupService_AuthRequest, SignupService_AuthResponse>

  func authCheck(
    _ request: SignupService_AuthCheckRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<SignupService_AuthCheckRequest, SignupService_AuthCheckResponse>

  func logout(
    _ request: SignupService_LogoutRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<SignupService_LogoutRequest, SignupService_LogoutResponse>

  func codeAuthTransactionStart(
    _ request: SignupService_CodeAuthTransactionStartRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<SignupService_CodeAuthTransactionStartRequest, SignupService_CodeAuthTransactionStartResponse>

  func codeAuthTransactionUpdate(
    _ request: SignupService_CodeAuthTransactionUpdateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<SignupService_CodeAuthTransactionUpdateRequest, SignupService_CodeAuthTransactionUpdateResponse>

  func codeAuthTransactionSetPhone(
    _ request: SignupService_CodeAuthTransactionSetPhoneRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<SignupService_CodeAuthTransactionSetPhoneRequest, SignupService_CodeAuthTransactionSetPhoneResponse>

  func codeAuthTransactionSetCode(
    _ request: SignupService_CodeAuthTransactionSetCodeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<SignupService_CodeAuthTransactionSetCodeRequest, SignupService_CodeAuthTransactionSetCodeResponse>
}

extension SignupService_SignupServiceClientProtocol {
  internal var serviceName: String {
    return "signup_service.SignupService"
  }

  /// Unary call to SetPhone
  ///
  /// - Parameters:
  ///   - request: Request to send to SetPhone.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setPhone(
    _ request: SignupService_SetPhoneRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SignupService_SetPhoneRequest, SignupService_SetPhoneResponse> {
    return self.makeUnaryCall(
      path: "/signup_service.SignupService/SetPhone",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetPhoneInterceptors() ?? []
    )
  }

  /// Unary call to SetCode
  ///
  /// - Parameters:
  ///   - request: Request to send to SetCode.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setCode(
    _ request: SignupService_SetCodeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SignupService_SetCodeRequest, SignupService_SetCodeResponse> {
    return self.makeUnaryCall(
      path: "/signup_service.SignupService/SetCode",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetCodeInterceptors() ?? []
    )
  }

  /// Unary call to GetPartnerCode
  ///
  /// - Parameters:
  ///   - request: Request to send to GetPartnerCode.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getPartnerCode(
    _ request: SignupService_GetPartnerCodeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SignupService_GetPartnerCodeRequest, SignupService_GetPartnerCodeResponse> {
    return self.makeUnaryCall(
      path: "/signup_service.SignupService/GetPartnerCode",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPartnerCodeInterceptors() ?? []
    )
  }

  /// Unary call to Auth
  ///
  /// - Parameters:
  ///   - request: Request to send to Auth.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func auth(
    _ request: SignupService_AuthRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SignupService_AuthRequest, SignupService_AuthResponse> {
    return self.makeUnaryCall(
      path: "/signup_service.SignupService/Auth",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthInterceptors() ?? []
    )
  }

  /// Unary call to AuthCheck
  ///
  /// - Parameters:
  ///   - request: Request to send to AuthCheck.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func authCheck(
    _ request: SignupService_AuthCheckRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SignupService_AuthCheckRequest, SignupService_AuthCheckResponse> {
    return self.makeUnaryCall(
      path: "/signup_service.SignupService/AuthCheck",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthCheckInterceptors() ?? []
    )
  }

  /// Unary call to Logout
  ///
  /// - Parameters:
  ///   - request: Request to send to Logout.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func logout(
    _ request: SignupService_LogoutRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SignupService_LogoutRequest, SignupService_LogoutResponse> {
    return self.makeUnaryCall(
      path: "/signup_service.SignupService/Logout",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLogoutInterceptors() ?? []
    )
  }

  /// Unary call to CodeAuthTransactionStart
  ///
  /// - Parameters:
  ///   - request: Request to send to CodeAuthTransactionStart.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func codeAuthTransactionStart(
    _ request: SignupService_CodeAuthTransactionStartRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SignupService_CodeAuthTransactionStartRequest, SignupService_CodeAuthTransactionStartResponse> {
    return self.makeUnaryCall(
      path: "/signup_service.SignupService/CodeAuthTransactionStart",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCodeAuthTransactionStartInterceptors() ?? []
    )
  }

  /// Unary call to CodeAuthTransactionUpdate
  ///
  /// - Parameters:
  ///   - request: Request to send to CodeAuthTransactionUpdate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func codeAuthTransactionUpdate(
    _ request: SignupService_CodeAuthTransactionUpdateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SignupService_CodeAuthTransactionUpdateRequest, SignupService_CodeAuthTransactionUpdateResponse> {
    return self.makeUnaryCall(
      path: "/signup_service.SignupService/CodeAuthTransactionUpdate",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCodeAuthTransactionUpdateInterceptors() ?? []
    )
  }

  /// Unary call to CodeAuthTransactionSetPhone
  ///
  /// - Parameters:
  ///   - request: Request to send to CodeAuthTransactionSetPhone.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func codeAuthTransactionSetPhone(
    _ request: SignupService_CodeAuthTransactionSetPhoneRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SignupService_CodeAuthTransactionSetPhoneRequest, SignupService_CodeAuthTransactionSetPhoneResponse> {
    return self.makeUnaryCall(
      path: "/signup_service.SignupService/CodeAuthTransactionSetPhone",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCodeAuthTransactionSetPhoneInterceptors() ?? []
    )
  }

  /// Unary call to CodeAuthTransactionSetCode
  ///
  /// - Parameters:
  ///   - request: Request to send to CodeAuthTransactionSetCode.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func codeAuthTransactionSetCode(
    _ request: SignupService_CodeAuthTransactionSetCodeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SignupService_CodeAuthTransactionSetCodeRequest, SignupService_CodeAuthTransactionSetCodeResponse> {
    return self.makeUnaryCall(
      path: "/signup_service.SignupService/CodeAuthTransactionSetCode",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCodeAuthTransactionSetCodeInterceptors() ?? []
    )
  }
}

internal protocol SignupService_SignupServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'setPhone'.
  func makeSetPhoneInterceptors() -> [ClientInterceptor<SignupService_SetPhoneRequest, SignupService_SetPhoneResponse>]

  /// - Returns: Interceptors to use when invoking 'setCode'.
  func makeSetCodeInterceptors() -> [ClientInterceptor<SignupService_SetCodeRequest, SignupService_SetCodeResponse>]

  /// - Returns: Interceptors to use when invoking 'getPartnerCode'.
  func makeGetPartnerCodeInterceptors() -> [ClientInterceptor<SignupService_GetPartnerCodeRequest, SignupService_GetPartnerCodeResponse>]

  /// - Returns: Interceptors to use when invoking 'auth'.
  func makeAuthInterceptors() -> [ClientInterceptor<SignupService_AuthRequest, SignupService_AuthResponse>]

  /// - Returns: Interceptors to use when invoking 'authCheck'.
  func makeAuthCheckInterceptors() -> [ClientInterceptor<SignupService_AuthCheckRequest, SignupService_AuthCheckResponse>]

  /// - Returns: Interceptors to use when invoking 'logout'.
  func makeLogoutInterceptors() -> [ClientInterceptor<SignupService_LogoutRequest, SignupService_LogoutResponse>]

  /// - Returns: Interceptors to use when invoking 'codeAuthTransactionStart'.
  func makeCodeAuthTransactionStartInterceptors() -> [ClientInterceptor<SignupService_CodeAuthTransactionStartRequest, SignupService_CodeAuthTransactionStartResponse>]

  /// - Returns: Interceptors to use when invoking 'codeAuthTransactionUpdate'.
  func makeCodeAuthTransactionUpdateInterceptors() -> [ClientInterceptor<SignupService_CodeAuthTransactionUpdateRequest, SignupService_CodeAuthTransactionUpdateResponse>]

  /// - Returns: Interceptors to use when invoking 'codeAuthTransactionSetPhone'.
  func makeCodeAuthTransactionSetPhoneInterceptors() -> [ClientInterceptor<SignupService_CodeAuthTransactionSetPhoneRequest, SignupService_CodeAuthTransactionSetPhoneResponse>]

  /// - Returns: Interceptors to use when invoking 'codeAuthTransactionSetCode'.
  func makeCodeAuthTransactionSetCodeInterceptors() -> [ClientInterceptor<SignupService_CodeAuthTransactionSetCodeRequest, SignupService_CodeAuthTransactionSetCodeResponse>]
}

internal final class SignupService_SignupServiceClient: SignupService_SignupServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: SignupService_SignupServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the signup_service.SignupService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: SignupService_SignupServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

