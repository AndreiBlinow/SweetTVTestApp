// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: signup_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct SignupService_SmsMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var externalID: String = String()

  var from: String = String()

  var to: String = String()

  var body: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SignupService_SetPhoneRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var phone: String = String()

  var device: Device_DeviceInfo {
    get {return _device ?? Device_DeviceInfo()}
    set {_device = newValue}
  }
  /// Returns true if `device` has been explicitly set.
  var hasDevice: Bool {return self._device != nil}
  /// Clears the value of `device`. Subsequent reads from it will return its default value.
  mutating func clearDevice() {self._device = nil}

  var locale: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _device: Device_DeviceInfo? = nil
}

struct SignupService_SetPhoneResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: SignupService_SetPhoneResponse.Result = .ok

  var retryAfter: Int32 = 0

  var messageID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Result: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case ok // = 0
    case noAttempts // = 1
    case invalidPhoneNumber // = 2
    case UNRECOGNIZED(Int)

    init() {
      self = .ok
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ok
      case 1: self = .noAttempts
      case 2: self = .invalidPhoneNumber
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .ok: return 0
      case .noAttempts: return 1
      case .invalidPhoneNumber: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension SignupService_SetPhoneResponse.Result: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [SignupService_SetPhoneResponse.Result] = [
    .ok,
    .noAttempts,
    .invalidPhoneNumber,
  ]
}

#endif  // swift(>=4.2)

struct SignupService_SetCodeRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var phone: String = String()

  var confirmationCode: Int32 = 0

  var autoUserID: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SignupService_SetCodeResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: SignupService_SetCodeResponse.Result = .ok

  var authToken: String = String()

  var ttl: Int32 = 0

  var retryAfter: Int32 = 0

  var refreshToken: String = String()

  var accessToken: String = String()

  var expiresIn: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Result: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case ok // = 0
    case codeInvalid // = 1
    case noAttempts // = 2
    case expired // = 3
    case UNRECOGNIZED(Int)

    init() {
      self = .ok
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ok
      case 1: self = .codeInvalid
      case 2: self = .noAttempts
      case 3: self = .expired
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .ok: return 0
      case .codeInvalid: return 1
      case .noAttempts: return 2
      case .expired: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension SignupService_SetCodeResponse.Result: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [SignupService_SetCodeResponse.Result] = [
    .ok,
    .codeInvalid,
    .noAttempts,
    .expired,
  ]
}

#endif  // swift(>=4.2)

struct SignupService_GetPartnerCodeRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var device: Device_DeviceInfo {
    get {return _device ?? Device_DeviceInfo()}
    set {_device = newValue}
  }
  /// Returns true if `device` has been explicitly set.
  var hasDevice: Bool {return self._device != nil}
  /// Clears the value of `device`. Subsequent reads from it will return its default value.
  mutating func clearDevice() {self._device = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _device: Device_DeviceInfo? = nil
}

struct SignupService_GetPartnerCodeResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: SignupService_GetPartnerCodeResponse.Result = .ok

  var code: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Result: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case ok // = 0
    case error // = 1
    case UNRECOGNIZED(Int)

    init() {
      self = .ok
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ok
      case 1: self = .error
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .ok: return 0
      case .error: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension SignupService_GetPartnerCodeResponse.Result: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [SignupService_GetPartnerCodeResponse.Result] = [
    .ok,
    .error,
  ]
}

#endif  // swift(>=4.2)

struct SignupService_GetMessageStatusRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var messageID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SignupService_GetMessageStatusResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Status: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unknown // = 0
    case inQueue // = 1
    case sended // = 2
    case delivered // = 3
    case incorrectDestination // = 4
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .inQueue
      case 2: self = .sended
      case 3: self = .delivered
      case 4: self = .incorrectDestination
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .inQueue: return 1
      case .sended: return 2
      case .delivered: return 3
      case .incorrectDestination: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension SignupService_GetMessageStatusResponse.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [SignupService_GetMessageStatusResponse.Status] = [
    .unknown,
    .inQueue,
    .sended,
    .delivered,
    .incorrectDestination,
  ]
}

#endif  // swift(>=4.2)

struct SignupService_AuthRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var login: String = String()

  var password: String = String()

  var device: Device_DeviceInfo {
    get {return _device ?? Device_DeviceInfo()}
    set {_device = newValue}
  }
  /// Returns true if `device` has been explicitly set.
  var hasDevice: Bool {return self._device != nil}
  /// Clears the value of `device`. Subsequent reads from it will return its default value.
  mutating func clearDevice() {self._device = nil}

  var application: Application_ApplicationInfo {
    get {return _application ?? Application_ApplicationInfo()}
    set {_application = newValue}
  }
  /// Returns true if `application` has been explicitly set.
  var hasApplication: Bool {return self._application != nil}
  /// Clears the value of `application`. Subsequent reads from it will return its default value.
  mutating func clearApplication() {self._application = nil}

  var locale: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _device: Device_DeviceInfo? = nil
  fileprivate var _application: Application_ApplicationInfo? = nil
}

struct SignupService_AuthResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: SignupService_AuthResponse.Result = .ok

  var authToken: String = String()

  var ttl: UInt32 = 0

  var companyID: Int32 = 0

  var signupMethod: SignupService_AuthResponse.SignupMethod = .sms

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Result: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case ok // = 0
    case wrongUser // = 1
    case wrongPassword // = 2
    case UNRECOGNIZED(Int)

    init() {
      self = .ok
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ok
      case 1: self = .wrongUser
      case 2: self = .wrongPassword
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .ok: return 0
      case .wrongUser: return 1
      case .wrongPassword: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  enum SignupMethod: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case sms // = 0
    case autoUser // = 1
    case UNRECOGNIZED(Int)

    init() {
      self = .sms
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .sms
      case 1: self = .autoUser
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .sms: return 0
      case .autoUser: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension SignupService_AuthResponse.Result: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [SignupService_AuthResponse.Result] = [
    .ok,
    .wrongUser,
    .wrongPassword,
  ]
}

extension SignupService_AuthResponse.SignupMethod: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [SignupService_AuthResponse.SignupMethod] = [
    .sms,
    .autoUser,
  ]
}

#endif  // swift(>=4.2)

struct SignupService_AuthCheckRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var auth: String = String()

  var locale: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SignupService_AuthCheckResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: SignupService_AuthCheckResponse.Result = .ok

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Result: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case ok // = 0
    case noAuth // = 1
    case UNRECOGNIZED(Int)

    init() {
      self = .ok
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ok
      case 1: self = .noAuth
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .ok: return 0
      case .noAuth: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension SignupService_AuthCheckResponse.Result: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [SignupService_AuthCheckResponse.Result] = [
    .ok,
    .noAuth,
  ]
}

#endif  // swift(>=4.2)

struct SignupService_LogoutRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var auth: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SignupService_LogoutResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: SignupService_LogoutResponse.Result = .ok

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Result: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case ok // = 0
    case noAuth // = 1
    case UNRECOGNIZED(Int)

    init() {
      self = .ok
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ok
      case 1: self = .noAuth
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .ok: return 0
      case .noAuth: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension SignupService_LogoutResponse.Result: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [SignupService_LogoutResponse.Result] = [
    .ok,
    .noAuth,
  ]
}

#endif  // swift(>=4.2)

///CodeAuthTransaction
struct SignupService_CodeAuthTransactionStartRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var device: Device_DeviceInfo {
    get {return _device ?? Device_DeviceInfo()}
    set {_device = newValue}
  }
  /// Returns true if `device` has been explicitly set.
  var hasDevice: Bool {return self._device != nil}
  /// Clears the value of `device`. Subsequent reads from it will return its default value.
  mutating func clearDevice() {self._device = nil}

  var application: Application_ApplicationInfo {
    get {return _application ?? Application_ApplicationInfo()}
    set {_application = newValue}
  }
  /// Returns true if `application` has been explicitly set.
  var hasApplication: Bool {return self._application != nil}
  /// Clears the value of `application`. Subsequent reads from it will return its default value.
  mutating func clearApplication() {self._application = nil}

  var locale: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _device: Device_DeviceInfo? = nil
  fileprivate var _application: Application_ApplicationInfo? = nil
}

struct SignupService_CodeAuthTransactionStartResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var transactionID: UInt32 = 0

  var authType: SignupService_CodeAuthTransactionStartResponse.AuthType = .code

  var authCode: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum AuthType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case code // = 0
    case sms // = 1
    case UNRECOGNIZED(Int)

    init() {
      self = .code
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .code
      case 1: self = .sms
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .code: return 0
      case .sms: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension SignupService_CodeAuthTransactionStartResponse.AuthType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [SignupService_CodeAuthTransactionStartResponse.AuthType] = [
    .code,
    .sms,
  ]
}

#endif  // swift(>=4.2)

struct SignupService_CodeAuthTransactionUpdateRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var transactionID: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SignupService_CodeAuthTransactionUpdateResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: SignupService_CodeAuthTransactionUpdateResponse.Result = .ok

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Result: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case ok // = 0
    case transactionIDInvalid // = 1
    case UNRECOGNIZED(Int)

    init() {
      self = .ok
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ok
      case 1: self = .transactionIDInvalid
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .ok: return 0
      case .transactionIDInvalid: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension SignupService_CodeAuthTransactionUpdateResponse.Result: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [SignupService_CodeAuthTransactionUpdateResponse.Result] = [
    .ok,
    .transactionIDInvalid,
  ]
}

#endif  // swift(>=4.2)

struct SignupService_CodeAuthTransactionSetPhoneRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var transactionID: UInt32 = 0

  var phone: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SignupService_CodeAuthTransactionSetPhoneResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: SignupService_CodeAuthTransactionSetPhoneResponse.Result = .ok

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Result: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case ok // = 0
    case phoneInvalid // = 1
    case transactionIDInvalid // = 2
    case UNRECOGNIZED(Int)

    init() {
      self = .ok
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ok
      case 1: self = .phoneInvalid
      case 2: self = .transactionIDInvalid
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .ok: return 0
      case .phoneInvalid: return 1
      case .transactionIDInvalid: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension SignupService_CodeAuthTransactionSetPhoneResponse.Result: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [SignupService_CodeAuthTransactionSetPhoneResponse.Result] = [
    .ok,
    .phoneInvalid,
    .transactionIDInvalid,
  ]
}

#endif  // swift(>=4.2)

struct SignupService_CodeAuthTransactionSetCodeRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var transactionID: UInt32 = 0

  var authCode: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SignupService_CodeAuthTransactionSetCodeResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: SignupService_CodeAuthTransactionSetCodeResponse.Result = .ok

  var authToken: String = String()

  var ttl: UInt32 = 0

  var companyID: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Result: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case ok // = 0
    case codeInvalid // = 1
    case transactionIDInvalid // = 2
    case UNRECOGNIZED(Int)

    init() {
      self = .ok
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ok
      case 1: self = .codeInvalid
      case 2: self = .transactionIDInvalid
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .ok: return 0
      case .codeInvalid: return 1
      case .transactionIDInvalid: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension SignupService_CodeAuthTransactionSetCodeResponse.Result: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [SignupService_CodeAuthTransactionSetCodeResponse.Result] = [
    .ok,
    .codeInvalid,
    .transactionIDInvalid,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "signup_service"

extension SignupService_SmsMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SmsMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "external_id"),
    3: .same(proto: "from"),
    4: .same(proto: "to"),
    5: .same(proto: "body"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.externalID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.from) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.to) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.body) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.externalID.isEmpty {
      try visitor.visitSingularStringField(value: self.externalID, fieldNumber: 2)
    }
    if !self.from.isEmpty {
      try visitor.visitSingularStringField(value: self.from, fieldNumber: 3)
    }
    if !self.to.isEmpty {
      try visitor.visitSingularStringField(value: self.to, fieldNumber: 4)
    }
    if !self.body.isEmpty {
      try visitor.visitSingularStringField(value: self.body, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SignupService_SmsMessage, rhs: SignupService_SmsMessage) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.externalID != rhs.externalID {return false}
    if lhs.from != rhs.from {return false}
    if lhs.to != rhs.to {return false}
    if lhs.body != rhs.body {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SignupService_SetPhoneRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetPhoneRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "phone"),
    2: .same(proto: "device"),
    3: .same(proto: "locale"),
  ]

  public var isInitialized: Bool {
    if let v = self._device, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.phone) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._device) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.locale) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.phone.isEmpty {
      try visitor.visitSingularStringField(value: self.phone, fieldNumber: 1)
    }
    if let v = self._device {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.locale.isEmpty {
      try visitor.visitSingularStringField(value: self.locale, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SignupService_SetPhoneRequest, rhs: SignupService_SetPhoneRequest) -> Bool {
    if lhs.phone != rhs.phone {return false}
    if lhs._device != rhs._device {return false}
    if lhs.locale != rhs.locale {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SignupService_SetPhoneResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetPhoneResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .standard(proto: "retry_after"),
    3: .standard(proto: "message_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.retryAfter) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.messageID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .ok {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    if self.retryAfter != 0 {
      try visitor.visitSingularInt32Field(value: self.retryAfter, fieldNumber: 2)
    }
    if !self.messageID.isEmpty {
      try visitor.visitSingularStringField(value: self.messageID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SignupService_SetPhoneResponse, rhs: SignupService_SetPhoneResponse) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.retryAfter != rhs.retryAfter {return false}
    if lhs.messageID != rhs.messageID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SignupService_SetPhoneResponse.Result: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
    1: .same(proto: "NoAttempts"),
    2: .same(proto: "InvalidPhoneNumber"),
  ]
}

extension SignupService_SetCodeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetCodeRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "phone"),
    2: .standard(proto: "confirmation_code"),
    100: .standard(proto: "auto_user_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.phone) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.confirmationCode) }()
      case 100: try { try decoder.decodeSingularUInt32Field(value: &self.autoUserID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.phone.isEmpty {
      try visitor.visitSingularStringField(value: self.phone, fieldNumber: 1)
    }
    if self.confirmationCode != 0 {
      try visitor.visitSingularInt32Field(value: self.confirmationCode, fieldNumber: 2)
    }
    if self.autoUserID != 0 {
      try visitor.visitSingularUInt32Field(value: self.autoUserID, fieldNumber: 100)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SignupService_SetCodeRequest, rhs: SignupService_SetCodeRequest) -> Bool {
    if lhs.phone != rhs.phone {return false}
    if lhs.confirmationCode != rhs.confirmationCode {return false}
    if lhs.autoUserID != rhs.autoUserID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SignupService_SetCodeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetCodeResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .standard(proto: "auth_token"),
    3: .same(proto: "ttl"),
    4: .standard(proto: "retry_after"),
    5: .standard(proto: "refresh_token"),
    6: .standard(proto: "access_token"),
    7: .standard(proto: "expires_in"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.authToken) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.ttl) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.retryAfter) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.refreshToken) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.accessToken) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self.expiresIn) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .ok {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    if !self.authToken.isEmpty {
      try visitor.visitSingularStringField(value: self.authToken, fieldNumber: 2)
    }
    if self.ttl != 0 {
      try visitor.visitSingularInt32Field(value: self.ttl, fieldNumber: 3)
    }
    if self.retryAfter != 0 {
      try visitor.visitSingularInt32Field(value: self.retryAfter, fieldNumber: 4)
    }
    if !self.refreshToken.isEmpty {
      try visitor.visitSingularStringField(value: self.refreshToken, fieldNumber: 5)
    }
    if !self.accessToken.isEmpty {
      try visitor.visitSingularStringField(value: self.accessToken, fieldNumber: 6)
    }
    if self.expiresIn != 0 {
      try visitor.visitSingularInt32Field(value: self.expiresIn, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SignupService_SetCodeResponse, rhs: SignupService_SetCodeResponse) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.authToken != rhs.authToken {return false}
    if lhs.ttl != rhs.ttl {return false}
    if lhs.retryAfter != rhs.retryAfter {return false}
    if lhs.refreshToken != rhs.refreshToken {return false}
    if lhs.accessToken != rhs.accessToken {return false}
    if lhs.expiresIn != rhs.expiresIn {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SignupService_SetCodeResponse.Result: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
    1: .same(proto: "CodeInvalid"),
    2: .same(proto: "NoAttempts"),
    3: .same(proto: "Expired"),
  ]
}

extension SignupService_GetPartnerCodeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetPartnerCodeRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "device"),
  ]

  public var isInitialized: Bool {
    if let v = self._device, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._device) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._device {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SignupService_GetPartnerCodeRequest, rhs: SignupService_GetPartnerCodeRequest) -> Bool {
    if lhs._device != rhs._device {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SignupService_GetPartnerCodeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetPartnerCodeResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.code) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .ok {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SignupService_GetPartnerCodeResponse, rhs: SignupService_GetPartnerCodeResponse) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SignupService_GetPartnerCodeResponse.Result: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
    1: .same(proto: "Error"),
  ]
}

extension SignupService_GetMessageStatusRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetMessageStatusRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "message_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.messageID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.messageID.isEmpty {
      try visitor.visitSingularStringField(value: self.messageID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SignupService_GetMessageStatusRequest, rhs: SignupService_GetMessageStatusRequest) -> Bool {
    if lhs.messageID != rhs.messageID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SignupService_GetMessageStatusResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetMessageStatusResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SignupService_GetMessageStatusResponse, rhs: SignupService_GetMessageStatusResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SignupService_GetMessageStatusResponse.Status: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "IN_QUEUE"),
    2: .same(proto: "SENDED"),
    3: .same(proto: "DELIVERED"),
    4: .same(proto: "INCORRECT_DESTINATION"),
  ]
}

extension SignupService_AuthRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AuthRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "login"),
    2: .same(proto: "password"),
    3: .same(proto: "device"),
    4: .same(proto: "application"),
    5: .same(proto: "locale"),
  ]

  public var isInitialized: Bool {
    if let v = self._device, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.login) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.password) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._device) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._application) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.locale) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.login.isEmpty {
      try visitor.visitSingularStringField(value: self.login, fieldNumber: 1)
    }
    if !self.password.isEmpty {
      try visitor.visitSingularStringField(value: self.password, fieldNumber: 2)
    }
    if let v = self._device {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._application {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.locale.isEmpty {
      try visitor.visitSingularStringField(value: self.locale, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SignupService_AuthRequest, rhs: SignupService_AuthRequest) -> Bool {
    if lhs.login != rhs.login {return false}
    if lhs.password != rhs.password {return false}
    if lhs._device != rhs._device {return false}
    if lhs._application != rhs._application {return false}
    if lhs.locale != rhs.locale {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SignupService_AuthResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AuthResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .standard(proto: "auth_token"),
    3: .same(proto: "ttl"),
    4: .standard(proto: "company_id"),
    100: .standard(proto: "signup_method"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.authToken) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.ttl) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.companyID) }()
      case 100: try { try decoder.decodeSingularEnumField(value: &self.signupMethod) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .ok {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    if !self.authToken.isEmpty {
      try visitor.visitSingularStringField(value: self.authToken, fieldNumber: 2)
    }
    if self.ttl != 0 {
      try visitor.visitSingularUInt32Field(value: self.ttl, fieldNumber: 3)
    }
    if self.companyID != 0 {
      try visitor.visitSingularInt32Field(value: self.companyID, fieldNumber: 4)
    }
    if self.signupMethod != .sms {
      try visitor.visitSingularEnumField(value: self.signupMethod, fieldNumber: 100)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SignupService_AuthResponse, rhs: SignupService_AuthResponse) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.authToken != rhs.authToken {return false}
    if lhs.ttl != rhs.ttl {return false}
    if lhs.companyID != rhs.companyID {return false}
    if lhs.signupMethod != rhs.signupMethod {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SignupService_AuthResponse.Result: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
    1: .same(proto: "WrongUser"),
    2: .same(proto: "WrongPassword"),
  ]
}

extension SignupService_AuthResponse.SignupMethod: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SMS"),
    1: .same(proto: "AUTO_USER"),
  ]
}

extension SignupService_AuthCheckRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AuthCheckRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "auth"),
    2: .same(proto: "locale"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.auth) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.locale) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.auth.isEmpty {
      try visitor.visitSingularStringField(value: self.auth, fieldNumber: 1)
    }
    if !self.locale.isEmpty {
      try visitor.visitSingularStringField(value: self.locale, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SignupService_AuthCheckRequest, rhs: SignupService_AuthCheckRequest) -> Bool {
    if lhs.auth != rhs.auth {return false}
    if lhs.locale != rhs.locale {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SignupService_AuthCheckResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AuthCheckResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .ok {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SignupService_AuthCheckResponse, rhs: SignupService_AuthCheckResponse) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SignupService_AuthCheckResponse.Result: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
    1: .same(proto: "NoAuth"),
  ]
}

extension SignupService_LogoutRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LogoutRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "auth"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.auth) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.auth.isEmpty {
      try visitor.visitSingularStringField(value: self.auth, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SignupService_LogoutRequest, rhs: SignupService_LogoutRequest) -> Bool {
    if lhs.auth != rhs.auth {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SignupService_LogoutResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LogoutResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .ok {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SignupService_LogoutResponse, rhs: SignupService_LogoutResponse) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SignupService_LogoutResponse.Result: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
    1: .same(proto: "NoAuth"),
  ]
}

extension SignupService_CodeAuthTransactionStartRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CodeAuthTransactionStartRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "device"),
    2: .same(proto: "application"),
    3: .same(proto: "locale"),
  ]

  public var isInitialized: Bool {
    if let v = self._device, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._device) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._application) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.locale) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._device {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._application {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.locale.isEmpty {
      try visitor.visitSingularStringField(value: self.locale, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SignupService_CodeAuthTransactionStartRequest, rhs: SignupService_CodeAuthTransactionStartRequest) -> Bool {
    if lhs._device != rhs._device {return false}
    if lhs._application != rhs._application {return false}
    if lhs.locale != rhs.locale {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SignupService_CodeAuthTransactionStartResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CodeAuthTransactionStartResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "transaction_id"),
    2: .standard(proto: "auth_type"),
    3: .standard(proto: "auth_code"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.transactionID) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.authType) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.authCode) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.transactionID != 0 {
      try visitor.visitSingularUInt32Field(value: self.transactionID, fieldNumber: 1)
    }
    if self.authType != .code {
      try visitor.visitSingularEnumField(value: self.authType, fieldNumber: 2)
    }
    if self.authCode != 0 {
      try visitor.visitSingularUInt32Field(value: self.authCode, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SignupService_CodeAuthTransactionStartResponse, rhs: SignupService_CodeAuthTransactionStartResponse) -> Bool {
    if lhs.transactionID != rhs.transactionID {return false}
    if lhs.authType != rhs.authType {return false}
    if lhs.authCode != rhs.authCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SignupService_CodeAuthTransactionStartResponse.AuthType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Code"),
    1: .same(proto: "SMS"),
  ]
}

extension SignupService_CodeAuthTransactionUpdateRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CodeAuthTransactionUpdateRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "transaction_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.transactionID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.transactionID != 0 {
      try visitor.visitSingularUInt32Field(value: self.transactionID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SignupService_CodeAuthTransactionUpdateRequest, rhs: SignupService_CodeAuthTransactionUpdateRequest) -> Bool {
    if lhs.transactionID != rhs.transactionID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SignupService_CodeAuthTransactionUpdateResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CodeAuthTransactionUpdateResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .ok {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SignupService_CodeAuthTransactionUpdateResponse, rhs: SignupService_CodeAuthTransactionUpdateResponse) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SignupService_CodeAuthTransactionUpdateResponse.Result: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
    1: .same(proto: "TransactionIdInvalid"),
  ]
}

extension SignupService_CodeAuthTransactionSetPhoneRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CodeAuthTransactionSetPhoneRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "transaction_id"),
    2: .same(proto: "phone"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.transactionID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.phone) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.transactionID != 0 {
      try visitor.visitSingularUInt32Field(value: self.transactionID, fieldNumber: 1)
    }
    if !self.phone.isEmpty {
      try visitor.visitSingularStringField(value: self.phone, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SignupService_CodeAuthTransactionSetPhoneRequest, rhs: SignupService_CodeAuthTransactionSetPhoneRequest) -> Bool {
    if lhs.transactionID != rhs.transactionID {return false}
    if lhs.phone != rhs.phone {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SignupService_CodeAuthTransactionSetPhoneResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CodeAuthTransactionSetPhoneResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .ok {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SignupService_CodeAuthTransactionSetPhoneResponse, rhs: SignupService_CodeAuthTransactionSetPhoneResponse) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SignupService_CodeAuthTransactionSetPhoneResponse.Result: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
    1: .same(proto: "PhoneInvalid"),
    2: .same(proto: "TransactionIdInvalid"),
  ]
}

extension SignupService_CodeAuthTransactionSetCodeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CodeAuthTransactionSetCodeRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "transaction_id"),
    2: .standard(proto: "auth_code"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.transactionID) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.authCode) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.transactionID != 0 {
      try visitor.visitSingularUInt32Field(value: self.transactionID, fieldNumber: 1)
    }
    if self.authCode != 0 {
      try visitor.visitSingularUInt32Field(value: self.authCode, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SignupService_CodeAuthTransactionSetCodeRequest, rhs: SignupService_CodeAuthTransactionSetCodeRequest) -> Bool {
    if lhs.transactionID != rhs.transactionID {return false}
    if lhs.authCode != rhs.authCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SignupService_CodeAuthTransactionSetCodeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CodeAuthTransactionSetCodeResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .standard(proto: "auth_token"),
    3: .same(proto: "ttl"),
    4: .standard(proto: "company_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.authToken) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.ttl) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.companyID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .ok {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    if !self.authToken.isEmpty {
      try visitor.visitSingularStringField(value: self.authToken, fieldNumber: 2)
    }
    if self.ttl != 0 {
      try visitor.visitSingularUInt32Field(value: self.ttl, fieldNumber: 3)
    }
    if self.companyID != 0 {
      try visitor.visitSingularInt32Field(value: self.companyID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SignupService_CodeAuthTransactionSetCodeResponse, rhs: SignupService_CodeAuthTransactionSetCodeResponse) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.authToken != rhs.authToken {return false}
    if lhs.ttl != rhs.ttl {return false}
    if lhs.companyID != rhs.companyID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SignupService_CodeAuthTransactionSetCodeResponse.Result: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
    1: .same(proto: "CodeInvalid"),
    2: .same(proto: "TransactionIdInvalid"),
  ]
}
