// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: user_info.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct TvService_UserInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var accountID: Int64 {
    get {return _storage._accountID ?? 0}
    set {_uniqueStorage()._accountID = newValue}
  }
  /// Returns true if `accountID` has been explicitly set.
  var hasAccountID: Bool {return _storage._accountID != nil}
  /// Clears the value of `accountID`. Subsequent reads from it will return its default value.
  mutating func clearAccountID() {_uniqueStorage()._accountID = nil}

  var balance: Float {
    get {return _storage._balance ?? 0}
    set {_uniqueStorage()._balance = newValue}
  }
  /// Returns true if `balance` has been explicitly set.
  var hasBalance: Bool {return _storage._balance != nil}
  /// Clears the value of `balance`. Subsequent reads from it will return its default value.
  mutating func clearBalance() {_uniqueStorage()._balance = nil}

  var cost: Float {
    get {return _storage._cost ?? 0}
    set {_uniqueStorage()._cost = newValue}
  }
  /// Returns true if `cost` has been explicitly set.
  var hasCost: Bool {return _storage._cost != nil}
  /// Clears the value of `cost`. Subsequent reads from it will return its default value.
  mutating func clearCost() {_uniqueStorage()._cost = nil}

  var fullname: String {
    get {return _storage._fullname ?? String()}
    set {_uniqueStorage()._fullname = newValue}
  }
  /// Returns true if `fullname` has been explicitly set.
  var hasFullname: Bool {return _storage._fullname != nil}
  /// Clears the value of `fullname`. Subsequent reads from it will return its default value.
  mutating func clearFullname() {_uniqueStorage()._fullname = nil}

  var tariff: String {
    get {return _storage._tariff ?? String()}
    set {_uniqueStorage()._tariff = newValue}
  }
  /// Returns true if `tariff` has been explicitly set.
  var hasTariff: Bool {return _storage._tariff != nil}
  /// Clears the value of `tariff`. Subsequent reads from it will return its default value.
  mutating func clearTariff() {_uniqueStorage()._tariff = nil}

  var tvPacks: String {
    get {return _storage._tvPacks ?? String()}
    set {_uniqueStorage()._tvPacks = newValue}
  }
  /// Returns true if `tvPacks` has been explicitly set.
  var hasTvPacks: Bool {return _storage._tvPacks != nil}
  /// Clears the value of `tvPacks`. Subsequent reads from it will return its default value.
  mutating func clearTvPacks() {_uniqueStorage()._tvPacks = nil}

  var isVod: Bool {
    get {return _storage._isVod ?? false}
    set {_uniqueStorage()._isVod = newValue}
  }
  /// Returns true if `isVod` has been explicitly set.
  var hasIsVod: Bool {return _storage._isVod != nil}
  /// Clears the value of `isVod`. Subsequent reads from it will return its default value.
  mutating func clearIsVod() {_uniqueStorage()._isVod = nil}

  var isBlocked: Bool {
    get {return _storage._isBlocked ?? false}
    set {_uniqueStorage()._isBlocked = newValue}
  }
  /// Returns true if `isBlocked` has been explicitly set.
  var hasIsBlocked: Bool {return _storage._isBlocked != nil}
  /// Clears the value of `isBlocked`. Subsequent reads from it will return its default value.
  mutating func clearIsBlocked() {_uniqueStorage()._isBlocked = nil}

  var companyID: Int32 {
    get {return _storage._companyID ?? 0}
    set {_uniqueStorage()._companyID = newValue}
  }
  /// Returns true if `companyID` has been explicitly set.
  var hasCompanyID: Bool {return _storage._companyID != nil}
  /// Clears the value of `companyID`. Subsequent reads from it will return its default value.
  mutating func clearCompanyID() {_uniqueStorage()._companyID = nil}

  var login: String {
    get {return _storage._login ?? String()}
    set {_uniqueStorage()._login = newValue}
  }
  /// Returns true if `login` has been explicitly set.
  var hasLogin: Bool {return _storage._login != nil}
  /// Clears the value of `login`. Subsequent reads from it will return its default value.
  mutating func clearLogin() {_uniqueStorage()._login = nil}

  var password: String {
    get {return _storage._password ?? String()}
    set {_uniqueStorage()._password = newValue}
  }
  /// Returns true if `password` has been explicitly set.
  var hasPassword: Bool {return _storage._password != nil}
  /// Clears the value of `password`. Subsequent reads from it will return its default value.
  mutating func clearPassword() {_uniqueStorage()._password = nil}

  var tariffID: Int32 {
    get {return _storage._tariffID ?? 0}
    set {_uniqueStorage()._tariffID = newValue}
  }
  /// Returns true if `tariffID` has been explicitly set.
  var hasTariffID: Bool {return _storage._tariffID != nil}
  /// Clears the value of `tariffID`. Subsequent reads from it will return its default value.
  mutating func clearTariffID() {_uniqueStorage()._tariffID = nil}

  var partnerID: Int32 {
    get {return _storage._partnerID ?? 0}
    set {_uniqueStorage()._partnerID = newValue}
  }
  /// Returns true if `partnerID` has been explicitly set.
  var hasPartnerID: Bool {return _storage._partnerID != nil}
  /// Clears the value of `partnerID`. Subsequent reads from it will return its default value.
  mutating func clearPartnerID() {_uniqueStorage()._partnerID = nil}

  var onTest: Bool {
    get {return _storage._onTest ?? false}
    set {_uniqueStorage()._onTest = newValue}
  }
  /// Returns true if `onTest` has been explicitly set.
  var hasOnTest: Bool {return _storage._onTest != nil}
  /// Clears the value of `onTest`. Subsequent reads from it will return its default value.
  mutating func clearOnTest() {_uniqueStorage()._onTest = nil}

  var toPay: Int32 {
    get {return _storage._toPay ?? 0}
    set {_uniqueStorage()._toPay = newValue}
  }
  /// Returns true if `toPay` has been explicitly set.
  var hasToPay: Bool {return _storage._toPay != nil}
  /// Clears the value of `toPay`. Subsequent reads from it will return its default value.
  mutating func clearToPay() {_uniqueStorage()._toPay = nil}

  var realTariffID: Int32 {
    get {return _storage._realTariffID ?? 0}
    set {_uniqueStorage()._realTariffID = newValue}
  }
  /// Returns true if `realTariffID` has been explicitly set.
  var hasRealTariffID: Bool {return _storage._realTariffID != nil}
  /// Clears the value of `realTariffID`. Subsequent reads from it will return its default value.
  mutating func clearRealTariffID() {_uniqueStorage()._realTariffID = nil}

  var subscriptionID: Int32 {
    get {return _storage._subscriptionID ?? 0}
    set {_uniqueStorage()._subscriptionID = newValue}
  }
  /// Returns true if `subscriptionID` has been explicitly set.
  var hasSubscriptionID: Bool {return _storage._subscriptionID != nil}
  /// Clears the value of `subscriptionID`. Subsequent reads from it will return its default value.
  mutating func clearSubscriptionID() {_uniqueStorage()._subscriptionID = nil}

  var subscriptionEndTime: Int32 {
    get {return _storage._subscriptionEndTime ?? 0}
    set {_uniqueStorage()._subscriptionEndTime = newValue}
  }
  /// Returns true if `subscriptionEndTime` has been explicitly set.
  var hasSubscriptionEndTime: Bool {return _storage._subscriptionEndTime != nil}
  /// Clears the value of `subscriptionEndTime`. Subsequent reads from it will return its default value.
  mutating func clearSubscriptionEndTime() {_uniqueStorage()._subscriptionEndTime = nil}

  var locale: String {
    get {return _storage._locale ?? String()}
    set {_uniqueStorage()._locale = newValue}
  }
  /// Returns true if `locale` has been explicitly set.
  var hasLocale: Bool {return _storage._locale != nil}
  /// Clears the value of `locale`. Subsequent reads from it will return its default value.
  mutating func clearLocale() {_uniqueStorage()._locale = nil}

  var tariffPaidFor: Int32 {
    get {return _storage._tariffPaidFor ?? 0}
    set {_uniqueStorage()._tariffPaidFor = newValue}
  }
  /// Returns true if `tariffPaidFor` has been explicitly set.
  var hasTariffPaidFor: Bool {return _storage._tariffPaidFor != nil}
  /// Clears the value of `tariffPaidFor`. Subsequent reads from it will return its default value.
  mutating func clearTariffPaidFor() {_uniqueStorage()._tariffPaidFor = nil}

  var autoUser: Bool {
    get {return _storage._autoUser ?? false}
    set {_uniqueStorage()._autoUser = newValue}
  }
  /// Returns true if `autoUser` has been explicitly set.
  var hasAutoUser: Bool {return _storage._autoUser != nil}
  /// Clears the value of `autoUser`. Subsequent reads from it will return its default value.
  mutating func clearAutoUser() {_uniqueStorage()._autoUser = nil}

  var promoCode: String {
    get {return _storage._promoCode ?? String()}
    set {_uniqueStorage()._promoCode = newValue}
  }
  /// Returns true if `promoCode` has been explicitly set.
  var hasPromoCode: Bool {return _storage._promoCode != nil}
  /// Clears the value of `promoCode`. Subsequent reads from it will return its default value.
  mutating func clearPromoCode() {_uniqueStorage()._promoCode = nil}

  var email: String {
    get {return _storage._email ?? String()}
    set {_uniqueStorage()._email = newValue}
  }
  /// Returns true if `email` has been explicitly set.
  var hasEmail: Bool {return _storage._email != nil}
  /// Clears the value of `email`. Subsequent reads from it will return its default value.
  mutating func clearEmail() {_uniqueStorage()._email = nil}

  var services: [TvService_Service] {
    get {return _storage._services}
    set {_uniqueStorage()._services = newValue}
  }

  var dateOfBirth: Int64 {
    get {return _storage._dateOfBirth ?? 0}
    set {_uniqueStorage()._dateOfBirth = newValue}
  }
  /// Returns true if `dateOfBirth` has been explicitly set.
  var hasDateOfBirth: Bool {return _storage._dateOfBirth != nil}
  /// Clears the value of `dateOfBirth`. Subsequent reads from it will return its default value.
  mutating func clearDateOfBirth() {_uniqueStorage()._dateOfBirth = nil}

  var currencyToPay: Int32 {
    get {return _storage._currencyToPay ?? 0}
    set {_uniqueStorage()._currencyToPay = newValue}
  }
  /// Returns true if `currencyToPay` has been explicitly set.
  var hasCurrencyToPay: Bool {return _storage._currencyToPay != nil}
  /// Clears the value of `currencyToPay`. Subsequent reads from it will return its default value.
  mutating func clearCurrencyToPay() {_uniqueStorage()._currencyToPay = nil}

  var currencyBalance: Float {
    get {return _storage._currencyBalance ?? 0}
    set {_uniqueStorage()._currencyBalance = newValue}
  }
  /// Returns true if `currencyBalance` has been explicitly set.
  var hasCurrencyBalance: Bool {return _storage._currencyBalance != nil}
  /// Clears the value of `currencyBalance`. Subsequent reads from it will return its default value.
  mutating func clearCurrencyBalance() {_uniqueStorage()._currencyBalance = nil}

  var currencyCost: Float {
    get {return _storage._currencyCost ?? 0}
    set {_uniqueStorage()._currencyCost = newValue}
  }
  /// Returns true if `currencyCost` has been explicitly set.
  var hasCurrencyCost: Bool {return _storage._currencyCost != nil}
  /// Clears the value of `currencyCost`. Subsequent reads from it will return its default value.
  mutating func clearCurrencyCost() {_uniqueStorage()._currencyCost = nil}

  var autopaymentEnabled: Bool {
    get {return _storage._autopaymentEnabled ?? false}
    set {_uniqueStorage()._autopaymentEnabled = newValue}
  }
  /// Returns true if `autopaymentEnabled` has been explicitly set.
  var hasAutopaymentEnabled: Bool {return _storage._autopaymentEnabled != nil}
  /// Clears the value of `autopaymentEnabled`. Subsequent reads from it will return its default value.
  mutating func clearAutopaymentEnabled() {_uniqueStorage()._autopaymentEnabled = nil}

  var phoneNumber: String {
    get {return _storage._phoneNumber ?? String()}
    set {_uniqueStorage()._phoneNumber = newValue}
  }
  /// Returns true if `phoneNumber` has been explicitly set.
  var hasPhoneNumber: Bool {return _storage._phoneNumber != nil}
  /// Clears the value of `phoneNumber`. Subsequent reads from it will return its default value.
  mutating func clearPhoneNumber() {_uniqueStorage()._phoneNumber = nil}

  var notificationDay: Int32 {
    get {return _storage._notificationDay ?? 0}
    set {_uniqueStorage()._notificationDay = newValue}
  }
  /// Returns true if `notificationDay` has been explicitly set.
  var hasNotificationDay: Bool {return _storage._notificationDay != nil}
  /// Clears the value of `notificationDay`. Subsequent reads from it will return its default value.
  mutating func clearNotificationDay() {_uniqueStorage()._notificationDay = nil}

  var dateContract: Int32 {
    get {return _storage._dateContract ?? 0}
    set {_uniqueStorage()._dateContract = newValue}
  }
  /// Returns true if `dateContract` has been explicitly set.
  var hasDateContract: Bool {return _storage._dateContract != nil}
  /// Clears the value of `dateContract`. Subsequent reads from it will return its default value.
  mutating func clearDateContract() {_uniqueStorage()._dateContract = nil}

  var dateTariffBinding: Int32 {
    get {return _storage._dateTariffBinding ?? 0}
    set {_uniqueStorage()._dateTariffBinding = newValue}
  }
  /// Returns true if `dateTariffBinding` has been explicitly set.
  var hasDateTariffBinding: Bool {return _storage._dateTariffBinding != nil}
  /// Clears the value of `dateTariffBinding`. Subsequent reads from it will return its default value.
  mutating func clearDateTariffBinding() {_uniqueStorage()._dateTariffBinding = nil}

  var boundTariffID: Int32 {
    get {return _storage._boundTariffID ?? 0}
    set {_uniqueStorage()._boundTariffID = newValue}
  }
  /// Returns true if `boundTariffID` has been explicitly set.
  var hasBoundTariffID: Bool {return _storage._boundTariffID != nil}
  /// Clears the value of `boundTariffID`. Subsequent reads from it will return its default value.
  mutating func clearBoundTariffID() {_uniqueStorage()._boundTariffID = nil}

  var subscriptionStore: Int32 {
    get {return _storage._subscriptionStore ?? 0}
    set {_uniqueStorage()._subscriptionStore = newValue}
  }
  /// Returns true if `subscriptionStore` has been explicitly set.
  var hasSubscriptionStore: Bool {return _storage._subscriptionStore != nil}
  /// Clears the value of `subscriptionStore`. Subsequent reads from it will return its default value.
  mutating func clearSubscriptionStore() {_uniqueStorage()._subscriptionStore = nil}

  var bloggerPromo: String {
    get {return _storage._bloggerPromo ?? String()}
    set {_uniqueStorage()._bloggerPromo = newValue}
  }
  /// Returns true if `bloggerPromo` has been explicitly set.
  var hasBloggerPromo: Bool {return _storage._bloggerPromo != nil}
  /// Clears the value of `bloggerPromo`. Subsequent reads from it will return its default value.
  mutating func clearBloggerPromo() {_uniqueStorage()._bloggerPromo = nil}

  var subscriptionStoreEndTime: Int32 {
    get {return _storage._subscriptionStoreEndTime ?? 0}
    set {_uniqueStorage()._subscriptionStoreEndTime = newValue}
  }
  /// Returns true if `subscriptionStoreEndTime` has been explicitly set.
  var hasSubscriptionStoreEndTime: Bool {return _storage._subscriptionStoreEndTime != nil}
  /// Clears the value of `subscriptionStoreEndTime`. Subsequent reads from it will return its default value.
  mutating func clearSubscriptionStoreEndTime() {_uniqueStorage()._subscriptionStoreEndTime = nil}

  var bloggerAbonCount: Int32 {
    get {return _storage._bloggerAbonCount ?? 0}
    set {_uniqueStorage()._bloggerAbonCount = newValue}
  }
  /// Returns true if `bloggerAbonCount` has been explicitly set.
  var hasBloggerAbonCount: Bool {return _storage._bloggerAbonCount != nil}
  /// Clears the value of `bloggerAbonCount`. Subsequent reads from it will return its default value.
  mutating func clearBloggerAbonCount() {_uniqueStorage()._bloggerAbonCount = nil}

  var subscriptionStoreProductID: String {
    get {return _storage._subscriptionStoreProductID ?? String()}
    set {_uniqueStorage()._subscriptionStoreProductID = newValue}
  }
  /// Returns true if `subscriptionStoreProductID` has been explicitly set.
  var hasSubscriptionStoreProductID: Bool {return _storage._subscriptionStoreProductID != nil}
  /// Clears the value of `subscriptionStoreProductID`. Subsequent reads from it will return its default value.
  mutating func clearSubscriptionStoreProductID() {_uniqueStorage()._subscriptionStoreProductID = nil}

  var parentalControlEnabled: Bool {
    get {return _storage._parentalControlEnabled ?? false}
    set {_uniqueStorage()._parentalControlEnabled = newValue}
  }
  /// Returns true if `parentalControlEnabled` has been explicitly set.
  var hasParentalControlEnabled: Bool {return _storage._parentalControlEnabled != nil}
  /// Clears the value of `parentalControlEnabled`. Subsequent reads from it will return its default value.
  mutating func clearParentalControlEnabled() {_uniqueStorage()._parentalControlEnabled = nil}

  var monoSmartphone: Bool {
    get {return _storage._monoSmartphone ?? false}
    set {_uniqueStorage()._monoSmartphone = newValue}
  }
  /// Returns true if `monoSmartphone` has been explicitly set.
  var hasMonoSmartphone: Bool {return _storage._monoSmartphone != nil}
  /// Clears the value of `monoSmartphone`. Subsequent reads from it will return its default value.
  mutating func clearMonoSmartphone() {_uniqueStorage()._monoSmartphone = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct TvService_GetUserInfoRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var auth: String {
    get {return _auth ?? String()}
    set {_auth = newValue}
  }
  /// Returns true if `auth` has been explicitly set.
  var hasAuth: Bool {return self._auth != nil}
  /// Clears the value of `auth`. Subsequent reads from it will return its default value.
  mutating func clearAuth() {self._auth = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _auth: String? = nil
}

struct TvService_GetUserInfoResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: TvService_GetUserInfoResponse.Result {
    get {return _status ?? .ok}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  mutating func clearStatus() {self._status = nil}

  var info: TvService_UserInfo {
    get {return _info ?? TvService_UserInfo()}
    set {_info = newValue}
  }
  /// Returns true if `info` has been explicitly set.
  var hasInfo: Bool {return self._info != nil}
  /// Clears the value of `info`. Subsequent reads from it will return its default value.
  mutating func clearInfo() {self._info = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Result: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case ok // = 0
    case noAuth // = 1

    init() {
      self = .ok
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ok
      case 1: self = .noAuth
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .ok: return 0
      case .noAuth: return 1
      }
    }

  }

  init() {}

  fileprivate var _status: TvService_GetUserInfoResponse.Result? = nil
  fileprivate var _info: TvService_UserInfo? = nil
}

#if swift(>=4.2)

extension TvService_GetUserInfoResponse.Result: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tv_service"

extension TvService_UserInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_id"),
    2: .same(proto: "balance"),
    3: .same(proto: "cost"),
    4: .same(proto: "fullname"),
    5: .same(proto: "tariff"),
    6: .standard(proto: "tv_packs"),
    7: .standard(proto: "is_vod"),
    8: .standard(proto: "is_blocked"),
    9: .standard(proto: "company_id"),
    10: .same(proto: "login"),
    11: .same(proto: "password"),
    12: .standard(proto: "tariff_id"),
    13: .standard(proto: "partner_id"),
    14: .standard(proto: "on_test"),
    15: .standard(proto: "to_pay"),
    16: .standard(proto: "real_tariff_id"),
    17: .standard(proto: "subscription_id"),
    18: .standard(proto: "subscription_end_time"),
    19: .same(proto: "locale"),
    20: .standard(proto: "tariff_paid_for"),
    21: .standard(proto: "auto_user"),
    22: .standard(proto: "promo_code"),
    23: .same(proto: "email"),
    24: .same(proto: "services"),
    25: .standard(proto: "date_of_birth"),
    26: .standard(proto: "currency_to_pay"),
    27: .standard(proto: "currency_balance"),
    28: .standard(proto: "currency_cost"),
    29: .standard(proto: "autopayment_enabled"),
    30: .standard(proto: "phone_number"),
    31: .standard(proto: "notification_day"),
    32: .standard(proto: "date_contract"),
    33: .standard(proto: "date_tariff_binding"),
    34: .standard(proto: "bound_tariff_id"),
    35: .standard(proto: "subscription_store"),
    36: .standard(proto: "blogger_promo"),
    37: .standard(proto: "subscription_store_end_time"),
    38: .standard(proto: "blogger_abon_count"),
    39: .standard(proto: "subscription_store_product_id"),
    40: .standard(proto: "parental_control_enabled"),
    100: .standard(proto: "mono_smartphone"),
  ]

  fileprivate class _StorageClass {
    var _accountID: Int64? = nil
    var _balance: Float? = nil
    var _cost: Float? = nil
    var _fullname: String? = nil
    var _tariff: String? = nil
    var _tvPacks: String? = nil
    var _isVod: Bool? = nil
    var _isBlocked: Bool? = nil
    var _companyID: Int32? = nil
    var _login: String? = nil
    var _password: String? = nil
    var _tariffID: Int32? = nil
    var _partnerID: Int32? = nil
    var _onTest: Bool? = nil
    var _toPay: Int32? = nil
    var _realTariffID: Int32? = nil
    var _subscriptionID: Int32? = nil
    var _subscriptionEndTime: Int32? = nil
    var _locale: String? = nil
    var _tariffPaidFor: Int32? = nil
    var _autoUser: Bool? = nil
    var _promoCode: String? = nil
    var _email: String? = nil
    var _services: [TvService_Service] = []
    var _dateOfBirth: Int64? = nil
    var _currencyToPay: Int32? = nil
    var _currencyBalance: Float? = nil
    var _currencyCost: Float? = nil
    var _autopaymentEnabled: Bool? = nil
    var _phoneNumber: String? = nil
    var _notificationDay: Int32? = nil
    var _dateContract: Int32? = nil
    var _dateTariffBinding: Int32? = nil
    var _boundTariffID: Int32? = nil
    var _subscriptionStore: Int32? = nil
    var _bloggerPromo: String? = nil
    var _subscriptionStoreEndTime: Int32? = nil
    var _bloggerAbonCount: Int32? = nil
    var _subscriptionStoreProductID: String? = nil
    var _parentalControlEnabled: Bool? = nil
    var _monoSmartphone: Bool? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _accountID = source._accountID
      _balance = source._balance
      _cost = source._cost
      _fullname = source._fullname
      _tariff = source._tariff
      _tvPacks = source._tvPacks
      _isVod = source._isVod
      _isBlocked = source._isBlocked
      _companyID = source._companyID
      _login = source._login
      _password = source._password
      _tariffID = source._tariffID
      _partnerID = source._partnerID
      _onTest = source._onTest
      _toPay = source._toPay
      _realTariffID = source._realTariffID
      _subscriptionID = source._subscriptionID
      _subscriptionEndTime = source._subscriptionEndTime
      _locale = source._locale
      _tariffPaidFor = source._tariffPaidFor
      _autoUser = source._autoUser
      _promoCode = source._promoCode
      _email = source._email
      _services = source._services
      _dateOfBirth = source._dateOfBirth
      _currencyToPay = source._currencyToPay
      _currencyBalance = source._currencyBalance
      _currencyCost = source._currencyCost
      _autopaymentEnabled = source._autopaymentEnabled
      _phoneNumber = source._phoneNumber
      _notificationDay = source._notificationDay
      _dateContract = source._dateContract
      _dateTariffBinding = source._dateTariffBinding
      _boundTariffID = source._boundTariffID
      _subscriptionStore = source._subscriptionStore
      _bloggerPromo = source._bloggerPromo
      _subscriptionStoreEndTime = source._subscriptionStoreEndTime
      _bloggerAbonCount = source._bloggerAbonCount
      _subscriptionStoreProductID = source._subscriptionStoreProductID
      _parentalControlEnabled = source._parentalControlEnabled
      _monoSmartphone = source._monoSmartphone
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._accountID == nil {return false}
      if _storage._balance == nil {return false}
      if _storage._cost == nil {return false}
      if _storage._fullname == nil {return false}
      if _storage._tariff == nil {return false}
      if _storage._tvPacks == nil {return false}
      if _storage._isVod == nil {return false}
      if _storage._isBlocked == nil {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._services) {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt64Field(value: &_storage._accountID) }()
        case 2: try { try decoder.decodeSingularFloatField(value: &_storage._balance) }()
        case 3: try { try decoder.decodeSingularFloatField(value: &_storage._cost) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._fullname) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._tariff) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._tvPacks) }()
        case 7: try { try decoder.decodeSingularBoolField(value: &_storage._isVod) }()
        case 8: try { try decoder.decodeSingularBoolField(value: &_storage._isBlocked) }()
        case 9: try { try decoder.decodeSingularInt32Field(value: &_storage._companyID) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._login) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._password) }()
        case 12: try { try decoder.decodeSingularInt32Field(value: &_storage._tariffID) }()
        case 13: try { try decoder.decodeSingularInt32Field(value: &_storage._partnerID) }()
        case 14: try { try decoder.decodeSingularBoolField(value: &_storage._onTest) }()
        case 15: try { try decoder.decodeSingularInt32Field(value: &_storage._toPay) }()
        case 16: try { try decoder.decodeSingularInt32Field(value: &_storage._realTariffID) }()
        case 17: try { try decoder.decodeSingularInt32Field(value: &_storage._subscriptionID) }()
        case 18: try { try decoder.decodeSingularInt32Field(value: &_storage._subscriptionEndTime) }()
        case 19: try { try decoder.decodeSingularStringField(value: &_storage._locale) }()
        case 20: try { try decoder.decodeSingularInt32Field(value: &_storage._tariffPaidFor) }()
        case 21: try { try decoder.decodeSingularBoolField(value: &_storage._autoUser) }()
        case 22: try { try decoder.decodeSingularStringField(value: &_storage._promoCode) }()
        case 23: try { try decoder.decodeSingularStringField(value: &_storage._email) }()
        case 24: try { try decoder.decodeRepeatedMessageField(value: &_storage._services) }()
        case 25: try { try decoder.decodeSingularSInt64Field(value: &_storage._dateOfBirth) }()
        case 26: try { try decoder.decodeSingularInt32Field(value: &_storage._currencyToPay) }()
        case 27: try { try decoder.decodeSingularFloatField(value: &_storage._currencyBalance) }()
        case 28: try { try decoder.decodeSingularFloatField(value: &_storage._currencyCost) }()
        case 29: try { try decoder.decodeSingularBoolField(value: &_storage._autopaymentEnabled) }()
        case 30: try { try decoder.decodeSingularStringField(value: &_storage._phoneNumber) }()
        case 31: try { try decoder.decodeSingularInt32Field(value: &_storage._notificationDay) }()
        case 32: try { try decoder.decodeSingularInt32Field(value: &_storage._dateContract) }()
        case 33: try { try decoder.decodeSingularInt32Field(value: &_storage._dateTariffBinding) }()
        case 34: try { try decoder.decodeSingularInt32Field(value: &_storage._boundTariffID) }()
        case 35: try { try decoder.decodeSingularInt32Field(value: &_storage._subscriptionStore) }()
        case 36: try { try decoder.decodeSingularStringField(value: &_storage._bloggerPromo) }()
        case 37: try { try decoder.decodeSingularInt32Field(value: &_storage._subscriptionStoreEndTime) }()
        case 38: try { try decoder.decodeSingularInt32Field(value: &_storage._bloggerAbonCount) }()
        case 39: try { try decoder.decodeSingularStringField(value: &_storage._subscriptionStoreProductID) }()
        case 40: try { try decoder.decodeSingularBoolField(value: &_storage._parentalControlEnabled) }()
        case 100: try { try decoder.decodeSingularBoolField(value: &_storage._monoSmartphone) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._accountID {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._balance {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 2)
      }
      if let v = _storage._cost {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 3)
      }
      if let v = _storage._fullname {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      }
      if let v = _storage._tariff {
        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
      }
      if let v = _storage._tvPacks {
        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
      }
      if let v = _storage._isVod {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
      }
      if let v = _storage._isBlocked {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
      }
      if let v = _storage._companyID {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 9)
      }
      if let v = _storage._login {
        try visitor.visitSingularStringField(value: v, fieldNumber: 10)
      }
      if let v = _storage._password {
        try visitor.visitSingularStringField(value: v, fieldNumber: 11)
      }
      if let v = _storage._tariffID {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 12)
      }
      if let v = _storage._partnerID {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 13)
      }
      if let v = _storage._onTest {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 14)
      }
      if let v = _storage._toPay {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 15)
      }
      if let v = _storage._realTariffID {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 16)
      }
      if let v = _storage._subscriptionID {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 17)
      }
      if let v = _storage._subscriptionEndTime {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 18)
      }
      if let v = _storage._locale {
        try visitor.visitSingularStringField(value: v, fieldNumber: 19)
      }
      if let v = _storage._tariffPaidFor {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 20)
      }
      if let v = _storage._autoUser {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 21)
      }
      if let v = _storage._promoCode {
        try visitor.visitSingularStringField(value: v, fieldNumber: 22)
      }
      if let v = _storage._email {
        try visitor.visitSingularStringField(value: v, fieldNumber: 23)
      }
      if !_storage._services.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._services, fieldNumber: 24)
      }
      if let v = _storage._dateOfBirth {
        try visitor.visitSingularSInt64Field(value: v, fieldNumber: 25)
      }
      if let v = _storage._currencyToPay {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 26)
      }
      if let v = _storage._currencyBalance {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 27)
      }
      if let v = _storage._currencyCost {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 28)
      }
      if let v = _storage._autopaymentEnabled {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 29)
      }
      if let v = _storage._phoneNumber {
        try visitor.visitSingularStringField(value: v, fieldNumber: 30)
      }
      if let v = _storage._notificationDay {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 31)
      }
      if let v = _storage._dateContract {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 32)
      }
      if let v = _storage._dateTariffBinding {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 33)
      }
      if let v = _storage._boundTariffID {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 34)
      }
      if let v = _storage._subscriptionStore {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 35)
      }
      if let v = _storage._bloggerPromo {
        try visitor.visitSingularStringField(value: v, fieldNumber: 36)
      }
      if let v = _storage._subscriptionStoreEndTime {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 37)
      }
      if let v = _storage._bloggerAbonCount {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 38)
      }
      if let v = _storage._subscriptionStoreProductID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 39)
      }
      if let v = _storage._parentalControlEnabled {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 40)
      }
      if let v = _storage._monoSmartphone {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 100)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TvService_UserInfo, rhs: TvService_UserInfo) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._accountID != rhs_storage._accountID {return false}
        if _storage._balance != rhs_storage._balance {return false}
        if _storage._cost != rhs_storage._cost {return false}
        if _storage._fullname != rhs_storage._fullname {return false}
        if _storage._tariff != rhs_storage._tariff {return false}
        if _storage._tvPacks != rhs_storage._tvPacks {return false}
        if _storage._isVod != rhs_storage._isVod {return false}
        if _storage._isBlocked != rhs_storage._isBlocked {return false}
        if _storage._companyID != rhs_storage._companyID {return false}
        if _storage._login != rhs_storage._login {return false}
        if _storage._password != rhs_storage._password {return false}
        if _storage._tariffID != rhs_storage._tariffID {return false}
        if _storage._partnerID != rhs_storage._partnerID {return false}
        if _storage._onTest != rhs_storage._onTest {return false}
        if _storage._toPay != rhs_storage._toPay {return false}
        if _storage._realTariffID != rhs_storage._realTariffID {return false}
        if _storage._subscriptionID != rhs_storage._subscriptionID {return false}
        if _storage._subscriptionEndTime != rhs_storage._subscriptionEndTime {return false}
        if _storage._locale != rhs_storage._locale {return false}
        if _storage._tariffPaidFor != rhs_storage._tariffPaidFor {return false}
        if _storage._autoUser != rhs_storage._autoUser {return false}
        if _storage._promoCode != rhs_storage._promoCode {return false}
        if _storage._email != rhs_storage._email {return false}
        if _storage._services != rhs_storage._services {return false}
        if _storage._dateOfBirth != rhs_storage._dateOfBirth {return false}
        if _storage._currencyToPay != rhs_storage._currencyToPay {return false}
        if _storage._currencyBalance != rhs_storage._currencyBalance {return false}
        if _storage._currencyCost != rhs_storage._currencyCost {return false}
        if _storage._autopaymentEnabled != rhs_storage._autopaymentEnabled {return false}
        if _storage._phoneNumber != rhs_storage._phoneNumber {return false}
        if _storage._notificationDay != rhs_storage._notificationDay {return false}
        if _storage._dateContract != rhs_storage._dateContract {return false}
        if _storage._dateTariffBinding != rhs_storage._dateTariffBinding {return false}
        if _storage._boundTariffID != rhs_storage._boundTariffID {return false}
        if _storage._subscriptionStore != rhs_storage._subscriptionStore {return false}
        if _storage._bloggerPromo != rhs_storage._bloggerPromo {return false}
        if _storage._subscriptionStoreEndTime != rhs_storage._subscriptionStoreEndTime {return false}
        if _storage._bloggerAbonCount != rhs_storage._bloggerAbonCount {return false}
        if _storage._subscriptionStoreProductID != rhs_storage._subscriptionStoreProductID {return false}
        if _storage._parentalControlEnabled != rhs_storage._parentalControlEnabled {return false}
        if _storage._monoSmartphone != rhs_storage._monoSmartphone {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TvService_GetUserInfoRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetUserInfoRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "auth"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._auth) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._auth {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TvService_GetUserInfoRequest, rhs: TvService_GetUserInfoRequest) -> Bool {
    if lhs._auth != rhs._auth {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TvService_GetUserInfoResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetUserInfoResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "info"),
  ]

  public var isInitialized: Bool {
    if self._status == nil {return false}
    if let v = self._info, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._status) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._info) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if let v = self._info {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TvService_GetUserInfoResponse, rhs: TvService_GetUserInfoResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs._info != rhs._info {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TvService_GetUserInfoResponse.Result: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
    1: .same(proto: "NoAuth"),
  ]
}
